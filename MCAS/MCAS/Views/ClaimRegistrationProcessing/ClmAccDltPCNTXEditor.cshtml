@using MCAS.Web.Objects.Resources.ClaimProcessing;
@using MCAS.Web.Objects.Resources.Common;
@using MCAS.Web.Objects.CommonHelper;
@using MCAS.Globalisation;
@using System;
@model MCAS.Web.Objects.ClaimObjectHelper.ClaimAccidentDetailsModel
@{
    ViewBag.Title = "ClmAccDltPCNTXEditor";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var mMCASQueryString = Html.MCASQueryString(Request.QueryString);
    var caller = mMCASQueryString["claimMode"] != null ? Convert.ToString(mMCASQueryString["claimMode"]) : "";
    var pagemode = mMCASQueryString["mode"] != null ? Convert.ToString(mMCASQueryString["mode"]) : "";
    var accidentClaimIdNew = Model.AccidentClaimId != null ? Convert.ToString(Model.AccidentClaimId) : "0";
    var SubMenu = !string.IsNullOrEmpty(Convert.ToString((HttpContext.Current.Session["ScreenNameDash"]))) ? MenuListItem.ClaimTabs.GetClaimLabel(Convert.ToString((HttpContext.Current.Session["ScreenNameDash"]))) : ClaimAccident.ResourceManager.GetString(MenuListItem.ClaimTabs.SubMenuString(@caller, @accidentClaimIdNew, @pagemode, ""));
    var policyid = mMCASQueryString["PolicyId"];
    var iscompleted = @Model.IsComplete;
    var AccidentDate = Model.AccidentDate == null ? "" : Model.AccidentDate.Value.ToString(System.Configuration.ConfigurationManager.AppSettings["DateFormat"]);
    var ReportedDate = Model.ReportedDate == null ? "" : Model.ReportedDate.Value.ToString(System.Configuration.ConfigurationManager.AppSettings["DateFormat"]);
}
<style>
    .OnlyTaxi
    {
        display: none;
    }
</style>
<script src="@Url.Content("~/Scripts/jquery-2.1.0.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/globalize/globalize.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/globalize/cultures/globalize.culture.en-GB.js")" type="text/javascript"></script>
<div class="dashboard-wrapper">
    <div class="container">
        <div class="page-title" id="reg">
            <div class="col-lg-12" id="reg2" style="background-color: white; position: fixed; z-index: 1;">
                <h2>
                    @ClaimAccident.ResourceManager.GetString(MenuListItem.ClaimTabs.PreBreadCrumbString(@pagemode))</h2>
                <ul class="breadcrumb">
                    <li>@SubMenu</li>
                    <li>@ClaimAccident.Accident</li>
                </ul>
            </div>
            <div style="position: relative!important">
                @Html.Action("_ClaimDeatailsPCNTX", "ClaimRegistrationProcessing", new { PolicyId = @policyid, AccidentDetailId = @accidentClaimIdNew })
            </div>
        </div>
        <hr />
        <div class="row" id="toprow">
            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                <div class="panel panel-info" id="mainfieldset">
                    @if (Convert.ToBoolean(TempData["AccidentPermission"]))
                    {
                        <div class="panel-heading clearfix">
                            <i class="icon-check-sign"></i>
                            <h3 class="panel-title">
                                @ClaimAccident.ClaimAccidentEntry</h3>
                        </div>
                        <div class="panel-body">
                            @using (Html.BeginForm("ClmAccDltPCNTXEditor", "ClaimRegistrationProcessing", new { PolicyId = "0", mode = "Add" }, FormMethod.Post, new { role = "form", @class = "form-horizontal", id = "claimaccidententryform", name = "claimaccidententryform" }))
                            {
                                @Html.ValidationSummary(true) 
                                <div style="color: Red; font-weight: bold;" class="has-error" id="error">
                                    <p style="text-align: center;" id="errorMsg">
                                        @if (@ViewData["SuccessMsgPcTx"] != null)
                                        {
                                            @ViewData["SuccessMsgPcTx"]
                                        }
                                    </p>
                                </div>
                                <div style="color: Red; font-weight: bold;" class="has-error" id="error">
                                    <p align="center" id="SuccessMessage">
                                        @if (@ViewData["SuccessMsg"] != null)
                                        {
                                            @ViewData["SuccessMsg"]
                                        }
                                    </p>
                                </div>
                                <fieldset>
                                    <legend>@ClaimAccident.AccidentDetails</legend>
                                    <div class="panel-body">
                                        <div class="form-group">
                                            <div class="col-lg-6">
                                                <div class="form-group">
                                                    @Html.HiddenFor(m => m.AccidentClaimId)
                                                    @Html.HiddenFor(m => m.PolicyId)
                                                    @Html.HiddenFor(m => m.ViewMode)
                                                    @Html.HiddenFor(m => m.Prop1, new { @Value = "0" })
                                                    @Html.HiddenFor(m => m.hidprop)
                                                    @Html.HiddenFor(m => m.OrganizationType)
                                                    @Html.HiddenFor(m => m.ChckClaimComplete)
                                                    @*@Html.HiddenFor(m => m.ChkODStatus)
                                                    @Html.HiddenFor(m => m.ChkTPStatus)
                                                    @Html.HiddenFor(m => m.HChkApprovedPayment)*@
                                                    @Html.HiddenFor(m => m.HClaimId)
                                                    @*@Html.HiddenFor(m => m.BusServiceNo, new { @Value = "0" })
                                                    @Html.HiddenFor(m => m.ODStatus, new { @Value = "N" })
                                                    @Html.HiddenFor(m => m.TPClaimentStatus, new { @Value = "N" })*@
                                                    <label class="col-sm-4 control-label" for="inputIPNo">
                                                        @ClaimAccident.ClaimNo</label>
                                                    <div class="col-sm-8">
                                                        @Html.TextBoxFor(m => m.ClaimNo, new { id = "inputClaimNo", @readOnly = true, @class = "form-control", @maxlength = "50" })
                                                        @Html.ValidationMessageFor(m => m.ClaimNo)
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-lg-6">
                                                <div class="form-group">
                                                    <label class="col-sm-4 control-label">
                                                        @ClaimAccident.CDGEClaimRef</label>
                                                    <div class="col-sm-8">
                                                        @Html.TextBoxFor(m => m.CDGEClaimRefNo, new { id = "inputClaimRefNo", @readOnly = true, @class = "form-control", @maxlength = "50" })
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <div class="col-lg-6">
                                                <div class="form-group">
                                                    <label class="col-sm-4 control-label">
                                                        @ClaimAccident.AccidentDate &nbsp;<span class="text-danger">*</span></label>
                                                    <div class="col-sm-8">
                                                        @Html.TextBoxFor(m => m.AccidentDate, "{0:d}", new { id = "inputAccidentDate", @class = "form-control", maxlength = 10 })
                                                        @Html.ValidationMessageFor(m => m.AccidentDate)
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-lg-6">
                                                <div class="form-group">
                                                    <label class="col-sm-4 control-label">
                                                        @ClaimAccident.VehicleNo &nbsp;<span class="text-danger">*</span>
                                                    </label>
                                                    <div class="col-sm-8">
                                                        @Html.TextBoxFor(m => m.VehicleNo, new { id = "inputVehicleNumber", @class = "form-control", @maxlength = 10 })
                                                       @Html.ValidationMessageFor(m => m.VehicleNo)
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <div class="col-lg-6">
                                                <div class="form-group">
                                                    <label class="col-sm-4 control-label">
                                                        @ClaimAccident.AccidentTime &nbsp;@*<span class="text-danger">*</span>*@
                                                    </label>
                                                    <div class="col-sm-8">
                                                        @Html.TextBoxFor(m => m.AccidentTime, new { id = "inputAccidentTime", @class = "form-control", @maxlength = 5 })
                                                        @Html.ValidationMessageFor(m => m.AccidentTime)
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-sm-6">
                                                <div class="form-group">
                                                    <label for="inputAccidentLoc" class="col-sm-4 control-label">
                                                        @ClaimAccident.AccidentLoc</label>
                                                    <div class="col-sm-8">
                                                        @Html.TextAreaFor(m => m.AccidentLoc, new { id = "inputAccidentLoc", @class = "form-control", @maxlength = 150 })
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="form-groupx m_rl-15">
                                            <div class="col-sm-6 m_b_15">
                                                <div class="form-group">
                                                    <label class="col-sm-4 control-label">
                                                        @ClaimAccident.ReportedDate2&nbsp;@*<span class="text-danger">*</span>*@
                                                    </label>
                                                    <div class="col-sm-8">
                                                        @Html.TextBoxFor(m => m.ReportedDate, "{0:d}", new { id = "inputReportedDate", @class = "form-control" })
                                                        @Html.ValidationMessageFor(m => m.ReportedDate)
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-lg-6 OnlyTaxi m_b_15">
                                                <div class="form-group">
                                                    <label class="col-sm-4  control-label">
                                                        @ClaimAccident.OwnerName</label>
                                                    <div class="col-sm-8">
                                                        @Html.DropDownListFor(m => m.OwnerName, new SelectList(Model.OwnerNameList, "Lookup_value", "Lookup_desc", "[Select...]"), new { @class = "col-lg-12 form-control" })
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="form-groupx m_rl-15">
                                            <div class="col-sm-6 m_b_15">
                                                <div class="form-group">
                                                    <label class="col-sm-4 control-label">
                                                        @ClaimAccident.InputDate&nbsp;@*<span class="text-danger">*</span>*@
                                                    </label>
                                                    <div class="col-sm-8">
                                                        @Html.TextBoxFor(m => m.InputDate, "{0:d}", new { id = "inputInputDate", @class = "form-control" })
                                                        @Html.ValidationMessageFor(m => m.InputDate)
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-sm-6">
                                                <div class="form-group">
                                                    <label class="col-sm-4 control-label">
                                                        @ClaimAccident.OwnInsurer</label>
                                                    <div class="col-sm-8">
                                                        @Html.DropDownListFor(m => m.Facts, new SelectList(Model.InsurerList, "cedantId", "cedantName", "[Select...]"), new { @class = "col-lg-12 form-control m_b_15" })
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="form-groupx m_rl-15">
                                            <div class="col-sm-6 m_b_26">
                                                <div class="form-group">
                                                    <label class="col-sm-4 control-label">
                                                        @ClaimAccident.AnyRecoveryClaim</label>
                                                    <div class="col-sm-8">
                                                        @Html.RadioButtonForSelectList(m => m.IsRecoveryOD, Model.generallookupvalue)
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-sm-6 m_b_15">
                                                <div class="form-group">
                                                    <label class="col-sm-4 control-label">
                                                        @ClaimAccident.Organization &nbsp;<span class="text-danger">*</span></label>
                                                    <div class="col-sm-8">
                                                        @Html.DropDownListFor(m => m.Organization, new SelectList(Model.OrgCatList, "OrgType", "Description", "[Select...]"), new { @class = "col-lg-12 form-control" })
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </fieldset>
                                <fieldset>
                                    <legend id="Hdlt"></legend>
                                    <div class="panel-body">
                                        @Html.Partial("../Shared/_ClaimOwnerDetails", ((Model)))
                                    </div>
                                </fieldset>
                                <fieldset>
                                    <legend>@ClaimAccident.Driver</legend>
                                    <div class="panel-body">
                                        @Html.Partial("../Shared/_ClaimDriverDetails", ((Model)))
                                    </div>
                                </fieldset>
                                <div class="row" style="margin-top: 10px">
                                    <div class="clearfix igr col-md-11 text-center">
                                        <button type="submit" class="btn btn-info" id="btnSave" name="Save">
                                            Save</button>
                                        <a name="Cancel" id="btnReset" class="btn btn-info" href="@Url.ActionEncoded("ClmAccidentEditorNew", "ClaimRegistrationProcessing", new { policyId = 0, claimMode = "New" })">@Common.Reset</a>
                                        @if ((@iscompleted == 1 || @iscompleted == null) && (@Model.OrgCategory != "TX" && @Model.OrgCategory != "PC"))
                                        { 
                                            <a name="Complete" id="btnComplete" class="btn  btn-info" href="#">@Common.Complete</a> 
                                        }
                                        <a name="btnCancel" id="btnCancel" class="btn btn-info" href="#">Cancel</a>
                                    </div>
                                    <div class="clearfix igr col-md-1 text-center">
                                        <a class="btn btn-info" id="Next">Next</a>
                                    </div>
                                </div>
                                <fieldset>
                                    <div class="panel-body">
                                        <div class="row">
                                            <div>
                                                @Html.Partial("~/Views/Shared/_TimeStamp.cshtml", Model)
                                            </div>
                                        </div>
                                    </div>
                                </fieldset>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="row-fluid bg2 blue-bt-bdr">
                            <br />
                            <br />
                            <br />
                            <div class="container text-center">
                                <div class="errorInfo">
                                    <p>
                                        <b>@Common.DontHavePermissionForThisScreen</b></p>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>
<style>
    .m_b_15
    {
        margin-bottom: 15px;
    }
    .m_b_26
    {
        margin-bottom: 26px;
    }
    .m_rl-15
    {
        margin-left: -15px;
        margin-right: -15px;
    }
</style>
<script type="text/javascript">
    var do_on_load = function () {
        setTabActive('AccidentTab');
        var Org = "";
        Org = '@Session["OrganisationType"]'.toString().toLowerCase();
        if (Org == "tx") {
            $(".OnlyTaxi").css("display", "block");
            $("#Hdlt").text("@ClaimAccident.Hirer");
        } else if (Org == "pc") {
            $("#Hdlt").text("@ClaimAccident.Owner");
        }

        $.validator.addMethod("greaterThan", function (a, b, c) {
            return "DD/MM/YYYY" == a || !pattern1.test(a) || /Invalid|NaN/.test(new Date(a.split("/")["1"] + "/" + a.split("/")["0"] + "/" + a.split("/")["2"])) ? isNaN(a.split("/")["1"] + "/" + a.split("/")["0"] + "/" + a.split("/")["2"]) || parseFloat(a.split("/")["1"] + "/" + a.split("/")["0"] + "/" + a.split("/")["2"]) < parseFloat() : new Date(a.split("/")["1"] + "/" + a.split("/")["0"] + "/" + a.split("/")["2"]) < new Date
        }, "");
        $.validator.unobtrusive.adapters.add("futuredate", {}, function (a) {
      
            a.rules.greaterThan = !0;
            a.messages.greaterThan = a.message
        });
        $.validator.unobtrusive.adapters.add("isfuturetime", ["other"], function (a) { a.rules.greaterThanCurrentTime = !0; a.messages.greaterThanCurrentTime = a.message });
        $.validator.addMethod("greaterThanCurrentTime", function (a, b, c) {
       
            b = new Date;
            b = ChKValidAccidentDate() ? GetCurrentDate() + " " + b.toTimeString().substr(0, 5) + ":00" : "01/01/2001 " + b.toTimeString().substr(0, 5) + ":00";
            b = Date.parse(b);
            c = ChKValidAccidentDate() ? GetDate($("#inputAccidentDate").val().split('/')[0], $("#inputAccidentDate").val().split('/')[1], $("#inputAccidentDate").val().split('/')[2]) + " " + a + ":00" : "01/01/2001 " + a + ":00";
            c = Date.parse(c);

            return "" != a && a.match(/^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/) && "24:00" != a ? b == c ? !0 : c < b : !0
        }, "");

        $("#inputAccidentTime").timepicker({
            onSelect: function () {
                $(this).valid();
            }
        });
        $('.datepicker').datepicker({
            dateFormat: "dd/mm/yy",
            showStatus: true,
            showWeeks: true,
            currentText: 'Now',
            autoSize: true,
            gotoCurrent: true,
            showAnim: 'blind',
            highlightWeek: true,
            changeMonth: !0,
            changeYear: !0,
            yearRange: "1951:2050",
            onSelect: function (b) {
                $(this).valid();
            }
        });

        $("#inputAccidentDate,#inputReportedDate,#inputInputDate").datepicker({
            dateFormat: "dd/mm/yy",
            showStatus: true,
            showWeeks: true,
            currentText: 'Now',
            autoSize: true,
            gotoCurrent: true,
            showAnim: 'blind',
            highlightWeek: true,
            changeMonth: !0,
            changeYear: !0,
            yearRange: "1951:2050",
            maxDate: 0,
            onSelect: function (b) {
                    $(this).valid();
                    ("inputAccidentDate" == (this.id || this.context.id)) && $("#inputAccidentTime").valid();
                }
            }).change(function () {
           
                "" == $(this).val() && ("inputAccidentDate" == (this.id || this.context.id)) && $("#inputAccidentTime").val("");
                if ($(this).val() != "" && isFutureDate($(this).val())) return ($("#" + this.id).val("")), (("inputAccidentDate" == (this.id || this.context.id)) && $("#inputAccidentTime").val("")), alert(DateVal[this.id]() + " @Html.Raw(ClaimAccident.MsgDate)", this.id), !1;
            });
              $.culture = Globalize.culture("en-GB");
            $.validator.methods.date = function (a, b) {
                return this.optional(b) || Globalize.parseDate(a, "@System.Configuration.ConfigurationManager.AppSettings["DateFormat"]", "en-GB") || Globalize.parseDate(a, "yyyy-mm-dd")
            };
            $.validator.unobtrusive.adapters.add("notequalto", ["other"], function (a) {
                a.rules.notEqualTo = "#" + a.params.other;
                a.message && (a.messages.notEqualTo = a.message)
            });
            $.validator.addMethod("notEqualTo", function (a, b, c) {
                return this.optional(b) || a != $(c).val()
            }, "");

        $("input[type=text]").each(function () {
            $(this).hasClass("datepicker") && 10 < $(this).val().length && $(this).val($(this).val().substring(0, 10));
            if (void 0 !== $(this).attr("data-val-date") && "The field " == $(this).attr("data-val-date").substring(0, 10)) {
                var e = $(this).attr("data-val-date").substring(10, $(this).attr("data-val-date").length).replace("must be a date.", "must be in 'dd/mm/yyyy' format.");
                $(this).removeAttr("data-val-date");
                $(this).attr("data-val-date", e)
            }
        });

         @*$("#inputAccidentTime").keypress(function (e) {

                var evt = e || window.event, a = evt.which ? evt.which : evt.keyCode, keytoallow = [], keytoallow = ["45", "8", "46", "118", "37", "38", "39", "40", "58"], maxlen = parseInt($(this).attr("maxlength"));
                if ((1 == evt.ctrlKey && ("118" == a || "86" == a)) || (-1 < $.inArray(a.toString(), keytoallow))) return true;
                var c = maxlen, b = $(this).val().length;
                return isTextSelected(document.getElementById($(this).context.id)) || c >= parseInt(b) ? 31 < a && (48 > a || 57 < a) ? (b = "#" + this.id, $(b).focus(), !1) : !0 : !1;

            }).blur(function () {
                var a = $("#inputAccidentTime").val();
                if ("" != a && !a.match(/^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/) && "24:00" != a) return alert("@Html.Raw(ClaimAccident.MsgHourFormat)", "inputAccidentTime"), $("#NoteTime").focus(), $("#inputAccidentTime").val(""), !1
            });*@

             $('#sb-site').removeAttr("style");
            if ("" != $("#inputAccidentDate").val()) {
                var arrDate = $("#inputAccidentDate").val().split(" ");
                $("#inputAccidentDate").val(arrDate[0])
            }
            "" != $("#inputReportedDate").val() && (arrDate = $("#inputReportedDate").val().split(" "), $("#inputReportedDate").val(arrDate[0]));

                 $(function () {   
                    //$('#inputAccidentDate').datetimepicker(
                    //    {
                    //        daysOfWeekDisabled: [0],
                    //        format: 'MM/DD/YYYY',                    
                    //        ignoreReadonly: true,
                    //        maxDate: 'now'
                    //    }
                    //  );
                });


        //added by shikha
        "New" == "@caller" && ($.each($("form").serializeArray(), function (b, a) { $('[name="' + a.name + '"]:not(#Organization)').attr("readonly", "readonly").attr("disabled", true) }), $(":radio:not(:checked)").attr("disabled", !0), $("#btnCancel").hide());
        "New" != "@caller" && $("#Organization").css({ "pointer-events": "none", cursor: "default" }).css("background-color", "#eee").children("option:not(:selected)").remove();



        $("#Organization").change(function () {
            var orgID = $("#Organization").val();
            $.ajax({
                type: "POST",
                url: '@Url.ActionEncoded("GetOrganizationType", "ClaimProcessing")',
                data: {
                    OrganizationID: orgID
                },
                success: function (orgID) {
                    $("#OrganizationType").val(orgID)
                    var myform = $('#claimaccidententryform');

                         // Find disabled inputs, and remove the "disabled" attribute
                        var disabled = myform.find(':input:disabled').removeAttr('disabled');

                         // serialize the form
                        var serialized = myform.serialize();
                    $.each($('form').serializeArray(), function (index, value) {
                        $('[name="' + value.name + '"]:not(#inputClaimNo,#inputClaimRefNo)').removeAttr('readonly', 'readonly');
                    });

                    $(':radio:not(:checked)').attr('disabled', false);
                }
            });

        });

        $("#Organization").change(function () {
            var orgID = $("#Organization").val();
            $.ajax({
                type: "POST",
                url: '@Url.ActionEncoded("GetDriverType", "ClaimRegistrationProcessing")',
                data: {
                    OrganizationID: orgID
                },
                success: function (orgID) {
                     var listItems = "";
                    //orgID[i].Lookup_value 
                    for (var i = 0; i < orgID.length; i++) {
                        listItems += "<option value='" + orgID[i].Lookup_value + "'>" + orgID[i].Lookup_desc + "</option>";
                    }
                    $("#OwnerAddressDlt_DriverType").html(listItems);
                    $("#DriverAddressDlt_DriverType").html(listItems);
                }
            });

        });


        SetDivPost();

// Commented regarding TFS #22091, #21991
//        $("#inputVehicleNumber").autocomplete({
//            source: '@Url.ActionEncoded("Autocomplete")'
//        }).blur(function () {
//            "" != $("#inputVehicleNumber").val() && $.ajax({
//                type: "POST",
//                url: '@Url.ActionEncoded("CheckVechile", "ClaimRegistrationProcessing")',
//                data: {
//                    Vechileval: $("#inputVehicleNumber").val()
//                },
//                success: function (a) {
//                    "F" == a && (alert("@Html.Raw(ClaimAccident.MsgVehicleNumber)"), $("#inputVehicleNumber,#inputVehicleNo2,#inputMake,#inputModel").val(""), $("#inputVehicleNumber").focus())
//                }
//            })
//        })
//        $('#inputVehicleNumber').blur(function () {
//            var txtvehicleno = ($(this).val());
//            $.ajax({
//                type: "GET",
//                url: '@(Url.ActionEncoded("FillMakeAndModel"))',
//                data: {
//                    VehNo: txtvehicleno,
//                    Uid: guid()
//                },
//                dataType: "json",
//                success: function (result) {
//                    if (result) {
//                        $('#inputMake').val(result.Data.VehicleMakeCode);
//                        $('#inputModel').val(result.Data.VehicleModelCode);
//                    }
//                }
//            });
//        });

        $("#btnComplete").click(function () {
            if ("" == '@Model.AccidentClaimId' || 0 == '@Model.HClaimId')
                return alert("@Html.Raw(ClaimAccident.MsgBeforeComplete)"), !1;
            CreateDialog("@Html.Raw(ClaimAccident.MsgConfirmComplete)", "@Html.Raw(Common.Yes)", "@Html.Raw(Common.Cancel)", OnConfirmTrue);
            return false;
            e.preventDefault();
        });
    };
    $(document).ready(do_on_load);
    $(window).bind('page:change', do_on_load);

    $("#btnSave").click(function (a) {
        return "0" == $("#Organization").val() ? (alert("@Html.Raw(ClaimAccident.RFVOrganization)", "Organization"), a.preventDefault(), !1) : "" != $("#inputReportedDate").val() && "" != $("#inputAccidentDate").val() && $("#inputReportedDate").datepicker("getDate") < $("#inputAccidentDate").datepicker("getDate") ? (alert("@Html.Raw(ClaimAccident.MsgReportedDate)", "inputReportedDate"), a.preventDefault(), !1) : !0
    });

     function ChKValidAccidentDate() {
        return /^(?:(?:31(\/|-|\.)(?:0?[13578]|1[02]))\1|(?:(?:29|30)(\/|-|\.)(?:0?[1,3-9]|1[0-2])\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29(\/|-|\.)0?2\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0?[1-9])|(?:1[0-2]))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$/.test($("#inputAccidentDate").val());
    };

    function OnConfirmTrue() {
       
        var left = ($(window).width() / 2) - (500 / 2), top = ($(window).height() / 2) - (200 / 2);
        var accidentclaimId = '@Model.AccidentClaimId';
        var Organization_Type = '@Model.Organization';
        var Claim_Prefix = 'UCLM';
        $.ajax({
            url: '@Url.ActionEncoded("CompleteClaim", "ClaimRegistrationProcessing")',
            type: 'POST',
            dataType: 'json',
            data: {
                accidentClaimId: accidentclaimId,
                OrganizationType: Organization_Type,
                ClaimPrefix: Claim_Prefix
            },
            success: function (resultdata) {
                
                if (resultdata.Data.IsValid) {
                  
                    $('#SuccessMessage').text(resultdata.Data.SuccessMsg);
                    $('#btnComplete').hide();
                    $('#btnSave').hide();
                    $('#btnReset').hide();
                    $('#DivMoDtBy').text('');
                    $('#DivMoDtBy').text(resultdata.Data.ModifiedBy);
                    var dt = new Date();
                    var time = dt.getHours() + ":" + dt.getMinutes() + ":" + dt.getSeconds() + ":" + dt.getMilliseconds();
                    var Cdt = (dt.getDate()).toString();
                    var Cmth = (dt.getMonth() + 1).toString();
                    if (Cdt.length == 1) {
                        Cdt = "0" + dt.getDate();
                    }
                    if (Cmth.length == 1) {
                        Cmth = "0" + (dt.getMonth() + 1);
                    }
                    var CurrDt = Cdt + "/" + Cmth + "/" + dt.getFullYear();
                    $('#DivUpDt').text('');
                    $('#DivUpDt').text(CurrDt);

                    $('#DivUpTime').text('');
                    $('#DivUpTime').text(time);
                    $('*:not(.DonotDiableControl):not([id=Next]):not([id=Previous])', 'form').attr('disabled', 'disabled').attr('readonly', 'readonly');
                    $("html, body").animate({ scrollTop: 0 });
                }
                else {
                    var w = window.open("", "popup", "width=700, height=400, top=" + top + ", left=" + left);
                    $(w.document.body).html(resultdata.Data.ResultStr);
                }
            },
            error: function (textStatus, thrownError) {
                alert(thrownError);
            }
        });
    };

      function GetCurrentDate() {
        var today = new Date();
        var dd = today.getDate();
        var mm = today.getMonth() + 1; //January is 0!

        var yyyy = today.getFullYear();
        if (dd < 10) {
            dd = '0' + dd
        }
        if (mm < 10) {
            mm = '0' + mm
        }
        return GetDate(dd, mm, yyyy);
    }

      function GetDate(dd, mm, yyyy) {
        return Globalize.parseDate(dd + '/' + mm + '/' + yyyy, "@System.Configuration.ConfigurationManager.AppSettings["DateFormat"]", "en-GB") ? mm + '/' + dd + '/' + yyyy : dd + '/' + mm + '/' + yyyy;
    }

     function isFutureDate(idate) {
        var today = new Date().getTime(),
        idate = idate.split("/");
        idate = new Date(idate[2], idate[1] - 1, idate[0]).getTime();
        return (today - idate) < 0 ? true : false;
    };
    
</script>
