@model MCAS.Web.Objects.ClaimObjectHelper.ClaimNotesModel
@using MCAS.Web.Objects.Resources.ClaimProcessing;
@using MCAS.Web.Objects.Resources.Common;
@using MCAS.Globalisation;
@using MCAS.Web.Objects.CommonHelper
@{
    var Display = TempData["Display"] == "Display" ? "inline;" : "none;";
    var mMCASQueryString = @Html.MCASQueryString(Request.QueryString);
    var caller = mMCASQueryString["claimMode"] != null ? Convert.ToString(mMCASQueryString["claimMode"]) : "";
    var pagemode = mMCASQueryString["mode"] != null ? Convert.ToString(mMCASQueryString["mode"]) : "";
    var accidentClaimIdNew = mMCASQueryString["AccidentClaimId"];
    var SubMenu = !string.IsNullOrEmpty(Convert.ToString((HttpContext.Current.Session["ScreenNameDash"]))) ? MenuListItem.ClaimTabs.GetClaimLabel(Convert.ToString((HttpContext.Current.Session["ScreenNameDash"]))) : ClaimAccident.ResourceManager.GetString(MenuListItem.ClaimTabs.SubMenuString(@caller, @accidentClaimIdNew, @pagemode, ""));
    var Viewmode = mMCASQueryString["Viewmode"] == null ? "" : Convert.ToString(mMCASQueryString["Viewmode"]);
    var claimId = Model.ClaimId;
    var s1 = Url.Content("~/Uploads/Attachments/");
    ViewBag.Title = "ClaimNotesEditor";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var policyid = Request.QueryString["PolicyId"] == null ? "0" : Request.QueryString["PolicyId"];
    var claimMode = Request.QueryString["claimMode"];
    var imid = Model.ImageId;
    var dis = imid == null ? "none;" : "inline";
    var src = imid == null ? "" : HttpContext.Current.Request.Url.Scheme + "://" + HttpContext.Current.Request.Url.Authority + s1 + imid;
    SecurityPermissions myPemissions = (SecurityPermissions)ViewData["UserPermissions"];
    var DonotDiableControl = pagemode == "Enq" ? "form-horizontal" : pagemode == "Payment" ? "form-horizontal" : pagemode == "Recovery" ? "form-horizontal" : Model.ReadOnly == true ? "form-horizontal" : "form-horizontal DonotDiableControl";
    string isEncryptedParams = System.Configuration.ConfigurationManager.AppSettings["EncryptQueryParams"].ToUpper();
    string taxiOrcar = Convert.ToString(Session["OrganisationType"]).ToLower() == "tx" || Convert.ToString(Session["OrganisationType"]).ToLower() == "pc" ? "true" : "false";
    var calimantErrMsg2 = ClaimNotesEditor.RFVTPVehicleNo;
}
<link href="@Url.Content("~/Content/jquery-ui.css")" rel="Stylesheet" media="screen" />
<link rel="stylesheet" media="all" type="text/css" href="@Url.Content("~/Content/jquery-ui.css")" />
<link rel="stylesheet" media="all" type="text/css" href="@Url.Content("~/Content/jquery-ui-timepicker-addon.css")" />
<link href="@Url.Content("~/Content/themes/base/jquery.ui.all.css")" rel="stylesheet" type="text/css" />
<style type="text/css">
    .form-horizontal .control-label
    {
        text-align: left;
    }
    .ui-timepicker-div .ui-widget-header
    {
        margin-bottom: 8px;
    }
    .ui-timepicker-div dl
    {
        text-align: left;
    }
    .ui-timepicker-div dl dt
    {
        float: left;
        clear: left;
        padding: 0 0 0 5px;
    }
    .ui-timepicker-div dl dd
    {
        margin: 0 10px 10px 45%;
    }
    .ui-timepicker-div td
    {
        font-size: 90%;
    }
    .ui-tpicker-grid-label
    {
        background: none;
        border: none;
        margin: 0;
        padding: 0;
    }
    
    .ui-timepicker-rtl
    {
        direction: rtl;
    }
    .ui-timepicker-rtl dl
    {
        text-align: right;
        padding: 0 5px 0 0;
    }
    .ui-timepicker-rtl dl dt
    {
        float: right;
        clear: right;
    }
    .ui-timepicker-rtl dl dd
    {
        margin: 0 45% 10px 10px;
    }
    #ui-datepicker-div
    {
        z-index: 999999 !important;
    }
    .ui-button-icon-primary.ui-icon.ui-icon-closethick
    {
        margin: -7px 0 0 -7px;
    }
    div.ui-dialog.ui-widget.ui-widget-content.ui-corner-all.ui-front.alert.ui-draggable
    {
        top: 130px !important;
    }
    fieldset
    {
        padding: 5px;
        margin: 1px;
        border: 1px solid;
        border-color: #DAD7D7;
        border-radius: 3px;
    }
    
    legend
    {
        display: block;
        width: auto;
        padding: 1px;
        margin-bottom: 2px;
        font-size: 14px;
        line-height: inherit;
        color: #1e91cf !important;
        border: 0;
    }
    
    #divimage
    {
        max-width: 100% !important;
        max-height: 100% !important;
        height: 400px !important;
    }
    
</style>
<script src="@Url.Content("~/Scripts/jquery-2.1.0.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.datetimepicker.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/globalize/globalize.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/globalize/cultures/globalize.culture.en-GB.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery-ui-v1.10.3.js")" type="text/javascript"></script>
<div class="dashboard-wrapper">
    <!-- Bootstrap Container Start -->
    <div class="container">
        <!-- Page title start -->
        <div class="page-title" id="reg">
            @{
                //if (Session["Module"] == "CrTx") { }
                if ((Convert.ToString(Session["OrganisationType"]).ToLower() == "tx") || (Convert.ToString(Session["OrganisationType"]).ToLower() == "pc")) { }
                else
                {
                <div class="col-lg-12" id="reg2" style="background-color: white; position: fixed;
                    z-index: 1;">
                    <h2>@ClaimAccident.ResourceManager.GetString(MenuListItem.ClaimTabs.PreBreadCrumbString(@pagemode))</h2>
                    <ul class="breadcrumb">
                        <li>@SubMenu</li>
                        <li>@ClaimNotesEditor.Notes</li>
                    </ul>
                </div>
                }
            }
            <div style="position: relative!important">
                @{ 
                    //if (Session["Module"] == "CrTx") {
                    if ((Convert.ToString(Session["OrganisationType"]).ToLower() == "tx") || (Convert.ToString(Session["OrganisationType"]).ToLower() == "pc"))
                    { 
                    @Html.Action("_ClaimDeatailsPCNTX", "ClaimRegistrationProcessing")
                    }
                    else
                    {
                    @Html.Action("_ClaimDetails", "ClaimProcessing", new { PolicyId = @policyid })
                    }
                }
                @*  @Html.Action("_ClaimDetails", "ClaimProcessing", new { PolicyId = @policyid })*@
            </div>
        </div>
        <hr />
        <!-- Row start -->
        <div class="row" id="toprow">
            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                <div class="panel panel-info">
                    <div class="panel-heading clearfix">
                        <i class="icon-check-sign"></i>
                        <h3 class="panel-title">
                            @ClaimNotesEditor.NotesEntry
                        </h3>
                    </div>
                    @Html.Action("ClaimNotesList", "ClaimProcessing", new { PolicyId = @policyid, ClaimId = @claimId, AccidentClaimId = @accidentClaimIdNew, claimMode = @caller })
                    <div class="row">
                        <div style="margin-left:20px;" class="col-lg-12 text-left">
                            @if (@myPemissions.Write)
                            {@Html.EncodedActionLink(ClaimNotesEditor.AddNewNotes, "ClaimNotesEditor", "ClaimProcessing", new { PolicyId = @policyid == null ? "0" : @policyid, ClaimId = @claimId, AccidentClaimId = @accidentClaimIdNew, claimMode = @caller, @Viewmode = "AddNewNote", mode = @pagemode }, new { @id = "NewNote", @class = "btn btn-info" })}
                        </div>
                    </div>
                    <hr style='font-weight: bold' />
                    <div style="color: Red; font-weight: bold;" class="has-error" id="error">
                        <p align="center">
                            @if (@ViewData["SuccessMsg"] != null)
                            {
                                @ViewData["SuccessMsg"]
                            }
                        </p>
                    </div>
                    @{
                        object routes = new { PolicyId = @policyid, ClaimId = @claimId, AccidentClaimId = @accidentClaimIdNew, claimMode = @caller };
                        if (isEncryptedParams.ToUpper() == "YES")
                        {
                            string res = RouteEncryptDecrypt.getRouteString(routes);
                            res = RouteEncryptDecrypt.Encrypt(res);
                            routes = new { Q = res };
                        }
                    }
                    <div class="panel-body" id="NewClaimNotesEditor" style="display: @Display">
                        @using (Html.BeginForm("ClaimNotesEditor", "ClaimProcessing", routes, FormMethod.Post, new { role = "form", @class = @DonotDiableControl, id = "ClaimNotesEditor" }))
                        {
                            @Html.ValidationSummary(true)
                            @Html.HiddenFor(m => m.hiddenprop)
                            <div style="width: 99%; padding-left: 10px">
                                <fieldset>
                                    <legend>@ClaimNotesEditor.AddNewNotes</legend>
                                    <div class="panel-body">
                                        <div class="row">
                                            <div class="col-lg-6">
                                                @Html.HiddenFor(m => m.ClaimId)
                                                @Html.HiddenFor(m => m.NoteId)
                                                @Html.HiddenFor(m => m.ReadOnly)
                                                @Html.HiddenFor(m => m.imageidval)
                                                <a id="reload" href='@Url.ActionEncoded("ClaimNotesEditor", "ClaimProcessing", new { ClaimId = @Model.ClaimId, NoteId = Model.NoteId, AccidentClaimId = @accidentClaimIdNew })' style="display:none">
                                                    Reload</a>
                                                <input type = "hidden" id="ViewMode" value = '@claimMode' />
                                                <div style="display: none;" class="form-group">
                                                    <label class="col-sm-4 control-label" for="inputNoteCode">
                                                        Note Code<span class="text-danger">*</span></label>
                                                    <div class="col-sm-8">
                                                        @Html.TextBoxFor(m => m.NoteCode, new { id = "inputNoteCode", @class = "form-control", @numlen = "10" })
                                                        @Html.ValidationMessageFor(m => m.NoteCode)
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-lg-6">
                                                <div class="form-group">
                                                    <label class="col-sm-3 control-label" for="inputNoteDate">
                                                        @ClaimNotesEditor.NoteDate<span class="text-danger">*</span>
                                                    </label>
                                                    <div class="col-sm-9">
                                                        @Html.TextBoxFor(m => m.NoteDate, "{0:d}", new { id = "inputNoteDate", @class = "form-control", @readonly = "readonly" })
                                                        @Html.ValidationMessageFor(m => m.NoteDate)
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-lg-6">
                                                <div class="form-group">
                                                    <label class="col-sm-3 control-label" for="NoteTime">
                                                        @ClaimNotesEditor.NoteTime<span class="text-danger">*</span></label>
                                                    <div class="col-sm-9">
                                                        @Html.TextBoxFor(m => m.NoteTime, new { id = "NoteTime", @class = "form-control", @readonly = "readonly" })
                                                        @Html.ValidationMessageFor(m => m.NoteTime)
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div style="display: none;" class="row">
                                            <div class="col-lg-6">
                                                <div class="form-group">
                                                    <label class="col-sm-4 control-label" for="NoteTime">
                                                        @ClaimNotesEditor.NoteTime<span class="text-danger">*</span></label>
                                                    <div class="col-sm-8">
                                                        @Html.TextBoxFor(m => m.NoteTime, new { id = "NoteTime", @class = "form-control" })
                                                        @Html.ValidationMessageFor(m => m.NoteTime)
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-lg-6">
                                                <div class="form-group">
                                                    <label class="col-sm-3 control-label" for="inputDescription">
                                                        @ClaimNotesEditor.NotesDescription
                                                    </label>
                                                    <div class="col-sm-9">
                                                        @{
                            if ((Convert.ToString(Session["OrganisationType"]).ToLower() == "tx") || (Convert.ToString(Session["OrganisationType"]).ToLower() == "pc"))
                            {
                                                            @Html.TextAreaFor(m => m.NotesDescription, new { id = "inputDescription", @class = "form-control", @maxlength = "2500" })
                            }
                            else
                            {
                                                            @Html.TextAreaFor(m => m.NotesDescription, new { id = "inputDescription", @class = "form-control", @len = "100" })
                            }
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-lg-6">
                                                <div class="form-group">
                                                    <label class="col-sm-3 control-label" for="inputClaimantName">
                                                        @{
                            if ((Convert.ToString(Session["OrganisationType"]).ToLower() == "tx") || (Convert.ToString(Session["OrganisationType"]).ToLower() == "pc"))
                            {
                                                            @ClaimNotesEditor.TPVehicleNo<span class="text-danger">*</span>
                            }
                            else
                            { 
                                                            @ClaimNotesEditor.ClaimantNames<span class="text-danger">*</span>
                            }
                                                        }
                                                    </label>
                                                    <div class="col-sm-9">
                                                        @Html.DropDownListFor(m => m.ClaimantNames, new SelectList(Model.ClaimantNameList, "ID", "Text"), new { id = "ClaimantName", @class = "form-control" })
                                                        <span id="claimantNameSpan">
                                                        @Html.ValidationMessageFor(m => m.ClaimantNames)
                                                        </span>
                                                        <span class="field-validation-error"><span for="ClaimantName2" class=""></span></span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </fieldset>
                                <br />
                                <div id="DivFooter" class="row">
                                    <div class="col-lg-1">
                                        <div class="form-group">
                                            <a class="btn btn-info" id="Previous">@Common.Previous</a>
                                        </div>
                                    </div>
                                    <div class="col-lg-10 text-center">
                                        <div class="form-group">
                                            @if (@myPemissions.Read)
                                            {
                                                <button class="btn btn-info" id="btnSave">
                                                    @Common.Save</button>
                                                if (@Model.NoteId == 0 || @Model.NoteId == null)
                                                {
                                                <button type="button" class="btn btn-info" onclick="onclickcancel();">
                                                    @Common.Reset</button>
                                                }
                                                else
                                                {
                                                 <a name="btnReset1" id="btnReset1" class="btn btn-info" href="#">@Common.Reset</a> 
                                                }
                                            }
                                        </div>
                                    </div>
                                    <div class="col-lg-1 text-right">
                                        <div class="form-group">
                                            <a class="btn btn-info" id="Next">@Common.Next</a>
                                        </div>
                                    </div>
                                </div>
                                <fieldset>
                                    <legend></legend>
                                    <div class="form-group">
                                        <div class="col-lg-12">
                                            @Html.Partial("~/Views/Shared/_TimeStamp.cshtml", Model)
                                        </div>
                                    </div>
                                </fieldset>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
        <!-- Row End -->
    </div>
</div>
<script type="text/javascript">
    setTabActive("NotesTab");
    var do_on_load = function () {
        $('.ui-wrapper').css("padding", 0);
        $('#inputDescription').resizable({ handles: 's' });

        $(document).on("focus", ":input", function () {
            $(this).attr("autocomplete", "off")
        });
        $.culture = Globalize.culture("en-GB");
        $.validator.methods.date = function (a, b) {
            return this.optional(b) || Globalize.parseDate(a, "dd/MM/yyyy", "en-GB") || Globalize.parseDate(a, "yyyy-mm-dd")
        };
        $("input[type=text]").each(function () {
            if (void 0 !== $(this).attr("data-val-date") && "The field " == $(this).attr("data-val-date").substring(0, 10)) {
                var a = $(this).attr("data-val-date").substring(10, $(this).attr("data-val-date").length).replace("must be a date.", "must be in 'dd/mm/yyyy' format.");
                $(this).removeAttr("data-val-date");
                $(this).attr("data-val-date", a)
            }
        });
        if ("" != $("#inputNoteDate").val()) {
            var c = $("#inputNoteDate").val().split(" ");
            $("#inputNoteDate").val(c[0])
        }

        $('#inputDescription').each(function () {
            $(this).removeAttr('width')
            $(this).removeAttr('height');
        });

        $("#ClaimantName").change(function () {
            var claimant = $("#ClaimantName").val();
            $.ajax({
                type: "POST",
                url: '@Url.ActionEncoded("chkClaimantStatus", "ClaimProcessing")',
                data: {
                    AccId: '@accidentClaimIdNew',
                    ClaimantId: claimant
                },
                success: function (a) {
                    if (a == 2) {
                        alert('Claimant has been finalized, You cannot add Notes against it.');
                        $("#ClaimantName").val($("#ClaimantName option:first").val());
                    }
                    if (a == 3) {
                        alert('Claimant has been cancelled, You cannot add Notes against it.');
                        $("#ClaimantName").val($("#ClaimantName option:first").val());
                    }
                }
            });
        });

        //        if("@pagemode" == "Enq")
        //         {
        //         $("#ClaimNotesEditor").removeClass("DonotDiableControl");
        //         }
        //        $("#NoteTime").timepicker({
        //            onSelect: function () {
        //                $(this).valid()
        //            }
        //        });
        $("#trigger").click(function () {
            $("#divimage").dialog({
                width: 800,
                height: 400,
                resizable: !1,
                draggable: !0,
                show: {
                    effect: "drop",
                    direction: "up"
                },
                title: "@imid",
                model: !0,
                show: "slide",
                dialogClass: "alert",
                closeOnEscape: !0
            })
        });
        //        $("#inputNoteDate").datepicker({
        //            dateFormat: "dd/mm/yy",
        //            showStatus: !0,
        //            showWeeks: !0,
        //            currentText: "Now",
        //            autoSize: !0,
        //            gotoCurrent: !0,
        //            showAnim: "blind",
        //            highlightWeek: !0,
        //            changeMonth: !0,
        //            changeYear: !0,
        //            onSelect: function (a) {
        //                $(this).valid()
        //            }
        //        });
        $("#NoteTime").keypress(function () {
            var a = $("#" + this.id).val().length;
            if (5 > parseInt(a)) {
                var a = "#" + this.id,
                b = event.type,
                b = b.which ? b.which : event.keyCode;
                return 58 != b && 45 != b && 31 < b && (48 > b || 57 < b) ? ($(a).focus(), !1) : !0
            }
            return !1
        });
        $("#NoteTime").blur(function () {
            var a = $("#NoteTime").val();
            if ("" != a && !a.match(/^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/) && "24:00" != a) return alert("Please Enter Correct 24 Hours Clock Format"), $("#NoteTime").focus(), $("#NoteTime").val(""), !1
        });


         $("#btnReset1").click(function () {
            debugger;
            var ClaimId = '@claimId';
            var accidentclaimId = '@accidentClaimIdNew'; 
            var policyId = '@Model.PolicyId';
            var NoteId = '@Model.NoteId';
            var a = parseInt(ClaimId);
            var b = parseInt(accidentclaimId);
            var c = parseInt(policyId);
            var d= parseInt(NoteId);
            window.location.href = '@Url.Action("ClaimNotesEditor", "ClaimProcessing")?ClaimId=' + a + '&AccidentClaimId=' + b + '&claimMode=Write' + '&policyId=' + c + '&NoteId=' + d;
        });

        SetDivPost();
    };


    $(document).ready(do_on_load);
    $(window).bind("page:change", do_on_load);

    function checkfile(c) {
        var a = ".png .tif .tiff .gif .jpeg .jpg .jif .jfif".split(" ");
        c = c.value;
        c = c.substring(c.lastIndexOf("."));
        return 0 > a.indexOf(c.toLowerCase()) ? (alert("Invalid file selected, valid files are of " + a.toString() + " types."), !1) : !0
    }

    function onclickcancel() {
        $("#NoteId").val("");
        $('input[type="text"]').val("");
        $("select").prop("selectedIndex", 0);
        $("textarea").val("");
        $("#trigger").hide();
        $("#divimage").hide();
        $("#error").hide();
        $("span.field-validation-error").removeClass("field-validation-error").addClass("field-validation-valid");
        clearform()
    }

    function OpenNotesEditor() {
        $("#NewClaimNotesEditor").attr("style", "Display:inline");
        $("#NoteId").val("");
        $('input[type="text"]').val("");
        $("select").prop("selectedIndex", 0);
        $("textarea").val("");
        $("#trigger").hide();
        $("#divimage").hide();
        $("#error").hide();
        $("span.field-validation-error").removeClass("field-validation-error").addClass("field-validation-valid");
        $('#DivCrDtBy,#DivMoDtBy,#DivCrDt,#DivUpDt,#DivCrTime,#DivUpTime').empty();
        clearform()
    }

    function clearform() {
        $("#NewClaimNotesEditor").find(":input").each(function () {
            switch (this.type) {
                case "text":
                case "textarea":
                    $(this).val("");
                    break;
                case "checkbox":
                case "radio":
                    this.checked = !1
            }
        });
        $("#NewClaimNotesEditor").find("select").each(function () {
            $(this).prop("selectedIndex", 0)
        })

    };


    function checkKeyCode(evt)// for F5 disable
    {

        var evt = (evt) ? evt : ((event) ? event : null);
        var node = (evt.target) ? evt.target : ((evt.srcElement) ? evt.srcElement : null);
        if (event.keyCode == 116)//disable F5
        {
            evt.keyCode = 0;
            alert('This operation is not allowed.')
            return false
        }
    }

    document.onkeydown = checkKeyCode;

    $(document).ready(function () {
        $('#btnSave').click(function () {
            if (IsPageChanged()) {
                var claimantName = $("#ClaimantName").val();
                var PNCTX = @taxiOrcar;
                if (PNCTX == true && claimantName == "" && claimantName != undefined) {
                $("span#claimantNameSpan").css("display","none");
                $("span[for='ClaimantName2']").text("@calimantErrMsg2");
                }else{
                $("span#claimantNameSpan").css("display","block");
                $("span[for='ClaimantName2']").text("");
                }
                var currdate = new Date();
                currdate = currdate.getDate() + '/' + (currdate.getMonth() + 1) + '/' + currdate.getFullYear();
                $('#inputNoteDate').val(currdate);
                var d = new Date();
                var min = d.getMinutes();
                if (min < 10) {
                    min = "0" + d.getMinutes();
                }
                var time = d.getHours() + ":" + min;
                $('#NoteTime').val(time);
            }
        });
    });
    var claimantName = "";
    $('#ClaimantName option:selected').each(function () {
        if ($(this).attr("selected", "selected")) {
            claimantName = "1";
            return false;
        }
    });
    if (claimantName != "1") {
        $("#ClaimantName option[value='0']").attr('selected', true);

    }
    if ("@Viewmode" == "AddNewNote") {
        $("#NewClaimNotesEditor").show();
    }
    $("body").delegate("a.btn.btn-xs.btn-info", "click", function () {
        var sPageURL = $(this)[0].getAttribute("href");
        if ('@isEncryptedParams' == "YES") {
            $.ajax({
                type: "POST",
                url: '@Url.Action("GetEncryptedUrl", "ClaimProcessing")',
                data: {
                    Url: sPageURL
                },
                success: function (data) {
                    window.location.href = data;
                }
            });
        }
        else {
            window.location.href = sPageURL;
        }
    });
</script>
