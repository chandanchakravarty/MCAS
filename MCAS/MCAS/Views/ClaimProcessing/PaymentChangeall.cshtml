@model IEnumerable<MCAS.Web.Objects.ClaimObjectHelper.ClaimInfoPayment>
@{
    ViewBag.Title = "ReserveList";
    @Html.Hidden("oldgroup", 1)
    Layout = null;
}
<style type="text/css">
    [type="text"]
    {
        text-transform: capitalize;
    }
</style>
<div class="table-responsive">
    <table class="table table-striped table-hover" border="1" cellpadding="0" cellspacing="0">
        <thead>
            <tr style="text-align: center; text-transform: capitalize;">
                <td>
                    Mandate
                </td>
                <td>
                    Payment Done
                </td>
                <td>
                    Outstanding Payment
                </td>
                <td>
                    Date Time
                </td>
                <td>
                    User Name
                </td>
                <td>
                    Payment Status
                </td>
            </tr>
        </thead>
        <tbody>
            @{
                int trid = 1;
                int rowmatch = 0;
                var display = "";
                var listEnumerator = Model.GetEnumerator();

                for (var i = 1; listEnumerator.MoveNext() == true; i++)
                {
                    var item = listEnumerator.Current;
                    var username = item.Modifiedby1 == null ? item.Createdby1 : item.Modifiedby1;
                    var date = item.Modifiedby1 == null ? item.Createddate1 : item.Modifieddate;
                    rowmatch += 1;
                    var val1 = "";
                    var val2 = "";
                    if (i != 1)
                    {
                        int l1 = i - 1;
                        val1 = (from l in Model.Where(x => x.SerialNo == i) select l.ClaimantName).FirstOrDefault();
                        val2 = (from l in Model.Where(x => x.SerialNo == l1) select l.ClaimantName).FirstOrDefault();
                    }

                    if (i == 1 || (val1 != val2))
                    {
                <tr group='@(trid)' style="display:@display;text-transform: capitalize;">
                    <td colspan="6">
                     Claimant Name: @Html.DisplayFor(modelItem => item.ClaimantName)
                    </td>
                </tr>
                 <tr group='@(trid)' style="display:@display;text-transform: capitalize;">
                    <td colspan="6">
                     Record No:  @Html.DisplayFor(modelItem => item.ClaimRecordNo)
                    </td>
                </tr>
                    }
                <tr group='@(trid)' style="display:@display;">
                    <td format="">
                        @Html.DisplayFor(modelItem => item.Total_I)
                    </td>
                    <td format="">
                        @Html.DisplayFor(modelItem => item.Total_R)
                    </td>
                    <td format="">
                        @Html.DisplayFor(modelItem => item.Total_O)
                    </td>
                    <td>
                        @date
                    </td>
                    <td>
                        @username
                    </td>
                    <td>
                         @Html.DisplayFor(modelItem => item.ApprovePayment)
                    </td>
                </tr>
                    if (rowmatch > 9)
                    {
                        rowmatch = 0;
                        trid += 1;
                        display = "none";
                    }
                }
            }
        </tbody>
    </table>
</div>
@{
    decimal count = (decimal)Model.Count() / 10;
    int totalcount = (int)Math.Ceiling(count);
    <div class="col-lg-12 text-center">
        <ul class="pagination no-margin">
            <li id="liprevious" onclick="Pagination('liprevious');"><a href="#">«</a> </li>
            @for (int j = 0; j < totalcount; j++)
            {
                if (j == 0)
                { 
                <li id="li@(j + 1)" class="active" onclick="Pagination('li@(j + 1)');"><a href="#">@(j + 1)</a></li>
                }
                else
                {
                    if (j > 4)
                    {
                <li id="li@(j + 1)" style="display: none;" onclick="Pagination('li@(j + 1)');" ><a
                    href="#">@(j + 1)</a></li>
                    }
                    else
                    { 
                <li id="li@(j + 1)" onclick="Pagination('li@(j + 1)');" ><a href="#">@(j + 1)</a></li>
                    }
                }
            }
            <li id="linext" onclick="Pagination('linext');"><a href="#">»</a> </li>
        </ul>
    </div>
    <div class="col-lg-12">
        &nbsp;
    </div>
}
<script type="text/javascript">
    var do_on_load = function () {
        $('td').each(function () {
            if (void 0 !== $(this).attr("format")) {
                if ($(this).html() != "") {
                    var b = "-1" == $(this).html().toString().indexOf("-") ? "$" : "$-", a = $(this).html().toString().replace(/,/g, "");
                    "" == a || isNaN(a) || $(this).html(b + CurrencyFormat($(this).html().replace(/,/g, "")));
                }
            };
        });
    };

    $(document).ready(do_on_load);
    $(window).bind('page:change', do_on_load);
    function Pagination(c) {
        var a = Math.ceil(parseFloat('@Model.Count()' / 10));
        "linext" == c && (c = "li" + (parseInt($("#oldgroup").val()) == a ? a : parseInt($("#oldgroup").val()) + 1));
        var z = 1 == parseInt($("#oldgroup").val()) ? 1 : (parseInt($("#oldgroup").val()) - 1);
        "liprevious" == c && (c = "li" + z);
        var d = $("#oldgroup").val(),
        b = c.replace("li", "");
        $("#oldgroup").val(b);
        $("table tr[ngroup=" + d + "]").css("display", "none");
        $("table tr[ngroup=" + b + "]").css("display", "");
        $(".active").removeClass();
        $("#" + c).addClass("active");
        if (0 < a) {
            for (i = 1; i <= a; i++) $("#li" + i).css("display", "none");
            if (1 < b) if (parseFloat(b) + 2 <= parseFloat(a)) for (i = parseFloat(2 == b ? 3 : b) - 2; i <= parseFloat(2 == b ? 3 : b) + 2; i++) i <= a && $("#li" + i).css("display", "");
            else for (i = parseFloat(a) - 4; i <= parseFloat(a); i++) $("#li" + i).css("display", "");
            else for (i = 1; 5 >= i; i++) $("#li" + i).css("display", "")
        }
        setTabActive('ReverseEditor');
    };
    function getQueryVariable(c) {
        for (var a = "@MCAS.Web.Objects.CommonHelper.MenuListItem.ClaimTabs.GetQueryStringVal()".replace(/amp;/ig, "").split("&"), d = 0; d < a.length; d++) {
            var b = a[d].split("=");
            if (b[0] == c) return b[1]
        }
    };
    function CurrencyFormat(number) {
        var decimalplaces = 2;
        var decimalcharacter = ".";
        var thousandseparater = ",";
        number = parseFloat(number);
        var sign = number < 0 ? "-" : "";
        var formatted = new String(number.toFixed(decimalplaces));
        if (decimalcharacter.length && decimalcharacter != ".") { formatted = formatted.replace(/\./, decimalcharacter); }
        var integer = "";
        var fraction = "";
        var strnumber = new String(formatted);
        var dotpos = decimalcharacter.length ? strnumber.indexOf(decimalcharacter) : -1;
        if (dotpos > -1) {
            if (dotpos) { integer = strnumber.substr(0, dotpos); }
            fraction = strnumber.substr(dotpos + 1);
        }
        else { integer = strnumber; }
        if (integer) { integer = String(Math.abs(integer)); }
        while (fraction.length < decimalplaces) { fraction += "0"; }
        temparray = new Array();
        while (integer.length > 3) {
            temparray.unshift(integer.substr(-3));
            integer = integer.substr(0, integer.length - 3);
        }
        temparray.unshift(integer);
        integer = temparray.join(thousandseparater);
        return integer + decimalcharacter + fraction;
    };
</script>
