@using MCAS.Web.Objects.CommonHelper
@model MCAS.Web.Objects.MastersHelper.DiaryModel
@{
    ViewBag.Title = "DiaryEditor";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var model = new MCAS.Web.Objects.MastersHelper.DiaryModel();
    var createby = ((MCAS.Web.Objects.CommonHelper.BaseModel)(model)).CreatedBy;
}

<script src="@Url.Content("~/Scripts/jquery-2.1.0.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/globalize/globalize.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/globalize/cultures/globalize.culture.en-GB.js")" type="text/javascript"></script>
@*<link href="http://ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/cupertino/jquery-ui.css"
    type="text/css" rel="Stylesheet" />
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4/jquery.min.js" type="text/javascript"></script>
<script src="http://ajax.googleapis.com/ajax/libs/jqueryui/1.8/jquery-ui.min.js"
    type="text/javascript"></script>*@
<div class="dashboard-wrapper">
    <!-- Bootstrap Container Start -->
    <div class="container">
        <!-- Page title start -->
        <div class="row page-title">
            <div class="col-lg-12">
                <h2>
                    Diary Information</h2>
            </div>
        </div>
        <!-- Page title end -->
        <!-- Row start for sub navigation -->
        <hr />
        <!-- Row End -->
        <!-- Row start -->
        <div class="row">
            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                <div class="panel panel-info">
                    <div class="panel-heading clearfix">
                        <i class="icon-check-sign"></i>
                        <h3 class="panel-title">
                            Diary Information</h3>
                    </div>
<div style="color:Red; font-weight:bold;"; class="has-error" id="error">
<p align="center">
@if (TempData["notice"] != null)
{
  @TempData["notice"]
}
</p>
</div>
                    <div class="panel-body">
                        @using (Html.BeginForm("DiaryEditor", "Home", FormMethod.Post, new { role = "form", @class = "form-horizontal", id = "Diaryform", name = "Diaryform" }))
                        {
                            @Html.HiddenFor(m => m.ListId)
                            @Html.ValidationSummary(true)
                            @Html.HiddenFor(m => m.InsurerId)
                            @Html.HiddenFor(m => m.PolicyId)
                            @Html.HiddenFor(m => m.ClaimId)
                            @Html.HiddenFor(m => m.UserIds)
                            
                            <p align="center">
                                <div class="row">
                                    <div style="font-weight: bold" class="Row">
                                        Please note that all fields marked with<span style="color: Red"> * </span>are mandatory</div>
                                </div>
                            </p>
                            
                            <div class="row top-buffer">
                                <div class="clearfix igr col-md-12">
                                    <div class="col-md-2">
                                            <label for="ddlDiaryDesc">
                                                Diary Description &nbsp;<span class="text-danger">*</span></label></div>
                                            <div class="col-md-3">
                                                @Html.DropDownListFor(m => m.ListTypeID, new SelectList(Model.TypeList, "Lookup_value".Trim(), "Lookup_desc"), new { id = "ddlDiaryDesc", @class = "col-lg-12 form-control" })
                                                @Html.ValidationMessageFor(m => m.ListTypeID)
                                            </div>

                                    
                                    <div class="col-md-2">
                                            <label for="inputActionBy">
                                                Created By&nbsp;<span class="text-danger">*</span></label></div>
                                            <div class="col-md-3">
                                                @Html.TextBoxFor(m => m.FromUserId, new { id = "inputActionBy", @class = "form-control", @Value = @createby, @Readonly = "readonly"})
                                                @Html.ValidationMessageFor(m => m.FromUserId)
                                            </div>
                                        
                                    </div>
                                </div>
                            <div class="row top-buffer">
                                <div class="clearfix igr col-md-12">
                                    <div class="col-md-2">
                                        <label for="ddlUserID">
                                            Assigned To &nbsp;<span class="text-danger">*</span></label>
                                    </div>
                                    <div class="col-md-3">
                                        @Html.DropDownListFor(m => m.ToUserId, new SelectList(Model.UserList, "SNO".Trim(), "UserDispName"), new { id = "ddlUserID", @class = "col-lg-12 form-control" })<br />
                                        @Html.ValidationMessageFor(m => m.ToUserId)
                                    </div>
                            </div>
                            </div>                        
                            <div class="row top-buffer">
                                <div class="clearfix igr col-md-12">
                                    <div class="col-md-2">
                                        <label for="inputFollowUpDate">
                                            FollowUp Date &nbsp;<span class="text-danger">*</span></label>
                                    </div>
                                    <div class="col-md-3">
                                       @Html.TextBoxFor(m => m.Follow_Up_dateTime, "{0:d}", new { id = "inputFollowUpDate", @class = "form-control " })
                                        @Html.ValidationMessageFor(m => m.Follow_Up_dateTime)
                                    </div>
                                    <div class="col-md-2">
                                        <label for="inputExpectedPaymentDate">
                                            Expected Payment Date
                                        </label>
                                    </div>
                                    <div class="col-md-3">
                                        @Html.TextBoxFor(m => m.ExpectedPaymentDate, "{0:d}", new { id = "inputExpectedPaymentDate", @class = "form-control datepicker" })
                                        @Html.ValidationMessageFor(m => m.ExpectedPaymentDate)
                                    </div>
                                </div>
                            </div>                       
                            <div class="row top-buffer">
                                <div class="clearfix igr col-md-12">
                                    <div class="col-md-2">
                                        <label for="inputStartTime">
                                            Estimated Completion Date&nbsp;<span class="text-danger">*</span>
                                        </label>
                                    </div>
                                    <div class="col-md-3">
                                       @Html.TextBoxFor(m => m.StartTime, "{0:d}", new { id = "inputStartTime", @class = "form-control " })
                                       @Html.ValidationMessageFor(m => m.StartTime)
                                    </div>
                                    <div class="col-md-2">
                                        <label for="inputEndTime">
                                            Completed Date
                                        </label>
                                    </div>
                                    <div class="col-md-3">
                                       @Html.TextBoxFor(m => m.EndTime, "{0:d}", new { id = "inputEndTime", @class = "form-control datepicker" })
                                       @Html.ValidationMessageFor(m => m.EndTime)
                                    </div>
                                </div>
                            </div>
                            <div class="row top-buffer">
                                <div class="clearfix igr col-md-12">
                                    <div class="col-md-2">
                                        <label for="inputGroupCode">
                                           Reminder Before Completion Date (Days)&nbsp;<span class="text-danger">*</span>
                                        </label>
                                    </div>
                                    <div class="col-md-3">
                                        @Html.TextBoxFor(m => m.ReminderBeforeCompletion, new { id = "inputReminderBeforeCompletion", @class = "form-control" ,@maxlength=3})
                                        @Html.ValidationMessageFor(m => m.ReminderBeforeCompletion)
                                    </div>
                                </div>
                            </div>
                            <div class="row top-buffer">
                                <div class="clearfix igr col-md-12">
                                    <div class="col-md-2">
                                        <label for="inputEsclation">
                                            Escalation ?&nbsp;<span class="text-danger">*</span>
                                        </label>
                                    </div>
                                    <div class="col-md-3">
                                        @*@Html.DropDownListFor(m => m.Escalation, new SelectList(Model.Escalationlist, "Lookup_value", "Lookup_desc"), new { id = "inputEsclation", @class = "form-control" })*@
                                        @Html.RadioButtonForSelectList(m => m.Escalation, Model.Escalationlist)<br />
                                        @Html.ValidationMessageFor(m => m.Escalation, String.Empty, new { @style = "margin:-113px;!important;line-height: 21px!important" })
                                    </div>
                                    <div class="col-md-2">
                                        <label for="ddlEsclationTo">
                                            Escalation To
                                        </label>
                                    </div>
                                    <div class="col-md-3">
                                        @Html.DropDownListFor(m => m.EscalationTo, new SelectList(Model.UserList, "SNO".Trim(), "UserDispName"), new { id = "ddlEsclationTo", @class = "col-lg-12 form-control" })
                                    </div>
                                </div>
                            </div> 
                            <div class="row top-buffer">
                                <div class="clearfix igr col-md-12">
                                    <div class="col-md-2">
                                        <label for="inputSubjectLine">
                                            Email Subject&nbsp;<span class="text-danger">*</span>
                                        </label>
                                    </div>
                                    <div class="col-md-3">
                                        @Html.TextBoxFor(m => m.SubjectLine, new { id = "inputSubjectLine", @class = "form-control",@maxlength=50 })
                                        @Html.ValidationMessageFor(m => m.SubjectLine)
                                    </div>
                                    <div class="col-md-2">
                                        <label for="inputEmailBody">
                                            Email Body
                                        </label>
                                    </div>
                                    <div class="col-md-3">
                                        @Html.TextAreaFor(m => m.EmailBody, new { id = "inputEmailBody", @class = "form-control",@maxlength=150 })
                                    </div>
                                </div>
                            </div> 
                            <div class="row top-buffer">
                                <div class="clearfix igr col-md-12">
                                        <div class="col-md-2">
                                            <label for="inputNote">
                                                Remarks
                                            </label>
                                        </div>
                                        <div class="col-md-3">
                                            @Html.TextAreaFor(m => m.Note, new { id = "inputNote", @class = "form-control",@maxlength=150 })
                                        </div>
                                </div>
                            </div>
                            <div class="row top-buffer">
                            </div>                                                   
                            
                            <div class="row top-buffer">
                                <div class="clearfix igr col-md-12 text-center">
                                    <button class="btn btn-info" id="btnSave">
                                        Save</button>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                    @Html.ActionLink("Back", "Index", null, new { @class = "btn btn-info" })
                                </div>
                            </div>  
                             
                              
                        }
                    </div>
                </div>
            </div>
        </div>
        <!-- Row End -->
    </div>
    <!-- Bootstrap Container End -->
</div>

<script type="text/javascript">
    $(document).ready(function () {
        $.culture = Globalize.culture("en-GB");
        $.validator.methods.date = function (value, element) {
            return this.optional(element)
                    || Globalize.parseDate(value, "dd/MM/yyyy", "en-GB")
                    || Globalize.parseDate(value, "yyyy-mm-dd");
        }
    });
    $(function () {
        $('#inputFollowUpDate').datepicker({
            dateFormat: "dd/mm/yy",
            showStatus: true,
            showWeeks: true,
            currentText: 'Now',
            autoSize: true,
            gotoCurrent: true,
            showAnim: 'blind',
            highlightWeek: true,
            changeMonth: !0,
            changeYear: !0,
            onSelect: function (b) {
                $(this).valid();
            }
        });

       

        $("#inputStartTime").datepicker({
            dateFormat: "dd/mm/yy",
            showStatus: !0,
            showWeeks: !0,
            currentText: "Now",
            autoSize: !0,
            gotoCurrent: !0,
            showAnim: "blind",
            highlightWeek: !0,
            changeMonth: !0,
            changeYear: !0,
            onSelect: function (b) {
                $(this).valid();
            }
        });

        $("#inputReminderBeforeCompletion").keypress(function () {
            var b = b || event;
            if (/[a-z]/i.test(String.fromCharCode(b.keyCode)) || 46 == b.keyCode) return !1;
        });


//        $("#btnSave").click(function (event) {
//            if ($("#inputStartTime").val() != '' && ($("#inputEndTime").val() != ''))
//            var $from = $("#inputStartTime").datepicker('getDate');
//            var $to = $("#inputEndTime").datepicker('getDate');
//            if ($from > $to) {
//                alert("Completed date cannot be less than Completion date.");
//                event.preventDefault();
//            }
//        })


    });
   
    
</script>
<script type="text/javascript">
    $('#inputEsclation').change(function () {
        var escvalue = $('#inputEsclation').val();
        if (escvalue == 'Y') {
            $('#EsclationTo').attr('style', 'Display:inline');
        }
        else {
            $('#EsclationTo').attr('style', 'Display:none');
        }
    });

//    if ($("#inputFollowUpDate").val() != '') {
//        var arrDate = $('#inputFollowUpDate').val().split(" ");
//        $('#inputFollowUpDate').val(arrDate[0]);
//    }

//    if ($("#inputExpectedPaymentDate").val() != '') {
//        var arrDate = $('#inputExpectedPaymentDate').val().split(" ");
//        $('#inputExpectedPaymentDate').val(arrDate[0]);
//    }

//    if ($("#inputStartTime").val() != '') {
//        var arrDate = $('#inputStartTime').val().split(" ");
//        $('#inputStartTime').val(arrDate[0]);
//    }

//    if ($("#inputEndTime").val() != '') {
//        var arrDate = $('#inputEndTime').val().split(" ");
//        $('#inputEndTime').val(arrDate[0]);
//    }
</script>
<script type="text/javascript">
    var pattern = /^(?:(?:31(\/|-|\.)(?:0?[13578]|1[02]))\1|(?:(?:29|30)(\/|-|\.)(?:0?[1,3-9]|1[0-2])\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29(\/|-|\.)0?2\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0?[1-9])|(?:1[0-2]))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$/;
    $('#Diaryform').on('submit', function (event) {
        if (!pattern.test($('#inputFollowUpDate').val()) && !$("#Diaryform > div:nth-child(10) > div > div:nth-child(2) > span > span").is(':visible')) {
            $('#inputFollowUpDate').val("");
//            hideLoading();
//            $("#divLoading").remove();
            event.preventDefault();
            return false;
        }
        if (!pattern.test($('#inputStartTime').val()) && !$("#Diaryform > div:nth-child(11) > div > div:nth-child(2) > span > span").is(':visible')) {
            $('#inputStartTime').val("");
//            hideLoading();
//            $("#divLoading").remove();
            event.preventDefault();
            return false;
        }

    });



   
</script>
<script type="text/javascript">
    $(function () {
        $("#inputReminderBeforeCompletion").keypress(function () {
            var a = $("#" + this.id).val().length;
            if (3 > parseInt(a)) {
                var a = "#" + this.id,
                b = event.type,
                b = b.which ? b.which : event.keyCode;
                return 46 != b && 31 < b && (48 > b || 57 < b) ? ($(a).focus(), !1) : !0
            }
            return !1
        });
    })
</script>

<script type="text/javascript">
    $(function () {

       
        $('#inputFollowUpDate').blur(function (event) {
            "The field FollowUp Date must be a date." == $("#Diaryform > div:nth-child(11) > div > div:nth-child(2) > span > span").text() && $("#Diaryform > div:nth-child(11) > div > div:nth-child(2) > span > span").text("The Follow Up Date must be in DD/MM/YYYY Format.")
        });

        $('#inputStartTime').blur(function (event) {
            "The field Estimated Completion Date must be a date." == $("#Diaryform > div:nth-child(12) > div > div:nth-child(2) > span > span").text() && $("#Diaryform > div:nth-child(12) > div > div:nth-child(2) > span > span").text("The Completion Date must be in DD/MM/YYYY Format.")
        });

             $('#inputExpectedPaymentDate').blur(function (event) {
                      "The field Expected Payment Date must be a date." == $("#Diaryform > div:nth-child(11) > div > div:nth-child(4) > span > span").text() && $("#Diaryform > div:nth-child(11) > div > div:nth-child(4) > span > span").text("The Expected Payment Date must be in DD/MM/YYYY Format.")
        });


        $('#inputEndTime').blur(function (event) {
             "The field Completed Date must be a date." == $("#Diaryform > div:nth-child(12) > div > div:nth-child(4) > span > span").text() && $("#Diaryform > div:nth-child(12) > div > div:nth-child(4) > span > span").text("The Completed Date must be in DD/MM/YYYY Format.")
        });


        $('.datepicker').datepicker({
            dateFormat: "dd/mm/yy",
            showStatus: true,
            showWeeks: true,
            currentText: 'Now',
            autoSize: true,
            gotoCurrent: true,
            showAnim: 'blind',
            highlightWeek: true,
            changeMonth: !0,
            changeYear: !0,
            yearRange: "1951:2050",
            onSelect: function (b) {
                $(this).valid();
            }
        });
    });
    
</script>



@*<script type="text/javascript">

    $(document).ready(function () {
        //$("#autoComplete").autocomplete('@Url.Action("InsurerName", "Home")', { minChars: 3 });
        $("#autoComplete").autocomplete({
            source: '@Url.Action("InsurerName", "Home")',
            minChars: 3
        });
    });
 
</script>*@
@*<script type="text/javascript">
    //Javascript function to provide AutoComplete and Intellisense feature for finding Users.
    $(document).ready(function () {
        //alert("sanjay");
        $("#InsurerName").autocomplete({
            source: function (request, response) {
                //   alert("Hello");
                //  debugger;
                $.ajax({
                    url: '@Url.Action("Find", "Home")',
                    data: "{ 'prefixText': '" + request.term + "' }",
                    dataType: "json",
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    dataFilter: function (data) { return data; },
                    success: function (data) {
                        response($(data, function (item) {
                            return {
                                label: item.value,
                                value: item.id,
                                id: item.id,
                                CedantName: item.CedantName

                            }
                        }))
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        alert(textStatus);
                    }
                });
            },
            minLength: 3,
            select: function (even, ui) {
                $("#InsurerName").val(ui.item.label);
                $("#InsurerId").val(ui.item.id);
                //                //            this.value=ui.item.value;
                //                this.id = ui.item.id;
                //                alert(this.id);
                //                var x = $("#InsurerId").val(this.id);
                //                alert(x);
                return false;

            }
        });

        $("#PolicyName").autocomplete({
            source: function (request, response) {
                //  alert("Hello");
                //  debugger;
                $.ajax({
                    url: '@Url.Action("PolicyFind", "Home")',
                    data: "{ 'PolicyText': '" + request.term + "' }",
                    dataType: "json",
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    dataFilter: function (data) { return data; },
                    success: function (data) {
                        response($(data, function (item) {
                            return {
                                label: item.value,
                                value: item.value,
                                id: item.PolicyId


                            }
                        }))
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        alert(textStatus);
                    }
                });
            },
            minLength: 2,
            select: function (even, ui) {
                $("#PolicyName").val(ui.item.label);
                $("#PolicyId").val(ui.item.id);
                // this.value=ui.item.value;
                //            this.id=ui.item.id;
                return false;

            }
        });


    });
</script>*@
@*<script type="text/javascript">
        //Javascript function to provide AutoComplete and Intellisense feature for finding Users.
        $(document).ready(function () {
            //alert("sanjay");
            $("#PolicyName").autocomplete({
                source: function (request, response) {
                      alert("Hello");
                      debugger;
                    $.ajax({
                        url: '@Url.Action("PolicyFind", "Home")',
                        data: "{ 'PolicyText': '" + request.term + "' }",
                        dataType: "json",
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        dataFilter: function (data) { return data; },
                        success: function (data) {
                            response($(data, function (item) {
                                return {
                                    label: item.value,
                                    value: item.value,
                                    id: item.PolicyId
                                   

                                }
                            }))
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            alert(textStatus);
                        }
                    });
                },
                minLength: 2,
                select: function (even, ui) {
                    $("#PolicyName").val(ui.item.label);
                 var x=$("#PolicyId").val(ui.item.id);
                 alert(x);
                    //            this.value=ui.item.value;
                    //            this.id=ui.item.id;
                    return false;

                }
            });
        });
    </script>*@
@*<script type="text/javascript">
    //Javascript function to provide AutoComplete and Intellisense feature for finding Users.
    $(document).ready(function () {
        //alert("sanjay");
        $("#ClaimName").autocomplete({
            source: function (request, response) {
                //   alert("Hello");
                //  debugger;
                $.ajax({
                    url: '@Url.Action("ClaimFind", "Home")',
                    data: "{ 'ClaimText': '" + request.term + "' }",
                    dataType: "json",
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    dataFilter: function (data) { return data; },
                    success: function (data) {
                        response($(data, function (item) {
                            return {
                                label: item.value,
                                value: item.value,
                                id: item.ClaimID


                            }
                        }))
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        alert(textStatus);
                    }
                });
            },
            minLength: 2,
            select: function (even, ui) {
                $("#ClaimName").val(ui.item.label);
                $("#ClaimId").val(ui.item.id);
                //            this.value=ui.item.value;
                //            this.id=ui.item.id;
                return false;

            }
        });
    });
</script>*@
