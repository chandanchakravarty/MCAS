
/******************************************************************************************
<Author				: - Pradeep Kushwaha
<Start Date			: -	22-03-2010
<End Date			: -	22-03-2010
<Description		: - 
<Review Date		: - 
<Reviewed By		: - 	
Modification History
<Modified Date		: - 6 April 2010
<Modified By		: -  Pravesh K Chandel
<Purpose			: -  REview and Optimization 
 * 
<Modified Date		: -  21 April 2010
<Modified By		: -  Charles Gomes
<Purpose			: -  Added CUSTOM INFO to maintain Multilingual Transaction Log
 * 
<Modified Date		: -  21 April 2010
<Modified By		: -  Charles Gomes
<Purpose			: -  Added Autogenerated ADDITIONAL_INFO to maintain Multilingual Transaction Log
*******************************************************************************************/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using System.Collections;
using System.Xml;
using System.Data.SqlClient;
using Cms.EbixDataLayer;
using Cms.EbixDataTypes;
using Cms.BusinessLayer.BlCommon;
using System.Security.Cryptography;
using System.IO;

namespace Cms.Model.Support
{
    /// <summary>
    /// 
    /// </summary>
    [Serializable]
    public abstract class ClsModelBaseClass : IEbixModel 
    {

        #region For Private Variable Declaration
        String strProcAdd = String.Empty;
        String strProcUpdate = String.Empty;
        String strProcDelete = String.Empty;
        String strProcFetchData = String.Empty;

        String strProcActivateDeactivate = String.Empty;
        String strProcMaintainTrans = String.Empty;

        Int32 intReturnIDNameValue;
        String strReturnIDName = String.Empty;

        String strTransactLabel = String.Empty;
        String _Action = String.Empty;
        Int32 intTRANS_TYPE_ID ;
        Int32 intCLIENT_ID ;
        Int32 intRECORDED_BY ;
        String strTRANS_DESC = String.Empty;
        Int32 _Proc_ReturnValue;
        Int32 _POLICYID;
        Int32 _POLICY_VER_TRACKING_ID;

        private string strCustomInfo = ""; // Added by Charles on 20-Apr-2010 for Multilingual Implementation of Transaction Log

        #endregion

        //public static int MODEL_LANG_ID = 1;
        //public static string MODEL_LANG_CULTURE = "en-US"; // Added by Charles on 20-Apr-2010 for Multilingual Implementation of Transaction Log

        public Boolean RequiredTransactionLog = true; // Default every class will require Transcation Log Entry
        public Boolean ProcReturnValue = false;// Default every class will require Procedure return value 

        protected Hashtable _htPropertyCollection;//Property Collection
        protected Hashtable htGetDataParamCollections;//
        /// <summary>
        /// 
        /// </summary>
        public ClsModelBaseClass()
        {

            _htPropertyCollection = new Hashtable();
            htGetDataParamCollections = new Hashtable();
            this.AddPropertyCollection();
        }//public ClsModelBaseClass()
        public Hashtable htPropertyCollection
        {
            get
            {
                return _htPropertyCollection;
            }
            set
            {
                _htPropertyCollection = value;
            }
        }
        public static string MODEL_LANG_CULTURE
        {
            set
            {
                //MODEL_LANG_CULTURE = value;
            }
            get
            {
            if (System.Web.HttpContext.Current.Session != null && System.Web.HttpContext.Current.Session["languageCode"] != null)
               {
                    return System.Web.HttpContext.Current.Session["languageCode"].ToString();
               }
                else
                    return "en-US";
            }
        }
        public static int MODEL_LANG_ID
        {
            set
            {
                //intBlLangID = value;
            }
            get
            {
                if (System.Web.HttpContext.Current.Session != null && System.Web.HttpContext.Current.Session["languageId"] != null)
                {
                    return int.Parse(System.Web.HttpContext.Current.Session["languageId"].ToString());
                }
                else
                    return 1;
            }
        }
        protected string DBConnString
        {
            set
            {
            }
            get
            {
                if (System.Web.HttpContext.Current.Session != null && System.Web.HttpContext.Current.Session["ConnStr"] != null)
                {
                    try
                    {
                        return DecryptString(System.Web.HttpContext.Current.Session["ConnStr"].ToString());
                    }
                    catch
                    {
                      System.Web.HttpContext.Current.Response.Redirect("/cms/cmsweb/aspx/login.aspx?", true);
                      return "";
                    }
                }
                else
                {
                    System.Web.HttpContext.Current.Response.Redirect("/cms/cmsweb/aspx/login.aspx?",true);
                    return "";
                }
            }
        }
        /// <summary>
        /// Custom Information to be maintained in Transaction LOg
        /// </summary>
        /// Added by Charles on 21-Apr-10 for Multilingual Implementation of Transaction Log
        public string CUSTOM_INFO
        {
            get
            {
                if (strCustomInfo == null)
                {
                    strCustomInfo = "";
                }
                return strCustomInfo;
            }
            set
            {
                strCustomInfo = value;
            }
        }

        #region Delare the add the parameter collection for the data wrapper class
        /// <summary>
        /// Use to add the Default Property collection for the data wrapper class
        /// </summary>
        private void AddPropertyCollection()
        {
                htPropertyCollection.Add("IS_ACTIVE", IS_ACTIVE);
                htPropertyCollection.Add("CREATED_BY", CREATED_BY);
                htPropertyCollection.Add("CREATED_DATETIME", CREATED_DATETIME);
                htPropertyCollection.Add("MODIFIED_BY", MODIFIED_BY);
                htPropertyCollection.Add("LAST_UPDATED_DATETIME", LAST_UPDATED_DATETIME);

        }

        #endregion
        #region properties
        public EbixString IS_ACTIVE
        {
            get { return ((Cms.EbixDataTypes.EbixString)htPropertyCollection["IS_ACTIVE"]) == null ? new EbixString("IS_ACTIVE") : ((Cms.EbixDataTypes.EbixString)htPropertyCollection["IS_ACTIVE"]); }
            set
            {
                ((Cms.EbixDataTypes.EbixString)htPropertyCollection["ACTIVITY_TYPE"]).CurrentValue = Convert.ToString(value);
            }
        }//public EbixString IS_ACTIVE

        public EbixInt32 CREATED_BY
        {
            get { return ((Cms.EbixDataTypes.EbixInt32)htPropertyCollection["CREATED_BY"]) == null ? new EbixInt32("CREATED_BY") : ((Cms.EbixDataTypes.EbixInt32)htPropertyCollection["CREATED_BY"]); }
            set
            {
                ((Cms.EbixDataTypes.EbixInt32)htPropertyCollection["CREATED_BY"]).CurrentValue =Convert.ToInt32(value);
            }
        }//public EbixInt32 CREATED_BY

        public EbixDateTime CREATED_DATETIME
        {
            get { return ((Cms.EbixDataTypes.EbixDateTime)htPropertyCollection["CREATED_DATETIME"]) == null ? new EbixDateTime("CREATED_DATETIME") : ((Cms.EbixDataTypes.EbixDateTime)htPropertyCollection["CREATED_DATETIME"]); }
            set
            {
                ((Cms.EbixDataTypes.EbixDateTime)htPropertyCollection["CREATED_DATETIME"]).CurrentValue = Convert.ToDateTime(value);

            }
        }//public EbixDateTime CREATED_DATETIME

        public EbixInt32 MODIFIED_BY
        {
            get { return ((Cms.EbixDataTypes.EbixInt32)htPropertyCollection["MODIFIED_BY"]) == null ? new EbixInt32("MODIFIED_BY") : ((Cms.EbixDataTypes.EbixInt32)htPropertyCollection["MODIFIED_BY"]); }
            set
            {
                ((Cms.EbixDataTypes.EbixInt32)htPropertyCollection["MODIFIED_BY"]).CurrentValue =Convert.ToInt32(value);
            }
        }//public EbixInt32 MODIFIED_BY 

        public EbixDateTime LAST_UPDATED_DATETIME
        {
            get { return ((Cms.EbixDataTypes.EbixDateTime)htPropertyCollection["LAST_UPDATED_DATETIME"]) == null ? new EbixDateTime("LAST_UPDATED_DATETIME") : ((Cms.EbixDataTypes.EbixDateTime)htPropertyCollection["LAST_UPDATED_DATETIME"]); }
            set
            {
                ((Cms.EbixDataTypes.EbixDateTime)htPropertyCollection["LAST_UPDATED_DATETIME"]).CurrentValue = Convert.ToDateTime(value);
            }
        }//public EbixDateTime LAST_UPDATED_DATETIME
        #endregion

        /// <summary>
        /// Get and Set the Transaction Label
        /// </summary>
        public string TransactLabel
        {
            get
            {
                return strTransactLabel;
            }

            set
            {
                strTransactLabel = value;
            }
        }
        public string ACTION
        {
            get
            {
                return _Action;
            }

            set
            {
                _Action = value;
            }
        }

        public Int32 TRANS_TYPE_ID
        {
            get { return intTRANS_TYPE_ID; }
            set { intTRANS_TYPE_ID = value; }
        }
        public Int32 CLIENT_ID 
        {
            get {return intCLIENT_ID; }
            set { intCLIENT_ID = value; } 
        }
        public Int32 RECORDED_BY
        {
            get { return intRECORDED_BY; }
            set { intRECORDED_BY = value; }
        }
        public String TRANS_DESC 
        { 
            get { return strTRANS_DESC; }
            set { strTRANS_DESC = value; }
        }
        public Int32 POLICYID
        {
            get { return _POLICYID; }
            set { _POLICYID = value; }
        }
        public Int32 POLICYVERTRACKING_ID
        {
            get { return _POLICY_VER_TRACKING_ID; }
            set { _POLICY_VER_TRACKING_ID = value; }
        }

       
       

        #region IEbixModel Members

        /// <summary>
        /// Get and Set the Select Sql Procedure name
        /// </summary>
        public string Proc_FetchData
        {
            get
            {
                return strProcFetchData;
            }
            set
            {
                strProcFetchData = value;
            }
        }

        /// <summary>
        /// Get and Set the Add (Insert/Save ) Sql Procedure name
        /// </summary>
        public string Proc_Add_Name
        {
            get
            {
                return strProcAdd;
            }
            set
            {
                strProcAdd = value;
            }
        }

        /// <summary>
        /// Get and Set the Update Sql Procedure name
        /// </summary>
        public string Proc_Update_Name
        {
            get
            {
                return strProcUpdate;
            }
            set
            {
                strProcUpdate = value;
            }
        }

        /// <summary>
        /// Get and Set the Delete Sql Procedure name
        /// </summary>
        public string Proc_Delete_Name
        {
            get
            {
                return strProcDelete;
            }
            set
            {
                strProcDelete = value;
            }
        }

        /// <summary>
        /// Get and Set the Activate and Deactivate Sql Procedure name
        /// </summary>
        public string Proc_ActivateDeactivate_Name
        {
            get
            {
                return strProcActivateDeactivate;
            }
            set
            {
                strProcActivateDeactivate = value;
            }
        }

        /// <summary>
        /// Get and Set the Out Param Id Name Value
        /// </summary>
        protected Int32 ReturnIDNameValue 
        {
            get { return intReturnIDNameValue; }
            set { intReturnIDNameValue = value; }
        }
        /// <summary>
        /// Use to get the Return Value form Procedure 
        /// </summary>
        public Int32 Proc_ReturnValue
        {
            get { return _Proc_ReturnValue; }

        } 
        /// <summary>
        /// Get and Set the Out Param Id Name 
        /// </summary>
        protected String ReturnIDName 
        { 
            get{return strReturnIDName;}
            set {strReturnIDName = value;}
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public DataSet GetData()
        {
            DataSet ds = null;
            try
            {
                String ConnStr = EbixDataLayer.DataWrapper.ConnString = DBConnString;

                DataWrapper objDataWrapper = new DataWrapper(ConnStr, CommandType.StoredProcedure);

                SqlParameter objSqlParameter = null;

                if (htGetDataParamCollections.Count != 0)
                {
                    ICollection ColumnsNameKey = htGetDataParamCollections.Keys;

                    foreach (object key in ColumnsNameKey)
                    {
                        objDataWrapper.AddParameter(key.ToString(), htGetDataParamCollections[key]);

                    }//foreach (object key in ColumnsNameKey)

                    if (ReturnIDName!="" && ReturnIDName != String.Empty)
                    {
                        objSqlParameter = (SqlParameter)objDataWrapper.AddParameter(ReturnIDName, ReturnIDNameValue, SqlDbType.Int, ParameterDirection.Output);
                    }                    
                    

                }// if (htGetDataParamCollections.Count != 0)
                ds = objDataWrapper.ExecuteDataSet(Proc_FetchData);

                if (ReturnIDName != "" && ReturnIDName != String.Empty)
                {
                    if (objSqlParameter.Value.ToString().Trim() != "")
                    {
                        ReturnIDNameValue = int.Parse(objSqlParameter.Value.ToString());
                        if (htPropertyCollection.Contains(ReturnIDName.Replace("@", "")))
                        {
                            ((Cms.EbixDataTypes.EbixInt32)htPropertyCollection[ReturnIDName.Replace("@", "")]).CurrentValue = ReturnIDNameValue;
                        }
                    }
                }
                 
            }//try
            catch (Exception ex)
            {
                throw (ex);
            }//catch (Exception ex)
            finally{}

            return ds;
        }//public DataSet GetData()
       
        //Overload Of Save Method
        protected int Save()
        {
            int returnResult = 0;
            String ConnStr = EbixDataLayer.DataWrapper.ConnString = DBConnString; 
            DataWrapper objDataWrapper = new DataWrapper(ConnStr, CommandType.StoredProcedure, DataWrapper.MaintainTransaction.YES, DataWrapper.SetAutoCommit.OFF);
            try
            {
                returnResult = this.Save(objDataWrapper);
                objDataWrapper.CommitTransaction(DataWrapper.CloseConnection.YES);
                return returnResult;
            }
            catch (Exception ex)
            {
                objDataWrapper.RollbackTransaction(DataWrapper.CloseConnection.YES);
                throw (new Exception("Error While Saving Record.", ex.InnerException));
            }
            finally { objDataWrapper.Dispose(); }
        }
        //Overload Of Save Method with wrapper
        protected int Save(DataWrapper objDataWrapper)
        {

            int returnResult = 0;
            //String ConnStr = EbixDataLayer.DataWrapper.ConnString;
            //DataWrapper objDataWrapper = new DataWrapper(ConnStr, CommandType.StoredProcedure, DataWrapper.MaintainTransaction.YES, DataWrapper.SetAutoCommit.OFF);
            try
            {
                if (htPropertyCollection.Count != Convert.ToInt32(null))
                {
                    this.AddParametersAndValue(ref objDataWrapper);

                    SqlParameter objSqlParameter = (SqlParameter)objDataWrapper.AddParameter(ReturnIDName, ReturnIDNameValue, SqlDbType.Int, ParameterDirection.Output);

                    SqlParameter returnSqlParameter = null;
                   
                    if (ProcReturnValue)
                    {
                        returnSqlParameter = (SqlParameter)objDataWrapper.AddParameter("@RETNVALUE", SqlDbType.Int, ParameterDirection.ReturnValue);
                    }
                    if (RequiredTransactionLog)
                    {

                        string strTranXML = this.GenerateTransactionLogXML_New(true);
                        Cms.Model.Maintenance.ClsTransactionInfo objTransactionInfo = new Cms.Model.Maintenance.ClsTransactionInfo();

                        objTransactionInfo.TRANS_TYPE_ID = TRANS_TYPE_ID;
                        objTransactionInfo.CHANGE_XML = strTranXML;
                        objTransactionInfo.CLIENT_ID = CLIENT_ID;
                        objTransactionInfo.POLICY_ID = POLICYID;
                        objTransactionInfo.POLICY_VER_TRACKING_ID = POLICYVERTRACKING_ID;
                        objTransactionInfo.RECORDED_BY = RECORDED_BY;
                        objTransactionInfo.TRANS_DESC = TRANS_DESC;
                        objTransactionInfo.CUSTOM_INFO = CUSTOM_INFO; // Added by Charles on 21-Apr-10 for Multilingual Implementation of Transaction Log

                        returnResult = objDataWrapper.ExecuteNonQuery(Proc_Add_Name);
                        if (ProcReturnValue)
                            _Proc_ReturnValue = int.Parse(returnSqlParameter.Value.ToString());

                        if (returnResult > 0)//Added by Pradeep Kushwaha on 21-05-2010 for iTrack 85
                        {
                            this.MaintainTrans(objDataWrapper, objTransactionInfo);
                        }

                    }// if (RequiredTransactionLog)
                    else
                    {
                        returnResult = objDataWrapper.ExecuteNonQuery(Proc_Add_Name);
                    }
                    if (objSqlParameter.Value.ToString().Trim() != "")
                    {
                        ReturnIDNameValue = int.Parse(objSqlParameter.Value.ToString());
                        if (htPropertyCollection.Contains(ReturnIDName.Replace("@", "")))
                        {
                          ((Cms.EbixDataTypes.EbixInt32)htPropertyCollection[ReturnIDName.Replace("@", "")]).CurrentValue = ReturnIDNameValue;
                        }
                    }
                }
                //objDataWrapper.CommitTransaction(DataWrapper.CloseConnection.YES);
                return returnResult;
            }
            catch (Exception ex)
            {
                //objDataWrapper.RollbackTransaction(DataWrapper.CloseConnection.YES);
                throw (new Exception("Error While Saving Record.", ex.InnerException));
            }
            //finally { objDataWrapper.Dispose(); }
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="objDataWrapper"></param>
        private void AddParametersAndValue(ref DataWrapper objDataWrapper)
        {
            ICollection ColumnsNameKey = htPropertyCollection.Keys;

           //Looping through all the Property Collections
            foreach (object key in ColumnsNameKey)
            {
                String ColumnType = String.Empty;

                ColumnType = htPropertyCollection[key].GetType().Name.ToString();

                switch (ColumnType)
                {
                    case "EbixInt32":
                        if (((Cms.EbixDataTypes.EbixInt32)htPropertyCollection[key]).IsDBParam.ToString().ToUpper() == "TRUE")
                        objDataWrapper.AddParameter(key.ToString(), DefaultValues.GetIntNullFromNegative(((Cms.EbixDataTypes.EbixInt32)htPropertyCollection[key]).CurrentValue));
                        break;
                    case "EbixDouble":
                        if (((Cms.EbixDataTypes.EbixDouble)htPropertyCollection[key]).IsDBParam.ToString().ToUpper() == "TRUE")
                        objDataWrapper.AddParameter(key.ToString(), DefaultValues.GetDoubleNullFromNegative(((Cms.EbixDataTypes.EbixDouble)htPropertyCollection[key]).CurrentValue));
                        break;
                    case "EbixDecimal":
                        if (((Cms.EbixDataTypes.EbixDecimal)htPropertyCollection[key]).IsDBParam.ToString().ToUpper() == "TRUE")
                            objDataWrapper.AddParameter(key.ToString(), DefaultValues.GetDecimalNullFromNegative(((Cms.EbixDataTypes.EbixDecimal)htPropertyCollection[key]).CurrentValue));
                        break;
                    case "EbixString":
                        if (((Cms.EbixDataTypes.EbixString)htPropertyCollection[key]).IsDBParam.ToString().ToUpper() == "TRUE")
                        objDataWrapper.AddParameter(key.ToString(), ((Cms.EbixDataTypes.EbixString)htPropertyCollection[key]).CurrentValue);
                        break;
                    case "EbixDateTime":
                        if (((Cms.EbixDataTypes.EbixDateTime)htPropertyCollection[key]).IsDBParam.ToString().ToUpper() == "TRUE")
                        {
                            if (((Cms.EbixDataTypes.EbixDateTime)htPropertyCollection[key]).CurrentValue.ToString() != "" && Convert.ToDateTime(((Cms.EbixDataTypes.EbixDateTime)htPropertyCollection[key]).CurrentValue.ToString()) != DateTime.MinValue)
                            objDataWrapper.AddParameter(key.ToString(), ((Cms.EbixDataTypes.EbixDateTime)htPropertyCollection[key]).CurrentValue.ToString(),SqlDbType.DateTime);
                            else 
                            objDataWrapper.AddParameter(key.ToString(), System.DBNull.Value,SqlDbType.DateTime);
                        }
                        break;
                    case "EbixBoolean":
                        if (((Cms.EbixDataTypes.EbixBoolean)htPropertyCollection[key]).IsDBParam.ToString().ToUpper() == "TRUE")
                        objDataWrapper.AddParameter(key.ToString(), ((Cms.EbixDataTypes.EbixBoolean)htPropertyCollection[key]).CurrentValue);
                        break;
                    default:
                        break;

                }// switch (ColumnType)
            }//foreach (object key in ColumnsNameKey)

        }//private void AddParametersAndValue(ref DataWrapper objDataWrapper)
        
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        protected int Update()
        {
            int returnValue = 0;
            String ConnStr = EbixDataLayer.DataWrapper.ConnString = DBConnString; 
            DataWrapper objDataWrapper = new DataWrapper(ConnStr, CommandType.StoredProcedure, DataWrapper.MaintainTransaction.YES, DataWrapper.SetAutoCommit.OFF);
            try {
                returnValue = this.Update(objDataWrapper);
                objDataWrapper.CommitTransaction(DataWrapper.CloseConnection.YES);
                return returnValue;
            }
            catch (Exception ex)
            {
                objDataWrapper.RollbackTransaction(DataWrapper.CloseConnection.YES);
                throw (new Exception("Error While Updating Record.", ex.InnerException));
            }
           finally { objDataWrapper.Dispose(); }
        }
        protected int Update(DataWrapper objDataWrapper)
        {
            int returnValue=0;
            //String ConnStr= EbixDataLayer.DataWrapper.ConnString;
            //DataWrapper objDataWrapper = new DataWrapper(ConnStr, CommandType.StoredProcedure, DataWrapper.MaintainTransaction.YES, DataWrapper.SetAutoCommit.OFF);
            try
            {
                if (htPropertyCollection.Count != Convert.ToInt32(null))
                {
                    this.AddParametersAndValue(ref objDataWrapper);
                    
                    SqlParameter returnSqlParameter = null;
                    SqlParameter objSqlParameter = null;

                    if (ReturnIDName != "" && ReturnIDName != String.Empty)
                    {
                        objSqlParameter = (SqlParameter)objDataWrapper.AddParameter(ReturnIDName, ReturnIDNameValue, SqlDbType.Int, ParameterDirection.Output);
                    }

                    if (ProcReturnValue)
                    {
                        returnSqlParameter = (SqlParameter)objDataWrapper.AddParameter("@RETNVALUE", SqlDbType.Int, ParameterDirection.ReturnValue);
                    }
                    if (RequiredTransactionLog)
                    {
                        string strTranXML = this.GenerateTransactionLogXML_New(false);
                        Cms.Model.Maintenance.ClsTransactionInfo objTransactionInfo = new Cms.Model.Maintenance.ClsTransactionInfo();

                        objTransactionInfo.TRANS_TYPE_ID = TRANS_TYPE_ID;
                        objTransactionInfo.CHANGE_XML = strTranXML;
                        objTransactionInfo.CLIENT_ID = CLIENT_ID;
                        objTransactionInfo.POLICY_ID = POLICYID;
                        objTransactionInfo.POLICY_VER_TRACKING_ID = POLICYVERTRACKING_ID;
                        objTransactionInfo.RECORDED_BY = RECORDED_BY;
                        objTransactionInfo.TRANS_DESC = TRANS_DESC;
                        objTransactionInfo.CUSTOM_INFO = CUSTOM_INFO; // Added by Charles on 21-Apr-10 for Multilingual Implementation of Transaction Log

                        returnValue = objDataWrapper.ExecuteNonQuery(Proc_Update_Name);
                        
                        if (ProcReturnValue)
                            _Proc_ReturnValue = int.Parse(returnSqlParameter.Value.ToString());

                        if (returnValue > 0)//Added by Pradeep Kushwaha on 21-05-2010 for iTrack 85
                        {
                            this.MaintainTrans(objDataWrapper, objTransactionInfo);
                        }

                    }//if (RequiredTransactionLog)
                    else
                    {
                        returnValue = objDataWrapper.ExecuteNonQuery(Proc_Update_Name);
                    }

                    if (ReturnIDName != "" && ReturnIDName != String.Empty)
                    {
                        if (objSqlParameter.Value.ToString().Trim() != "")
                        {
                            ReturnIDNameValue = int.Parse(objSqlParameter.Value.ToString());
                            if (htPropertyCollection.Contains(ReturnIDName.Replace("@", "")))
                            {
                                ((Cms.EbixDataTypes.EbixInt32)htPropertyCollection[ReturnIDName.Replace("@", "")]).CurrentValue = ReturnIDNameValue;
                            }
                        }
                    }
                   
                }//if (htPropertyCollection.Count != Convert.ToInt32(null))
                //objDataWrapper.CommitTransaction(DataWrapper.CloseConnection.YES);
                return returnValue;
            }
            catch (Exception ex)
            {
                //objDataWrapper.RollbackTransaction(DataWrapper.CloseConnection.YES);
                throw (new Exception("Error While Updating Record.", ex.InnerException));
            }
          // finally { objDataWrapper.Dispose(); }
        

        }//public int Update()

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        protected int Delete()
        {
            int returnValue = 0;
            String ConnStr = EbixDataLayer.DataWrapper.ConnString = DBConnString;
            DataWrapper objDataWrapper = new DataWrapper(ConnStr, CommandType.StoredProcedure, DataWrapper.MaintainTransaction.YES, DataWrapper.SetAutoCommit.OFF);
            try
            {
                returnValue = this.Delete(objDataWrapper);
                objDataWrapper.CommitTransaction(DataWrapper.CloseConnection.YES);
                return returnValue;
            }
            catch (Exception ex)
            {
                objDataWrapper.RollbackTransaction(DataWrapper.CloseConnection.YES);
                throw (new Exception("Error While Deleting Record.", ex.InnerException));
            }
            finally { objDataWrapper.Dispose(); }
        }
        protected int Delete(DataWrapper objDataWrapper)
        {
            int returnValue=0;
            //String ConnStr = EbixDataLayer.DataWrapper.ConnString;
            //DataWrapper objDataWrapper = new DataWrapper(ConnStr, CommandType.StoredProcedure, DataWrapper.MaintainTransaction.YES, DataWrapper.SetAutoCommit.OFF);
            try
            {
               
                if (htGetDataParamCollections.Count != 0)
                {
                    ICollection ColumnsNameKey = htGetDataParamCollections.Keys;

                    foreach (object key in ColumnsNameKey)
                    {
                        objDataWrapper.AddParameter(key.ToString(), htGetDataParamCollections[key]);

                    }

                    SqlParameter returnSqlParameter = null;

                    if (ProcReturnValue)
                    {
                        returnSqlParameter = (SqlParameter)objDataWrapper.AddParameter("@RETNVALUE", SqlDbType.Int, ParameterDirection.ReturnValue);
                     
                    }//foreach (object key in ColumnsNameKey)

                    if (RequiredTransactionLog)
                    {
                        string strTranXML = this.GenerateTransactionLogXML_New(false);
                        Cms.Model.Maintenance.ClsTransactionInfo objTransactionInfo = new Cms.Model.Maintenance.ClsTransactionInfo();

                        objTransactionInfo.TRANS_TYPE_ID = TRANS_TYPE_ID;
                        objTransactionInfo.CHANGE_XML = strTranXML;
                        objTransactionInfo.CLIENT_ID = CLIENT_ID;
                        objTransactionInfo.POLICY_ID = POLICYID;
                        objTransactionInfo.POLICY_VER_TRACKING_ID = POLICYVERTRACKING_ID;
                        objTransactionInfo.RECORDED_BY = RECORDED_BY;
                        objTransactionInfo.TRANS_DESC = TRANS_DESC;
                        objTransactionInfo.CUSTOM_INFO = CUSTOM_INFO; // Added by Charles on 21-Apr-10 for Multilingual Implementation of Transaction Log

                        //returnValue = objDataWrapper.ExecuteNonQuery(objTransactionInfo);
                        returnValue = objDataWrapper.ExecuteNonQuery(Proc_Delete_Name);
                      
                        // ----Added by Praveen Kumar on 20/05/2010 starts-----
                       
                        if (ProcReturnValue)
                            _Proc_ReturnValue = int.Parse(returnSqlParameter.Value.ToString());
                        
                        // ----Added by Praveen Kumar on 20/05/2010 Ends-----
                       
                        this.MaintainTrans(objDataWrapper, objTransactionInfo);
                    }//if (RequiredTransactionLog)
                    else
                    {
                        returnValue = objDataWrapper.ExecuteNonQuery(Proc_Delete_Name);
                    }
                    //objDataWrapper.CommitTransaction(DataWrapper.CloseConnection.YES);
                }// if (htGetDataParamCollections.Count != 0)

                   
                
            }//try
            catch (Exception ex)
            {
                //objDataWrapper.RollbackTransaction(DataWrapper.CloseConnection.YES);
                throw (new Exception("Error While Deleting Record.", ex.InnerException));
            }
            //finally { objDataWrapper.Dispose(); }

           return returnValue;
        }//public int Delete()

        protected int ActivateDeactivate()
        {
            int returnValue = 0;
            String ConnStr = EbixDataLayer.DataWrapper.ConnString = DBConnString;

            DataWrapper objDataWrapper = new DataWrapper(ConnStr, CommandType.StoredProcedure, DataWrapper.MaintainTransaction.YES, DataWrapper.SetAutoCommit.OFF);

            try
            {
               
                if (htGetDataParamCollections.Count != 0)
                {
                    ICollection ColumnsNameKey = htGetDataParamCollections.Keys;

                    foreach (object key in ColumnsNameKey)
                    {
                        objDataWrapper.AddParameter(key.ToString(), htGetDataParamCollections[key]);

                    }

                    //Added by praveer panghal (21 sep 2010)for iTrack# 339 start
                    SqlParameter returnSqlParameter = null;

                    if (ProcReturnValue)
                    {
                        returnSqlParameter = (SqlParameter)objDataWrapper.AddParameter("@RETNVALUE", SqlDbType.Int, ParameterDirection.ReturnValue);

                    }
                    //end
                    //foreach (object key in ColumnsNameKey)

                    if (RequiredTransactionLog)
                    {
                        string strTranXML = this.GenerateTransactionLogXML_New(false);
                        Cms.Model.Maintenance.ClsTransactionInfo objTransactionInfo = new Cms.Model.Maintenance.ClsTransactionInfo();

                        objTransactionInfo.TRANS_TYPE_ID = TRANS_TYPE_ID;
                        objTransactionInfo.CHANGE_XML = strTranXML;
                        objTransactionInfo.CLIENT_ID = CLIENT_ID;
                        objTransactionInfo.POLICY_ID = POLICYID;
                        objTransactionInfo.POLICY_VER_TRACKING_ID = POLICYVERTRACKING_ID;
                        objTransactionInfo.RECORDED_BY = RECORDED_BY;
                        objTransactionInfo.TRANS_DESC = TRANS_DESC;
                        objTransactionInfo.CUSTOM_INFO = CUSTOM_INFO; // Added by Charles on 21-Apr-10 for Multilingual Implementation of Transaction Log

                        //returnValue = objDataWrapper.ExecuteNonQuery(objTransactionInfo);
                        returnValue = objDataWrapper.ExecuteNonQuery(Proc_ActivateDeactivate_Name);

                        //Added by praveer panghal (21 sep 2010)for iTrack# 339 start
                        if (ProcReturnValue)
                            _Proc_ReturnValue = int.Parse(returnSqlParameter.Value.ToString());

                        //end
                        this.MaintainTrans(objDataWrapper, objTransactionInfo);
                    }//if (RequiredTransactionLog)
                    else
                    {
                        returnValue = objDataWrapper.ExecuteNonQuery(Proc_ActivateDeactivate_Name);
                    }
                    objDataWrapper.CommitTransaction(DataWrapper.CloseConnection.YES);
                }// if (htPropertyCollection.Count != Convert.ToInt32(null))
            }//try
            catch (Exception ex)
            {
                objDataWrapper.RollbackTransaction(DataWrapper.CloseConnection.YES);
                throw (new Exception("Error While Activate and Deactivate Record.", ex.InnerException));
            }
            finally { objDataWrapper.Dispose(); }

            return returnValue;
        }

        public int MaintainTrans()
        {
            throw new NotImplementedException();
        }

        public int MaintainTrans(DataWrapper objDataWrapper, Cms.Model.Maintenance.ClsTransactionInfo objTransaction)
        {
            //throw new NotImplementedException();
            const string TRANSACTIONSTOREDPROC = "Proc_InsertTransactionLog";
            //clearing parameters that may be set by user to pass to No-Query
            objDataWrapper.ClearParameteres();
            //storing command type set by user in temporary variable.
            CommandType cmdType = objDataWrapper.CommandType;
            //Executing transaction log stored procedure
            objDataWrapper.CommandType = CommandType.StoredProcedure;
            DateTime RecordDate = DateTime.Now;

            objDataWrapper.AddParameter("@TRANS_TYPE_ID", objTransaction.TRANS_TYPE_ID);
            objDataWrapper.AddParameter("@RECORD_DATE_TIME", RecordDate);
            objDataWrapper.AddParameter("@CLIENT_ID", objTransaction.CLIENT_ID);
            objDataWrapper.AddParameter("@TRANS_DESC", objTransaction.TRANS_DESC);
            if (objTransaction.CHANGE_XML != null)
            {
                if (!objTransaction.CHANGE_XML.Trim().Equals(""))
                    objDataWrapper.AddParameter("@CHANGE_XML", objTransaction.CHANGE_XML);
                else
                    objDataWrapper.AddParameter("@CHANGE_XML", System.DBNull.Value);
            }
            else
                objDataWrapper.AddParameter("@CHANGE_XML", objTransaction.CHANGE_XML);

            objDataWrapper.AddParameter("@POLICY_ID", objTransaction.POLICY_ID);
            objDataWrapper.AddParameter("@POLICY_VER_TRACKING_ID", objTransaction.POLICY_VER_TRACKING_ID);
            objDataWrapper.AddParameter("@RECORDED_BY", objTransaction.RECORDED_BY);
            objDataWrapper.AddParameter("@RECORDED_BY_NAME", objTransaction.RECORDED_BY_NAME);
            objDataWrapper.AddParameter("@ENTITY_ID", objTransaction.ENTITY_ID);
            objDataWrapper.AddParameter("@ENTITY_TYPE", objTransaction.ENTITY_TYPE);
            objDataWrapper.AddParameter("@IS_COMPLETED", objTransaction.IS_COMPLETED);
            objDataWrapper.AddParameter("@APP_ID", objTransaction.APP_ID);
            objDataWrapper.AddParameter("@APP_VERSION_ID", objTransaction.APP_VERSION_ID);
            objDataWrapper.AddParameter("@QUOTE_ID", objTransaction.QUOTE_ID);
            objDataWrapper.AddParameter("@QUOTE_VERSION_ID", objTransaction.QUOTE_VERSION_ID);
            objDataWrapper.AddParameter("@CUSTOM_INFO", objTransaction.CUSTOM_INFO);
            objDataWrapper.AddParameter("@LANG_ID", MODEL_LANG_ID);
            objDataWrapper.AddParameter("@ADDITIONAL_INFO", objTransaction.ADDITIONAL_INFO); // Added by Charles on 21-Apr-10 for Multilingual Implementation of Transaction Log

            SqlParameter objParam = (SqlParameter)objDataWrapper.AddParameter("@RETVAL", SqlDbType.Int, ParameterDirection.ReturnValue);
            objDataWrapper.ExecuteNonQuery(TRANSACTIONSTOREDPROC);

            objTransaction.TransID = Convert.ToInt32(objParam.Value);

            /*
            if (SetID != null)
            {
                SetID(objTransaction.TransID);
            }
                this.TransactionIDs=objTransaction.TransID.ToString();
            if (SetEndorsementIDs!=null)
                SetEndorsementIDs(this.TransactionIDs);
            */

            //Restoring command type set by user
            objDataWrapper.CommandType = cmdType;
            return objTransaction.TransID;

        }
        #endregion

        /// <summary>
        /// Generate the transaction XML for Inserts
        /// </summary>
        /// <param name="objModel"></param>
        /// <returns></returns>
        public string GenerateTransactionLogXML_New(bool IsInsert)
        {
            XmlDocument doc = new XmlDocument();
            //Get the Transaction XML from the object
            string strXML = this.TransactLabel;
            if (strXML.Trim().Length == 0)
            {
                throw new Exception("No entries found in the Transaction Log XML.");

            }//if (strXML.Trim().Length == 0)
            doc.LoadXml(strXML);//Load the TransactLabel resource xml file.
            XmlElement root = doc.DocumentElement;//Declare Root XmlElement
            ICollection ColumnsNameKey = htPropertyCollection.Keys;
            //Looping through all the Property Collections
            foreach (object key in ColumnsNameKey)
            {
                String ColumnType = String.Empty;

                ColumnType = htPropertyCollection[key].GetType().Name.ToString();
                XmlNode node = root.SelectSingleNode("Map[@field='" + key.ToString() + "']");

                string OldValue = String.Empty;
                string newValue = String.Empty;
                string isChanged = String.Empty;
                string isTimePartRequierd = String.Empty;
                switch (ColumnType)
                {
                  case "EbixInt32":
                         OldValue = DefaultValues.GetIntNullFromNegative(((Cms.EbixDataTypes.EbixInt32)htPropertyCollection[key]).PrevValue).ToString();
                         newValue = DefaultValues.GetIntNullFromNegative(((Cms.EbixDataTypes.EbixInt32)htPropertyCollection[key]).CurrentValue).ToString();
                         isChanged = ((Cms.EbixDataTypes.EbixInt32)htPropertyCollection[key]).IsChanged.ToString();
                        break;
                  case "EbixDouble":
                        OldValue = DefaultValues.GetDoubleNullFromNegative(((Cms.EbixDataTypes.EbixDouble)htPropertyCollection[key]).PrevValue).ToString();//.ToString();
                        newValue = DefaultValues.GetDoubleNullFromNegative(((Cms.EbixDataTypes.EbixDouble)htPropertyCollection[key]).CurrentValue).ToString();
                        isChanged = ((Cms.EbixDataTypes.EbixDouble)htPropertyCollection[key]).IsChanged.ToString();
                        break;
                  case "EbixDecimal":
                        OldValue = DefaultValues.GetDecimalNullFromNegative(((Cms.EbixDataTypes.EbixDecimal)htPropertyCollection[key]).PrevValue).ToString();//.ToString();
                        newValue = DefaultValues.GetDecimalNullFromNegative(((Cms.EbixDataTypes.EbixDecimal)htPropertyCollection[key]).CurrentValue).ToString();
                        isChanged = ((Cms.EbixDataTypes.EbixDecimal)htPropertyCollection[key]).IsChanged.ToString();
                        break;
                        
                  case "EbixString":
                        OldValue =  ((Cms.EbixDataTypes.EbixString)htPropertyCollection[key]).PrevValue;//.ToString();
                        newValue =  ((Cms.EbixDataTypes.EbixString)htPropertyCollection[key]).CurrentValue;//.ToString();
                        isChanged = ((Cms.EbixDataTypes.EbixString)htPropertyCollection[key]).IsChanged.ToString();
                        break;
                  case "EbixDateTime":
                        OldValue = ((Cms.EbixDataTypes.EbixDateTime)htPropertyCollection[key]).PrevValue.ToString();
                        newValue = ((Cms.EbixDataTypes.EbixDateTime)htPropertyCollection[key]).CurrentValue.ToString();
                        isChanged = ((Cms.EbixDataTypes.EbixDateTime)htPropertyCollection[key]).IsChanged.ToString();
                        isTimePartRequierd = ((Cms.EbixDataTypes.EbixDateTime)htPropertyCollection[key]).IsTimePartRequired.ToString();
                        break;
                  case "EbixBoolean":
                        OldValue = ((Cms.EbixDataTypes.EbixBoolean)htPropertyCollection[key]).PrevValue.ToString();
                        newValue = ((Cms.EbixDataTypes.EbixBoolean)htPropertyCollection[key]).CurrentValue.ToString();
                        isChanged = ((Cms.EbixDataTypes.EbixBoolean)htPropertyCollection[key]).IsChanged.ToString();
                        break;
                  default:
                        OldValue = ((Cms.EbixDataTypes.EbixString)htPropertyCollection[key]).PrevValue.ToString();
                        newValue = ((Cms.EbixDataTypes.EbixString)htPropertyCollection[key]).CurrentValue.ToString();
                        isChanged = ((Cms.EbixDataTypes.EbixString)htPropertyCollection[key]).IsChanged.ToString();
                        break;

                }
                
                if (IsInsert)
                {
                    if (newValue!=null)
                        AppendAttribute(doc, node, "", newValue, ColumnType, isTimePartRequierd);
                 }
                else
                {
                    if (isChanged.ToUpper() == "TRUE" && (OldValue != null || newValue!=null))
                    {
                        if (OldValue != null && newValue != null)
                            AppendAttribute(doc, node, OldValue, newValue, ColumnType, isTimePartRequierd);
                        else if (newValue == null)
                            AppendAttribute(doc, node, OldValue, System.DBNull.Value, ColumnType, isTimePartRequierd);
                        else
                            AppendAttribute(doc, node, System.DBNull.Value, newValue, ColumnType, isTimePartRequierd);
                    }
                }
            }
            //Set Tran XML 
            if (root.HasChildNodes)
            {
                //Remove nodes which does not have OldValue, NewValue attributes
                for (int i = root.ChildNodes.Count-1; i >= 0; i--)
                {
                    XmlNode node = root.ChildNodes[i];
                    if (node == null) continue;
                    if ((node.Attributes["OldValue"] == null && node.Attributes["NewValue"] == null) || (node.Attributes["OldValue"].Value == "" && node.Attributes["NewValue"] == null)
                        || (node.Attributes["OldValue"].Value == "null" && node.Attributes["NewValue"].Value == "null") || (node.Attributes["OldValue"].Value == "" && node.Attributes["NewValue"].Value == "null")
                        || (node.Attributes["OldValue"].Value == "" && node.Attributes["NewValue"].Value == "")
                        )
                    {
                        root.RemoveChild(node);
                    }
                }

                strXML = doc.InnerXml;
            }
            else
            {
                //Set Tran XML to empty string
                strXML = "";
            }
            return strXML;
        }
        

        /// <summary>
        /// Generate the transaction XML for Inserts
        /// </summary>
        /// <param name="objModel"></param>
        /// <returns></returns>
       /* public string GenerateTransactionLogXML()
        {
            XmlDocument doc = new XmlDocument();

            //Get the Transaction XML from the object
            string strXML =this.TransactLabel;

            if (strXML.Trim().Length == 0)
            {
                throw new Exception("No entries found in the Transaction Log XML.");
            }

            doc.LoadXml(strXML);

            XmlElement root = doc.DocumentElement;

            //Get the Table information form the objects
            DataTable dtOld = this.TableInfo;

            int colCount = dtOld.Columns.Count;

            //Generate update statement by looping through all the columns and comparing the 
            //old and new value for each
            for (int i = 0; i < colCount; i++)
            {
                string colType = dtOld.Rows[0][i].GetType().ToString();
                object objOldVal = dtOld.Rows[0][i];
                //Get the Transaction node, if found
                string ColumnName = dtOld.Columns[i].ColumnName;
                XmlNode node = root.SelectSingleNode("Map[@field='" + dtOld.Columns[i].ColumnName + "']");
                switch (colType)
                {
                    case "System.DateTime":
                        string objOldFormatStr = "";
                        if (dtOld.Columns[i].ExtendedProperties["FORMAT_DATE"] != null && dtOld.Columns[i].ExtendedProperties["FORMAT_DATE"].ToString() != "")
                            objOldFormatStr = dtOld.Columns[i].ExtendedProperties["FORMAT_DATE"].ToString();


                        AppendAttribute(doc, node, "", dtOld.Rows[0][i], colType, "", objOldFormatStr);
                        break;
                    default:
                        if (ColumnName == "COV_DESC" && dtOld.Rows[0][i] == DBNull.Value && isColumnExist(dtOld, "COVERAGE_CODE"))
                            AppendAttribute(doc, node, "", dtOld.Rows[0]["COVERAGE_CODE"]);
                        else
                            AppendAttribute(doc, node, "", dtOld.Rows[0][i]);
                        break;
                }
            }

            //Set Tran XML 
            if (root.HasChildNodes)
            {
                //Remove nodes which does not have OldValue, NewValue attributes
                foreach (XmlNode node in root.ChildNodes)
                {
                    if ((node.Attributes["OldValue"] == null && node.Attributes["NewValue"] == null) || (node.Attributes["OldValue"].Value == "" && node.Attributes["NewValue"] == null)
                        || (node.Attributes["OldValue"].Value == "null" && node.Attributes["NewValue"].Value == "null") || (node.Attributes["OldValue"].Value == "" && node.Attributes["NewValue"].Value == "null")
                        )
                    {
                        root.RemoveChild(node);
                    }
                }

                strXML = doc.InnerXml;
            }
            else
            {
                //Set Tran XML to empty string
                strXML = "";
            }

            return strXML;

        }*/
        
        /// <summary>
        /// Appends the old and new value to a node 
        /// </summary>
        /// <param name="doc"></param>
        /// <param name="node"></param>
        /// <param name="oldValue"></param>
        /// <param name="newValue"></param>
        public void AppendAttribute(XmlDocument doc, XmlNode node, object oldValue, object newValue, string ColumnType, string isTimePartRequierd)
        {
            
           if (doc != null && node != null)
            {
                // Create an attribute hello with the value world.
                XmlAttribute OldValue = doc.CreateAttribute("OldValue");
                XmlAttribute NewValue = doc.CreateAttribute("NewValue");
                if (ColumnType == "EbixDateTime" && isTimePartRequierd.ToUpper() == "FALSE")
                  
                {
                    string oldValStr = "", newValStr = "";
                    if (oldValue.ToString().IndexOf(" ") != -1)
                    {
                        int oldIndex = oldValue.ToString().IndexOf(" ");
                        oldValStr = oldValue.ToString().Substring(0, oldIndex);
                    }
                    OldValue.Value = oldValue == System.DBNull.Value ? "null" : oldValStr;
                    int newIndex = newValue.ToString().IndexOf(" ");
                    newValStr = newValue.ToString().Substring(0, newIndex);
                    NewValue.Value = newValue == System.DBNull.Value ? "null" : newValStr;
                }
                else
                {
                    OldValue.Value = oldValue == System.DBNull.Value ? "null" : oldValue.ToString();
                    NewValue.Value = newValue == System.DBNull.Value ? "null" : newValue.ToString(); ;
                }
                node.Attributes.SetNamedItem(OldValue);
                node.Attributes.SetNamedItem(NewValue);
            }
        }

        /// <summary>
        /// Appends the old and new value to a node of Date Column
        /// </summary>
        /// <param name="doc"></param>
        /// <param name="node"></param>
        /// <param name="oldValue"></param>
        /// <param name="newValue"></param>
        public void AppendAttribute(XmlDocument doc, XmlNode node, object oldValue, object newValue, string newColType, string oldFormat, string newFormat)
        {
            if (doc != null && node != null)
            {
                // Create an attribute hello with the value world.
                XmlAttribute OldValue = doc.CreateAttribute("OldValue");
                XmlAttribute NewValue = doc.CreateAttribute("NewValue");

                string oldValStr = "", newValStr = "";

                oldValStr = oldValue.ToString();
                newValStr = newValue.ToString();

                //checking whether the datecolumn has to be formatted or not 
                switch (newColType)
                {
                    case "System.DateTime":
                        if (!oldFormat.Equals("N"))
                            if (!oldValue.ToString().Equals(""))
                                if (oldValue.ToString().IndexOf(" ") != -1)
                                {
                                    int oldIndex = oldValue.ToString().IndexOf(" ");
                                    oldValStr = oldValue.ToString().Substring(0, oldIndex);
                                }

                        if (!newFormat.Equals("N"))
                            if (!newValue.ToString().Equals(""))
                                if (newValue.ToString().IndexOf(" ") != -1)
                                {
                                    int newIndex = newValue.ToString().IndexOf(" ");
                                    newValStr = newValue.ToString().Substring(0, newIndex);
                                }
                        break;

                }

                OldValue.Value = oldValue == System.DBNull.Value ? "null" : oldValStr;
                node.Attributes.SetNamedItem(OldValue);

                NewValue.Value = newValue == System.DBNull.Value ? "null" : newValStr;
                node.Attributes.SetNamedItem(NewValue);
            }
        }

        public bool isColumnExist(DataTable myTable, string ColumnName)
        {
            foreach (DataColumn cl in myTable.Columns)
            {
                if (cl.ColumnName == ColumnName)
                    return true;
            }
            return false;
        }
        #region  
        //Decrypt a string into a string using a password 

        private string DecryptString(string strText)
        {
            string Password = "EBIXINDIA";
            // First  need to turn the input string into a byte array. 
            // We presume that Base64 encoding was used 
            if (strText.Trim() == "") return "";
            byte[] cipherBytes = Convert.FromBase64String(strText);

            // Then, need to turn the password into Key and IV 
            // here using salt to make it harder to guess our key using a dictionary attack - 
            // trying to guess a password by enumerating all possible words. 

            PasswordDeriveBytes pdb = new PasswordDeriveBytes(Password, new byte[] { 0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76 });

            // Now get the key/IV and do the decryption using the function that accepts byte arrays. 
            // Using PasswordDeriveBytes object we are first getting 32 bytes for the Key 
            // (the default Rijndael key length is 256bit = 32bytes) and then 16 bytes for the IV. 
            // IV should always be the block size, which is by default 16 bytes (128 bit) for Rijndael. 

            byte[] decryptedData = Decrypt(cipherBytes, pdb.GetBytes(32), pdb.GetBytes(16));

            // Now we need to turn the resulting byte array into a string. 
            // We are going to be using Base64 encoding that is designed exactly for what we are using 

            return System.Text.Encoding.Unicode.GetString(decryptedData);
        }
        // Decrypt a byte array into a byte array using a key and an IV 

        private static byte[] Decrypt(byte[] cipherData, byte[] Key, byte[] IV)
        {
            // Create a MemoryStream that is going to accept the decrypted bytes 

            MemoryStream ms = new MemoryStream();

            // Create a symmetric algorithm. 
            // We are going to use Rijndael because it is strong and available on all platforms. 
            Rijndael alg = Rijndael.Create();
            // Now set the key and the IV. 
            // We need the IV (Initialization Vector) because the algorithm is operating in its default 
            // mode called CBC (Cipher Block Chaining). The IV is XORed with the first block (8 byte) 
            // of the data after it is decrypted, and then each decrypted block is XORed with the previous 
            // cipher block. This is done to make encryption more secure. 

            alg.Key = Key;
            alg.IV = IV;

            // Create a CryptoStream through which we are going to be pumping our data. 
            // CryptoStreamMode.Write means that we are going to be writing data to the stream 
            // and the output will be written in the MemoryStream we have provided. 

            CryptoStream cs = new CryptoStream(ms, alg.CreateDecryptor(), CryptoStreamMode.Write);
            // Write the data and make it do the decryption 
            cs.Write(cipherData, 0, cipherData.Length);

            // Close the crypto stream (or do FlushFinalBlock). 
            // This will tell it that we have done our decryption and there is no more data coming in, 
            // and it is now remove the padding and finalize the decryption process. 

            cs.Close();

            // Now get the decrypted data from the MemoryStream. 
            byte[] decryptedData = ms.ToArray();
            return decryptedData;

        }
        #endregion
    }
    
    
}
