
/****** Object:  StoredProcedure [dbo].[PROC_MIG_IL_INSERT_POLICY_RISK_DETAILS]    Script Date: 12/02/2011 16:17:57 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROC_MIG_IL_INSERT_POLICY_RISK_DETAILS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROC_MIG_IL_INSERT_POLICY_RISK_DETAILS]
GO

/****** Object:  StoredProcedure [dbo].[PROC_MIG_IL_INSERT_POLICY_RISK_DETAILS]    Script Date: 12/02/2011 16:17:57 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/*----------------------------------------------------------                                                              
Proc Name             : [DBO].[PROC_MIG_IL_INSERT_POLICY_RISK_DETAILS]                                                          
Created by            : Pradeep  Kushwaha
Date                  : OCT 10 2011
Purpose               : Insert policy Risk Details
Used In               : INITIAL LOAD                 
------------------------------------------------------------                                                              
Date     Review By          Comments                                 
                        
drop Proc [PROC_MIG_IL_INSERT_POLICY_RISK_DETAILS]    1338                                             
------   ------------       -------------------------*/                                                               
--                                 
         
CREATE PROCEDURE [dbo].[PROC_MIG_IL_INSERT_POLICY_RISK_DETAILS]     
        
 @IMPORT_REQUEST_ID INT        
     
AS                                  
BEGIN                           
      
 SET NOCOUNT ON; 
 
	DECLARE @ERROR_NUMBER    INT  
	DECLARE @ERROR_SEVERITY  INT  
	DECLARE @ERROR_STATE     INT  
	DECLARE @ERROR_PROCEDURE VARCHAR(512)  
	DECLARE @ERROR_LINE    INT  
	DECLARE @ERROR_MESSAGE   NVARCHAR(MAX)  
 
BEGIN TRY  
  
		 DECLARE @CUSTOMER_ID INT  
		 DECLARE @POLICY_ID INT  
		 DECLARE @POLICY_VERSION_ID INT  
		 DECLARE @POLICY_LOB INT  
		 DECLARE @APPLICANT_ID INT  
		 DECLARE @APPLICANT_TYPE INT 
		 DECLARE @LOCATION_ID INT  
		 DECLARE @IMPORT_SERIAL_NO INT     
		 DECLARE @MAX_RECORD_COUNT INT       
		 DECLARE @LOOP_CUST_CODE NVARCHAR(50)   
		 DECLARE @LOOP_CUST_STATUS NVARCHAR(2)   
		 DECLARE @COUNTER INT  =1  
		 DECLARE @ERROR_NO   INT =0  
		 DECLARE @COUNT INT  =0
	     DECLARE @RISK_ID INT  
	     DECLARE @APPLICANT_CODE NVARCHAR(50)
	     DECLARE @MAIN_INSURED NVARCHAR(50)
	     DECLARE @IS_SPOUSE_OR_CHILD INT 
		 DECLARE @LOCATION_CODE NVARCHAR(50)
	     
	     DECLARE @IMPORT_FILE_NAME NVARCHAR(50)         
		 DECLARE @IMPORT_POLICY_FILE_TYPE INT = 14939 -- FOR POLICY FILE TYPE      
		 DECLARE @IMPORT_RISK_FILE_TYPE INT = 15008 -- FOR RISK INFO
		 DECLARE @LOOP_POLICY_SEQUANCE_NO INT            
		 DECLARE @LOOP_END_SEQUANCE_NO INT      
		 DECLARE @LOOP_RISK_SEQUENCE INT
		 DECLARE @PROTECTIVE_DEVICE_ID INT 	
		 DECLARE @LOCATION_NUMBER INT 
		 DECLARE @ITEM_NUMBER INT	
		 DECLARE @MAIN_INSURED_ID INT 
		 DECLARE @PROCESS_TYPE INT
		CREATE TABLE #TempRISK(
		ID INT IDENTITY(1,1),
		IMPORT_REQUEST_ID INT,
		IMPORT_SERIAL_NO INT,
		POLICY_SEQUANCE_NO INT NULL,         
		END_SEQUANCE_NO INT NULL,        
		RISK_SEQUENCE INT NULL   
		
		)
		
		INSERT INTO #TempRISK 
		(
				IMPORT_REQUEST_ID,
				IMPORT_SERIAL_NO,
				POLICY_SEQUANCE_NO,
				END_SEQUANCE_NO,
				RISK_SEQUENCE
		)	
		(	
		SELECT  IMPORT_REQUEST_ID,
				IMPORT_SERIAL_NO,
				POLICY_SEQUENCE_NO,
				END_SEQUENCE_NO,
				RISK_SEQUENCE_NO
		FROM MIG_IL_POLICY_RISK_DETAILS (NOLOCK) 
		WHERE IMPORT_REQUEST_ID =@IMPORT_REQUEST_ID AND HAS_ERRORS = 0
		)
		
		SELECT @MAX_RECORD_COUNT = COUNT(ID) FROM #TempRISK
		
		
		------------------------------------            
	    -- GET FILE NAME      
	    ------------------------------------         
	   IF(@MAX_RECORD_COUNT>0)      
	   BEGIN      
	         
		SELECT @IMPORT_FILE_NAME = SUBSTRING(ISNULL(DISPLAY_FILE_NAME,''),1,9)       
		FROM  MIG_IL_IMPORT_REQUEST_FILES      
		WHERE IMPORT_REQUEST_ID  = @IMPORT_REQUEST_ID AND      
			  IMPORT_FILE_TYPE   = @IMPORT_RISK_FILE_TYPE        
	         
	   END      
		
	
		--SELECT * FROM #TempRISK
		WHILE (@COUNTER<=@MAX_RECORD_COUNT)
		BEGIN 


		 
			SET @ERROR_NO=0 
			SET @APPLICANT_ID=0    
			SET @CUSTOMER_ID=0      
			SET @POLICY_ID=0      
			SET @POLICY_VERSION_ID=0      
			SET @RISK_ID=0
			SET @LOCATION_ID=0
			SET @APPLICANT_CODE=NULL
			SET @LOCATION_CODE=NULL
			SET @PROTECTIVE_DEVICE_ID=0
			SET @LOCATION_NUMBER=0
			SET @ITEM_NUMBER=0
			SET @IS_SPOUSE_OR_CHILD=0
			SET @MAIN_INSURED_ID=NULL
			SET @PROCESS_TYPE=0
			SELECT       
			@IMPORT_SERIAL_NO            = IMPORT_SERIAL_NO ,          
			@LOOP_POLICY_SEQUANCE_NO     = POLICY_SEQUANCE_NO  ,        
			@LOOP_END_SEQUANCE_NO        = END_SEQUANCE_NO,          
			@LOOP_RISK_SEQUENCE          = RISK_SEQUENCE	
			FROM   #TempRISK (NOLOCK) WHERE ID   = @COUNTER 
			
		   -------------------------------------------------------            
		   -- GET CUSTOMER ID, POLICY ID , POLICY VERSION ID   AND LOB ID   
		   -------------------------------------------------------       
		   SELECT @CUSTOMER_ID			= CUSTOMER_ID ,      
				  @POLICY_ID			= POLICY_ID,      
				  @POLICY_VERSION_ID    = POLICY_VERSION_ID ,  
				  @POLICY_LOB           = LOB_ID ,
				  @PROCESS_TYPE			= PROCESS_TYPE  --- Change   
		   FROM   MIG_IL_IMPORT_SUMMARY      
		   WHERE  POLICY_SEQUENTIAL       = @LOOP_POLICY_SEQUANCE_NO AND      
				  ENDORSEMENT_SEQUENTIAL  = @LOOP_END_SEQUANCE_NO    AND 
				  FILE_TYPE				  = @IMPORT_POLICY_FILE_TYPE AND      
				  [FILE_NAME]			  = @IMPORT_FILE_NAME        AND      
				  IS_ACTIVE				  = 'Y'      
	    
	    
	    -------------------------------------------------------            
		   -- GET @RISK_ID -- FOR ENDORESMENT POLICY 
		   -------------------------------------------------------       
		   SELECT @RISK_ID				  = IMPORTED_RECORD_ID  
		   FROM   MIG_IL_IMPORT_SUMMARY      
		   WHERE  POLICY_SEQUENTIAL       = @LOOP_POLICY_SEQUANCE_NO AND      
				  ENDORSEMENT_SEQUENTIAL  = @LOOP_END_SEQUANCE_NO    AND 
				  FILE_TYPE				  = @IMPORT_RISK_FILE_TYPE AND      
				  [FILE_NAME]			  = @IMPORT_FILE_NAME        AND      
				  IS_ACTIVE				  = 'Y'      
				  
        -- CHECK WHETHER APPLICATION/POLICY EXISTS OR NOT
		------------------------------------------------------- 
		IF(@CUSTOMER_ID IS NULL OR @CUSTOMER_ID='' OR @CUSTOMER_ID=0)
         SET @ERROR_NO =53 -- Application/Policy does not exists
        ELSE
		 BEGIN 
			 
			SELECT @APPLICANT_CODE=APPLICANT_CO_APPLICANTS,
		           @LOCATION_CODE=LOCATION_CODE,
		           @LOCATION_NUMBER=LOCATION_NUMBER,
				   @ITEM_NUMBER =ITEM_NUMBER	, 
				   @MAIN_INSURED= MAIN_INSURED,
				   @IS_SPOUSE_OR_CHILD=IS_SPOUSE_OR_CHILD 
				   
		    FROM MIG_IL_POLICY_RISK_DETAILS WITH(NOLOCK) 
		    WHERE IMPORT_REQUEST_ID = @IMPORT_REQUEST_ID AND 
		          IMPORT_SERIAL_NO  = @IMPORT_SERIAL_NO 
		    
		    SELECT @APPLICANT_ID=PAL.APPLICANT_ID ,
		           @APPLICANT_TYPE=CAL.APPLICANT_TYPE
		    FROM POL_APPLICANT_LIST PAL WITH(NOLOCK)  INNER JOIN
		         CLT_APPLICANT_LIST CAL WITH(NOLOCK) ON  PAL.CUSTOMER_ID=CAL.CUSTOMER_ID AND PAL.APPLICANT_ID=CAL.APPLICANT_ID
		    WHERE PAL.CUSTOMER_ID=@CUSTOMER_ID AND PAL.POLICY_ID =@POLICY_ID  AND PAL.POLICY_VERSION_ID=@POLICY_VERSION_ID AND  CAL.CONTACT_CODE=@APPLICANT_CODE
		    
		 
		 
		  IF(@POLICY_LOB IN(9,26))
		  BEGIN 
		
			 -------------------------------------------------------
			 --INSERT RISK DETAILS IN TO RISK MAIN TABLE FROM STAGING TABLE		
			 -------------------------------------------------------		
							    
		    SELECT @LOCATION_ID=LOCATION_ID 
		    FROM POL_LOCATIONS WITH(NOLOCK) 
		    WHERE CUSTOMER_ID=@CUSTOMER_ID AND POLICY_ID=@POLICY_ID AND POLICY_VERSION_ID=@POLICY_VERSION_ID AND LOC_NUM=CAST(@LOCATION_CODE AS BIGINT)
		    
		    IF(@LOCATION_ID IS NULL OR @LOCATION_ID=0)
			BEGIN    
				SET @ERROR_NO =110 --  Location does not exists.
			END 
			ELSE IF EXISTS(SELECT 1 FROM POL_PERILS WITH(NOLOCK) 
							WHERE CUSTOMER_ID=@CUSTOMER_ID AND POLICY_ID=@POLICY_ID AND LOCATION=@LOCATION_ID)
				SET @ERROR_NO =127 -- Risk Location already exists.
			ELSE  IF((SELECT  COUNT(*) FROM POL_PERILS WITH(NOLOCK)
					  WHERE CUSTOMER_ID=@CUSTOMER_ID AND POLICY_ID=@POLICY_ID   and POLICY_VERSION_ID=@POLICY_VERSION_ID 
							AND LOCATION_NUMBER=@LOCATION_NUMBER AND ITEM_NUMBER=@ITEM_NUMBER AND IS_ACTIVE='Y')>=1 ) 
			BEGIN				
				SET @ERROR_NO =128 -- Combination of Location Number and Item Number not allowed
			END	
			
			
			
			IF(@ERROR_NO=0)      
			BEGIN 
				
			    
				IF(@RISK_ID IS NULL OR @RISK_ID=0) -- FOR NEW RECORD 
				BEGIN
			    
					SELECT  @RISK_ID=ISNULL(MAX(PERIL_ID),0)+1 FROM POL_PERILS  WITH (NOLOCK) WHERE CUSTOMER_ID=@CUSTOMER_ID AND POLICY_ID=@POLICY_ID      
					    
					INSERT INTO POL_PERILS(                          
					CUSTOMER_ID	,						                            
					POLICY_ID	,
					POLICY_VERSION_ID	,
					PERIL_ID	,
					LOCATION	,
					CITY	,
					[STATE]	,
					ZIP	,
					CATEGORY	,
					CONSTRUCTION	,
					ACTIVITY_TYPE	,
					VR	,
					LMI	,
					MRI	,
					TYPE	,
					MULTIPLE_DEDUCTIBLE	,
					ASSIST24	,
					IS_ACTIVE	,
					CREATED_BY	,
					CREATED_DATETIME	,
					MODIFIED_BY	,
					LAST_UPDATED_DATETIME	,
					RAWVALUES	,
					REMARKS	,
					PARKING_SPACES	,
					CLAIM_RATIO	,
					RAW_MATERIAL_VALUE	,
					CONTENT_VALUE	,
					BONUS	,
					LOCATION_NUMBER	,
					ITEM_NUMBER	,
					ACTUAL_INSURED_OBJECT	,
					IL_RISK_ID_LINK_WITH_CLAIM,
					OCCUPANCY,
					BUILDING,
					LOSS
					)
					SELECT 
					@CUSTOMER_ID,
					@POLICY_ID,
					@POLICY_VERSION_ID,
					@RISK_ID,
					@LOCATION_ID,			
					CITY,
					STATE,
					ZIP_CODE,		    
					RUBRICA,
					CONSTRUCTION,			
					ACTIVITY_TYPE,			
					VALUE_AT_RISK,
					MAXIMUM_LIMIT,
					MRI_VALUE,
					TYPE,			
					CASE WHEN MULTIPLE_DEDUCTIBLE='Y' THEN '10963' WHEN MULTIPLE_DEDUCTIBLE='N' THEN '10964' ELSE '' END	 ,			
					CASE WHEN [24HOUR_ASSISTANCE]='10963' THEN 10963 ELSE 10964 END,			
					'Y',
					dbo.fun_GetDefaultUserID(),
					GETDATE(),
					MODIFIED_BY	,
					LAST_UPDATED_DATETIME	,
					CASE WHEN CONTENTS_RAW_VALUES=10963 THEN 'Y' ELSE 'N' END,	
					REMARKS,
					NO_PARKING_SPACE,
					CLAIM_RATIO,
					RAW_MATERIAL_VALUE,
					CONTENTS_VALUE,
					BONUS,
					LOCATION_NUMBER,
					ITEM_NUMBER	,
					ACTUAL_INSURED_OBJECT	,
					RISK_ID_LINK_WITH_CLAIM			,
					OCCUPIED_AS,
					BUILDING_VALUE,
					POSSIBLE_MAX_LOSS
					FROM MIG_IL_POLICY_RISK_DETAILS WITH(NOLOCK)
					WHERE IMPORT_REQUEST_ID = @IMPORT_REQUEST_ID AND
						  IMPORT_SERIAL_NO  = @IMPORT_SERIAL_NO 
						  
					
					
					--INSERT INTO PROTECTIVE DEVICES
					SELECT  @PROTECTIVE_DEVICE_ID=ISNULL(MAX(PROTECTIVE_DEVICE_ID),0)+1 
					FROM POL_PROTECTIVE_DEVICES WITH (NOLOCK)	  
					
					INSERT INTO POL_PROTECTIVE_DEVICES(
					CUSTOMER_ID,						
					POLICY_ID,
					POLICY_VERSION_ID,
					RISK_ID,
					PROTECTIVE_DEVICE_ID,
					FIRE_EXTINGUISHER,
					SPL_FIRE_EXTINGUISHER_UNIT,
					MANUAL_FOAM_SYSTEM,
					FOAM,
					INERT_GAS_SYSTEM,
					MANUAL_INERT_GAS_SYSTEM,
					COMBAT_CARS,
					CORRAL_SYSTEM,
					ALARM_SYSTEM,
					FREE_HYDRANT,
					SPRINKLERS,
					SPRINKLERS_CLASSIFICATION,
					FIRE_FIGHTER,
					QUESTIION_POINTS,
					IS_ACTIVE,
					CREATED_BY,
					CREATED_DATETIME,
					MODIFIED_BY,
					LAST_UPDATED_DATETIME,
					LOCATION_ID
					)
					SELECT 
					@CUSTOMER_ID,
					@POLICY_ID,
					@POLICY_VERSION_ID,
					@RISK_ID,
					@PROTECTIVE_DEVICE_ID,
					CASE WHEN FIRE_EXTINGUISHER='Y' THEN 10963 ELSE 10964 END,
					CASE WHEN SPECIAL_FIRE_EXTINGUISHER_UNIT='Y' THEN 10963 ELSE 10964 END,
					CASE WHEN MANUAL_FOAM_SYSTEM='Y' THEN 10963 ELSE 10964 END,
					CASE WHEN FOAM='Y' THEN 10963 ELSE 10964 END ,
					CASE WHEN INERT_GAS_SYSTEM='Y' THEN 10963 ELSE 10964 END ,
					CASE WHEN MANUAL_INERT_GAS_SYSTEM='Y' THEN 10963 ELSE 10964 END  ,
					CASE WHEN COMBAT_CARS='Y' THEN 10963 ELSE 10964 END  ,
					CASE WHEN CORRAL_SYSTEM='Y' THEN 10963 ELSE 10964 END  ,
					CASE WHEN ALARM_SYSTEM='Y' THEN 10963 ELSE 10964 END  ,
					CASE WHEN FREE_HYDRANTS='Y' THEN 10963 ELSE 10964 END  ,
					CASE WHEN SPRINKLERS='Y' THEN 10963 ELSE 10964 END  ,
					SPRINKLER_CLASSIFICATION,
					FIRE_FIGHTERS,
					QUESTION_POINTS,
					'Y',
					dbo.fun_GetDefaultUserID(),
					GETDATE(),
					NULL,
					NULL,
					@LOCATION_ID
				FROM MIG_IL_POLICY_RISK_DETAILS WITH(NOLOCK)
				WHERE IMPORT_REQUEST_ID = @IMPORT_REQUEST_ID AND
					  IMPORT_SERIAL_NO  = @IMPORT_SERIAL_NO 
				
				END
				--========================================================
				-- FOR POLICY ENDORSEMENT PROCESS ADDED BY PRADEEP
				--========================================================
				ELSE IF(@PROCESS_TYPE=3 AND @RISK_ID>0)
				BEGIN
					------------------------------------         
					-- UPDATE IMPORT DETAILS      
					------------------------------------               
					UPDATE MIG_IL_POLICY_RISK_DETAILS      
					SET    CUSTOMER_ID       = @CUSTOMER_ID,      
					POLICY_ID         = @POLICY_ID,      
					POLICY_VERSION_ID = @POLICY_VERSION_ID,      
					IS_PROCESSED      = 'Y'      
					WHERE  IMPORT_REQUEST_ID = @IMPORT_REQUEST_ID AND      
					IMPORT_SERIAL_NO  = @IMPORT_SERIAL_NO        
					
					-- UPDATE EXISTING DETAILS RISK RECORD
				   UPDATE POL_PERILS               
				   SET	   
						 CITY							=	CASE WHEN T.CITY IS NULL OR T.CITY='' THEN PP.CITY ELSE T.CITY END 		
						,[STATE]						=	CASE WHEN T.STATE IS NULL OR T.STATE=0 THEN PP.[STATE] ELSE T.STATE END 
						,ZIP							=	CASE WHEN T.ZIP_CODE IS NULL OR T.ZIP_CODE='0' THEN PP.ZIP ELSE T.ZIP_CODE END 		    
						,CATEGORY						=	CASE WHEN T.RUBRICA IS NULL OR T.RUBRICA='' THEN PP.CATEGORY ELSE T.RUBRICA END 
						,CONSTRUCTION					=	CASE WHEN T.CONSTRUCTION IS NULL OR T.CONSTRUCTION=0 THEN PP.CONSTRUCTION ELSE T.CONSTRUCTION END 			
						,ACTIVITY_TYPE					=	CASE WHEN T.ACTIVITY_TYPE IS NULL OR T.ACTIVITY_TYPE=0 THEN PP.ACTIVITY_TYPE ELSE T.ACTIVITY_TYPE END 			
						,VR								=	CASE WHEN T.VALUE_AT_RISK IS NULL OR T.VALUE_AT_RISK=0 THEN PP.VR ELSE T.VALUE_AT_RISK END 
						,LMI							=	CASE WHEN T.MAXIMUM_LIMIT IS NULL OR T.MAXIMUM_LIMIT=0 THEN PP.LMI ELSE T.MAXIMUM_LIMIT END 
						,MRI							=	CASE WHEN T.MRI_VALUE IS NULL OR T.MRI_VALUE=0 THEN PP.MRI ELSE T.MRI_VALUE END 
						,TYPE							=	CASE WHEN T.TYPE IS NULL OR T.TYPE=0 THEN PP.[TYPE] ELSE T.TYPE END 			
						,MULTIPLE_DEDUCTIBLE			=	CASE WHEN T.MULTIPLE_DEDUCTIBLE IS NULL OR T.MULTIPLE_DEDUCTIBLE=0 THEN PP.MULTIPLE_DEDUCTIBLE ELSE T.MULTIPLE_DEDUCTIBLE END 	
						,ASSIST24						=	CASE WHEN T.ASSIST24 IS NULL OR T.ASSIST24='' THEN PP.ASSIST24 ELSE T.ASSIST24 END 			
						,IS_ACTIVE						=	T.IS_DEACTIVATE
						,MODIFIED_BY					=	T.MODIFIED_BY	
						,LAST_UPDATED_DATETIME			=	T.LAST_UPDATED_DATETIME	
						,RAWVALUES						=	CASE WHEN T.RAWVALUES IS NULL OR T.RAWVALUES=0 THEN PP.RAWVALUES ELSE T.RAWVALUES END 	
						,REMARKS						=	CASE WHEN T.REMARKS IS NULL OR T.REMARKS='' THEN PP.REMARKS ELSE T.REMARKS END 
						,PARKING_SPACES					=	CASE WHEN T.NO_PARKING_SPACE IS NULL OR T.NO_PARKING_SPACE=0 THEN PP.PARKING_SPACES ELSE T.NO_PARKING_SPACE END 
						,CLAIM_RATIO					=	CASE WHEN T.CLAIM_RATIO IS NULL OR T.CLAIM_RATIO=0 THEN PP.CLAIM_RATIO ELSE T.CLAIM_RATIO END 
						,RAW_MATERIAL_VALUE				=	CASE WHEN T.RAW_MATERIAL_VALUE IS NULL OR T.RAW_MATERIAL_VALUE=0 THEN PP.RAW_MATERIAL_VALUE ELSE T.RAW_MATERIAL_VALUE END 
						,CONTENT_VALUE					=	CASE WHEN T.CONTENTS_VALUE IS NULL OR T.CONTENTS_VALUE=0 THEN PP.CONTENT_VALUE ELSE T.CONTENTS_VALUE END 
						,BONUS							=	CASE WHEN T.BONUS IS NULL OR T.BONUS='' THEN PP.BONUS ELSE T.BONUS END 
						,LOCATION_NUMBER				=	CASE WHEN T.LOCATION_NUMBER IS NULL OR T.LOCATION_NUMBER=0 THEN PP.LOCATION_NUMBER ELSE T.LOCATION_NUMBER END 
						,ITEM_NUMBER					=	CASE WHEN T.ITEM_NUMBER IS NULL OR T.ITEM_NUMBER=0 THEN PP.ITEM_NUMBER ELSE T.ITEM_NUMBER END 	
						,ACTUAL_INSURED_OBJECT			=	CASE WHEN T.ACTUAL_INSURED_OBJECT IS NULL OR T.ACTUAL_INSURED_OBJECT	='' THEN PP.ACTUAL_INSURED_OBJECT ELSE T.ACTUAL_INSURED_OBJECT	 END 
						,IL_RISK_ID_LINK_WITH_CLAIM		=	CASE WHEN T.RISK_ID_LINK_WITH_CLAIM IS NULL OR T.RISK_ID_LINK_WITH_CLAIM=0 THEN PP.IL_RISK_ID_LINK_WITH_CLAIM ELSE T.RISK_ID_LINK_WITH_CLAIM END 			
						,OCCUPANCY						=	CASE WHEN T.OCCUPIED_AS IS NULL OR T.OCCUPIED_AS=0 THEN PP.OCCUPANCY ELSE T.OCCUPIED_AS END 
						,BUILDING						=	CASE WHEN T.BUILDING_VALUE IS NULL OR T.BUILDING_VALUE=0 THEN PP.BUILDING ELSE T.BUILDING_VALUE END 
						,LOSS							=	CASE WHEN T.POSSIBLE_MAX_LOSS IS NULL OR T.POSSIBLE_MAX_LOSS=0 THEN PP.LOSS ELSE T.POSSIBLE_MAX_LOSS END 
					 FROM POL_PERILS PP INNER JOIN
					 (
						SELECT   CUSTOMER_ID
							    ,POLICY_ID
							    ,POLICY_VERSION_ID
								,CITY
								,[STATE]
								,ZIP_CODE		    
								,RUBRICA
								,CONSTRUCTION			
								,ACTIVITY_TYPE			
								,VALUE_AT_RISK
								,MAXIMUM_LIMIT
								,MRI_VALUE
								,[TYPE]			
								,CASE WHEN MULTIPLE_DEDUCTIBLE='Y' THEN '10963' WHEN MULTIPLE_DEDUCTIBLE='N' THEN '10964' ELSE '' END AS MULTIPLE_DEDUCTIBLE	
								,CASE WHEN [24HOUR_ASSISTANCE]='10963' THEN 10963 ELSE 10964 END AS ASSIST24			
								,CASE WHEN IS_DEACTIVATE ='Y' THEN 'N' ELSE 'Y' END AS IS_DEACTIVATE
								,dbo.fun_GetDefaultUserID() AS MODIFIED_BY	
								,GETDATE() AS LAST_UPDATED_DATETIME	
								,CASE WHEN CONTENTS_RAW_VALUES=10963 THEN 'Y' ELSE 'N' END AS RAWVALUES	
								,REMARKS
								,NO_PARKING_SPACE
								,CLAIM_RATIO
								,RAW_MATERIAL_VALUE
								,CONTENTS_VALUE
								,BONUS
								,LOCATION_NUMBER
								,ITEM_NUMBER	
								,ACTUAL_INSURED_OBJECT	
								,RISK_ID_LINK_WITH_CLAIM			
								,OCCUPIED_AS
								,BUILDING_VALUE
								,POSSIBLE_MAX_LOSS
							   
						FROM   MIG_IL_POLICY_RISK_DETAILS 
						WHERE  IMPORT_REQUEST_ID = @IMPORT_REQUEST_ID AND 
							   IMPORT_SERIAL_NO  = @IMPORT_SERIAL_NO
						   
					 )T ON T.CUSTOMER_ID= PP.CUSTOMER_ID AND T.POLICY_ID=PP.POLICY_ID AND T.POLICY_VERSION_ID=PP.POLICY_VERSION_ID
				     
					 WHERE PP.CUSTOMER_ID =@CUSTOMER_ID AND PP.POLICY_ID=@POLICY_ID AND PP.POLICY_VERSION_ID=@POLICY_VERSION_ID AND PP.PERIL_ID=@RISK_ID
					
					-- UPDATE EXISTING DETAILS PROTECTION DEVICES RECORD
					
				   UPDATE POL_PROTECTIVE_DEVICES               
				   SET	   
						 FIRE_EXTINGUISHER 				= CASE WHEN T.FIRE_EXTINGUISHER IS NULL OR T.FIRE_EXTINGUISHER=0 THEN PPD.FIRE_EXTINGUISHER ELSE T.FIRE_EXTINGUISHER END 
						,SPL_FIRE_EXTINGUISHER_UNIT	    = CASE WHEN T.SPL_FIRE_EXTINGUISHER_UNIT IS NULL OR T.SPL_FIRE_EXTINGUISHER_UNIT=0 THEN PPD.SPL_FIRE_EXTINGUISHER_UNIT ELSE T.SPL_FIRE_EXTINGUISHER_UNIT END 
						,MANUAL_FOAM_SYSTEM				= CASE WHEN T.MANUAL_FOAM_SYSTEM IS NULL OR T.MANUAL_FOAM_SYSTEM=0 THEN PPD.MANUAL_FOAM_SYSTEM ELSE T.MANUAL_FOAM_SYSTEM END 
						,FOAM							= CASE WHEN T.FOAM IS NULL OR T.FOAM=0 THEN PPD.FOAM ELSE T.FOAM END 
						,INERT_GAS_SYSTEM				= CASE WHEN T.INERT_GAS_SYSTEM IS NULL OR T.INERT_GAS_SYSTEM=0 THEN PPD.INERT_GAS_SYSTEM ELSE T.INERT_GAS_SYSTEM END 
						,MANUAL_INERT_GAS_SYSTEM 		= CASE WHEN T.MANUAL_INERT_GAS_SYSTEM IS NULL OR T.MANUAL_INERT_GAS_SYSTEM=0 THEN PPD.MANUAL_INERT_GAS_SYSTEM ELSE T.MANUAL_INERT_GAS_SYSTEM END 
						,COMBAT_CARS 					= CASE WHEN T.COMBAT_CARS IS NULL OR T.COMBAT_CARS=0 THEN PPD.COMBAT_CARS ELSE T.COMBAT_CARS END 
						,CORRAL_SYSTEM					= CASE WHEN T.CORRAL_SYSTEM IS NULL OR T.CORRAL_SYSTEM=0 THEN PPD.CORRAL_SYSTEM ELSE T.CORRAL_SYSTEM END 
						,ALARM_SYSTEM 					= CASE WHEN T.ALARM_SYSTEM IS NULL OR T.ALARM_SYSTEM=0 THEN PPD.ALARM_SYSTEM ELSE T.ALARM_SYSTEM END 
						,FREE_HYDRANT					= CASE WHEN T.FREE_HYDRANT IS NULL OR T.FREE_HYDRANT=0 THEN PPD.FREE_HYDRANT ELSE T.FREE_HYDRANT END 
						,SPRINKLERS						= CASE WHEN T.SPRINKLERS IS NULL OR T.SPRINKLERS=0 THEN PPD.SPRINKLERS ELSE T.SPRINKLERS END 
						,SPRINKLERS_CLASSIFICATION		= CASE WHEN T.SPRINKLER_CLASSIFICATION IS NULL OR T.SPRINKLER_CLASSIFICATION =0 THEN PPD.SPRINKLERS_CLASSIFICATION ELSE T.SPRINKLER_CLASSIFICATION END 
						,FIRE_FIGHTER					= CASE WHEN T.FIRE_FIGHTERS IS NULL OR T.FIRE_FIGHTERS=0 THEN PPD.FIRE_FIGHTER ELSE T.FIRE_FIGHTERS END 
						,QUESTIION_POINTS				= CASE WHEN T.QUESTION_POINTS IS NULL OR T.QUESTION_POINTS=0 THEN PPD.QUESTIION_POINTS ELSE T.QUESTION_POINTS END 
						,IS_ACTIVE						= T.IS_ACTIVE
						,MODIFIED_BY 					= T.MODIFIED_BY
						,LAST_UPDATED_DATETIME			= T.LAST_UPDATED_DATETIME
						,LOCATION_ID					= CASE WHEN T.LOCATION_ID IS NULL OR T.LOCATION_ID=0 THEN PPD.LOCATION_ID ELSE T.LOCATION_ID END  
						
					 FROM POL_PROTECTIVE_DEVICES PPD INNER JOIN
					 (
						SELECT   CUSTOMER_ID
							    ,POLICY_ID
							    ,POLICY_VERSION_ID
								,CASE WHEN FIRE_EXTINGUISHER='Y' THEN 10963 ELSE 10964 END AS FIRE_EXTINGUISHER
								,CASE WHEN SPECIAL_FIRE_EXTINGUISHER_UNIT='Y' THEN 10963 ELSE 10964 END AS SPL_FIRE_EXTINGUISHER_UNIT
								,CASE WHEN MANUAL_FOAM_SYSTEM='Y' THEN 10963 ELSE 10964 END AS MANUAL_FOAM_SYSTEM
								,CASE WHEN FOAM='Y' THEN 10963 ELSE 10964 END  AS FOAM
								,CASE WHEN INERT_GAS_SYSTEM='Y' THEN 10963 ELSE 10964 END AS INERT_GAS_SYSTEM
								,CASE WHEN MANUAL_INERT_GAS_SYSTEM='Y' THEN 10963 ELSE 10964 END  AS MANUAL_INERT_GAS_SYSTEM
								,CASE WHEN COMBAT_CARS='Y' THEN 10963 ELSE 10964 END  AS COMBAT_CARS
								,CASE WHEN CORRAL_SYSTEM='Y' THEN 10963 ELSE 10964 END  AS CORRAL_SYSTEM
								,CASE WHEN ALARM_SYSTEM='Y' THEN 10963 ELSE 10964 END AS ALARM_SYSTEM
								,CASE WHEN FREE_HYDRANTS='Y' THEN 10963 ELSE 10964 END AS FREE_HYDRANT
								,CASE WHEN SPRINKLERS='Y' THEN 10963 ELSE 10964 END AS SPRINKLERS
								,SPRINKLER_CLASSIFICATION 
								,FIRE_FIGHTERS 
								,QUESTION_POINTS 
								,'Y' AS IS_ACTIVE
								,dbo.fun_GetDefaultUserID() AS MODIFIED_BY
								,GETDATE() AS LAST_UPDATED_DATETIME 
								,@LOCATION_ID AS LOCATION_ID
							   
						FROM   MIG_IL_POLICY_RISK_DETAILS 
						WHERE  IMPORT_REQUEST_ID = @IMPORT_REQUEST_ID AND 
							   IMPORT_SERIAL_NO  = @IMPORT_SERIAL_NO
						   
					 )T ON T.CUSTOMER_ID= PPD.CUSTOMER_ID AND T.POLICY_ID=PPD.POLICY_ID AND T.POLICY_VERSION_ID=PPD.POLICY_VERSION_ID
				     
					 WHERE PPD.CUSTOMER_ID =@CUSTOMER_ID AND PPD.POLICY_ID=@POLICY_ID AND PPD.POLICY_VERSION_ID=@POLICY_VERSION_ID AND PPD.RISK_ID=@RISK_ID
								
				END	  
			
			END
					
		END 
		--10	0116	Comprehensive Condominium
		--11	0118	Comprehensive Company
		--12	0351	General Civil Liability
		--14	0171	Diversified Risks
		--16	0115	Robbery
		--19	0114	Dwelling
		--25	0111	Traditional Fire
		--27	0173	Global of Bank
		--32	0750	Judicial Guarantee
		ELSE IF(@POLICY_LOB IN (10,11,12,14,16,19,25,27,32))
		BEGIN 
		
			
		    SELECT @LOCATION_ID=LOCATION_ID 
		    FROM POL_LOCATIONS WITH(NOLOCK) 
		    WHERE CUSTOMER_ID=@CUSTOMER_ID AND POLICY_ID=@POLICY_ID AND POLICY_VERSION_ID=@POLICY_VERSION_ID AND LOC_NUM=CAST(@LOCATION_CODE AS BIGINT)
		    
		    IF (@POLICY_LOB NOT IN(19,12,16) AND (@APPLICANT_ID IS NULL OR @APPLICANT_ID=0))
				SET @ERROR_NO =51 --  Co-applicant does not exists.  
			ELSE IF(@LOCATION_ID IS NULL OR @LOCATION_ID=0)
				SET @ERROR_NO =110 --  Location does not exists.
			ELSE IF EXISTS(SELECT 1 FROM POL_PRODUCT_LOCATION_INFO WITH(NOLOCK) 
							WHERE CUSTOMER_ID=@CUSTOMER_ID AND POLICY_ID=@POLICY_ID AND LOCATION=@LOCATION_ID)
				SET @ERROR_NO =127 -- Risk Location already exists.
			ELSE  IF((SELECT  COUNT(*) FROM POL_PRODUCT_LOCATION_INFO WITH(NOLOCK)
					  WHERE CUSTOMER_ID=@CUSTOMER_ID AND POLICY_ID=@POLICY_ID   and POLICY_VERSION_ID=@POLICY_VERSION_ID 
							AND LOCATION_NUMBER=@LOCATION_NUMBER AND ITEM_NUMBER=@ITEM_NUMBER AND IS_ACTIVE='Y')>=1 ) 
			BEGIN				
				SET @ERROR_NO =128 -- Combination of Location Number and Item Number not allowed
			END	
			
			IF(@POLICY_LOB IN (19,12,16))
				SELECT TOP 1 @APPLICANT_ID=APPLICANT_ID FROM POL_APPLICANT_LIST NOLOCK WHERE CUSTOMER_ID=@CUSTOMER_ID AND POLICY_ID=@POLICY_ID AND POLICY_VERSION_ID=@POLICY_VERSION_ID AND IS_PRIMARY_APPLICANT=1				
				
 
			
			IF(@ERROR_NO=0)      
			BEGIN     
		  	IF(@RISK_ID IS NULL OR @RISK_ID=0) -- FOR NEW RECORD 
			BEGIN
				SELECT  @RISK_ID=ISNULL(MAX(PRODUCT_RISK_ID),0)+1 
				FROM POL_PRODUCT_LOCATION_INFO  WITH (NOLOCK) 
				WHERE CUSTOMER_ID=@CUSTOMER_ID AND POLICY_ID=@POLICY_ID      
				
				INSERT INTO POL_PRODUCT_LOCATION_INFO(
				CUSTOMER_ID	,			
				POLICY_ID	,
				POLICY_VERSION_ID	,
				PRODUCT_RISK_ID	,
				LOCATION	,
				VALUE_AT_RISK	,
				BUILDING_VALUE,
				CONTENTS_VALUE	,
				RAW_MATERIAL_VALUE	,
				CONTENTS_RAW_VALUES	,
				MRI_VALUE,
				MAXIMUM_LIMIT,
				POSSIBLE_MAX_LOSS	,
				MULTIPLE_DEDUCTIBLE,
				PARKING_SPACES	,
				ACTIVITY_TYPE,
				OCCUPIED_AS	,
				CONSTRUCTION	,
				RUBRICA,
				ASSIST24	,
				REMARKS	,
				IS_ACTIVE	,
				CREATED_BY	,
				CREATED_DATETIME	,
				MODIFIED_BY	,
				LAST_UPDATED_DATETIME,
				CLAIM_RATIO	,
				BONUS	,
				CLASS_FIELD,
				LOCATION_NUMBER,
				ITEM_NUMBER	,
				ACTUAL_INSURED_OBJECT	,
				PORTABLE_EQUIPMENT,
				CO_APPLICANT_ID,
				IL_RISK_ID_LINK_WITH_CLAIM
				)
				SELECT 
				@CUSTOMER_ID,
				@POLICY_ID,
				@POLICY_VERSION_ID,
				@RISK_ID,
				@LOCATION_ID,
				VALUE_AT_RISK,
				BUILDING_VALUE,
				CONTENTS_VALUE,
				RAW_MATERIAL_VALUE,
				CASE WHEN CONTENTS_RAW_VALUES=10963 THEN 10963 ELSE 10964 END,
				MRI_VALUE,
				MAXIMUM_LIMIT,
				POSSIBLE_MAX_LOSS,
				CASE WHEN MULTIPLE_DEDUCTIBLE='Y' THEN 10963 WHEN MULTIPLE_DEDUCTIBLE='N' THEN 10964 ELSE null END	 ,
				NO_PARKING_SPACE,
				ACTIVITY_TYPE,
				OCCUPIED_AS,
				CONSTRUCTION,
				SUBSTRING(RUBRICA,1,6),
				CASE WHEN [24HOUR_ASSISTANCE]=10963 THEN 10963 ELSE  10964 END	  ,
				REMARKS,
				'Y',
				dbo.fun_GetDefaultUserID(),
				GETDATE(),
				MODIFIED_BY,
				LAST_UPDATED_DATETIME,
				CLAIM_RATIO,
				BONUS,
				CLASS_FIELD,
				LOCATION_NUMBER,
				ITEM_NUMBER,
				ACTUAL_INSURED_OBJECT,
				PORTABLE_EQUIPMENT,
				@APPLICANT_ID,
				RISK_ID_LINK_WITH_CLAIM
				FROM MIG_IL_POLICY_RISK_DETAILS WITH(NOLOCK)
				WHERE IMPORT_REQUEST_ID = @IMPORT_REQUEST_ID AND
					  IMPORT_SERIAL_NO  = @IMPORT_SERIAL_NO 
					  
					  
				SELECT  @PROTECTIVE_DEVICE_ID=ISNULL(MAX(PROTECTIVE_DEVICE_ID),0)+1 
				FROM POL_PROTECTIVE_DEVICES WITH (NOLOCK)	  
				--INSERT INTO PROTECTIVE DEVICES
				  INSERT INTO POL_PROTECTIVE_DEVICES(
					CUSTOMER_ID,						
					POLICY_ID,
					POLICY_VERSION_ID,
					RISK_ID,
					PROTECTIVE_DEVICE_ID,
					FIRE_EXTINGUISHER,
					SPL_FIRE_EXTINGUISHER_UNIT,
					MANUAL_FOAM_SYSTEM,
					FOAM,
					INERT_GAS_SYSTEM,
					MANUAL_INERT_GAS_SYSTEM,
					COMBAT_CARS,
					CORRAL_SYSTEM,
					ALARM_SYSTEM,
					FREE_HYDRANT,
					SPRINKLERS,
					SPRINKLERS_CLASSIFICATION,
					FIRE_FIGHTER,
					QUESTIION_POINTS,
					IS_ACTIVE,
					CREATED_BY,
					CREATED_DATETIME,
					MODIFIED_BY,
					LAST_UPDATED_DATETIME,
					LOCATION_ID
					)
					SELECT 
					@CUSTOMER_ID,
					@POLICY_ID,
					@POLICY_VERSION_ID,
					@RISK_ID,
					@PROTECTIVE_DEVICE_ID,
					CASE WHEN FIRE_EXTINGUISHER='Y' THEN 10963 ELSE 10964 END,
					CASE WHEN SPECIAL_FIRE_EXTINGUISHER_UNIT='Y' THEN 10963 ELSE 10964 END,
					CASE WHEN MANUAL_FOAM_SYSTEM='Y' THEN 10963 ELSE 10964 END,
					CASE WHEN FOAM='Y' THEN 10963 ELSE 10964 END ,
					CASE WHEN INERT_GAS_SYSTEM='Y' THEN 10963 ELSE 10964 END ,
					CASE WHEN MANUAL_INERT_GAS_SYSTEM='Y' THEN 10963 ELSE 10964 END  ,
					CASE WHEN COMBAT_CARS='Y' THEN 10963 ELSE 10964 END  ,
					CASE WHEN CORRAL_SYSTEM='Y' THEN 10963 ELSE 10964 END  ,
					CASE WHEN ALARM_SYSTEM='Y' THEN 10963 ELSE 10964 END  ,
					CASE WHEN FREE_HYDRANTS='Y' THEN 10963 ELSE 10964 END  ,
					CASE WHEN SPRINKLERS='Y' THEN 10963 ELSE 10964 END  ,
					SPRINKLER_CLASSIFICATION,
					FIRE_FIGHTERS,
					QUESTION_POINTS,
					'Y',
					dbo.fun_GetDefaultUserID(),
					GETDATE(),
					NULL,
					NULL,
					@LOCATION_ID
				FROM MIG_IL_POLICY_RISK_DETAILS WITH(NOLOCK)
				WHERE IMPORT_REQUEST_ID = @IMPORT_REQUEST_ID AND
					  IMPORT_SERIAL_NO  = @IMPORT_SERIAL_NO 
			END
			--========================================================
			-- FOR POLICY ENDORSEMENT PROCESS ADDED BY PRADEEP
			--========================================================
			ELSE IF(@PROCESS_TYPE=3 AND @RISK_ID>0)
			BEGIN
				------------------------------------         
				-- UPDATE IMPORT DETAILS      
				------------------------------------               
				UPDATE MIG_IL_POLICY_RISK_DETAILS      
				SET    CUSTOMER_ID       = @CUSTOMER_ID,      
				POLICY_ID         = @POLICY_ID,      
				POLICY_VERSION_ID = @POLICY_VERSION_ID,      
				IS_PROCESSED      = 'Y'      
				WHERE  IMPORT_REQUEST_ID = @IMPORT_REQUEST_ID AND      
				IMPORT_SERIAL_NO  = @IMPORT_SERIAL_NO        
				
				-- UPDATE EXISTING DETAILS RISK RECORD
				   UPDATE POL_PRODUCT_LOCATION_INFO               
				   SET	   
					 VALUE_AT_RISK				= CASE WHEN T.VALUE_AT_RISK IS NULL OR T.VALUE_AT_RISK=0 THEN PPLI.VALUE_AT_RISK ELSE T.VALUE_AT_RISK END 
					,BUILDING_VALUE				= CASE WHEN T.BUILDING_VALUE IS NULL OR T.BUILDING_VALUE=0 THEN PPLI.BUILDING_VALUE ELSE T.BUILDING_VALUE END 
					,CONTENTS_VALUE				= CASE WHEN T.CONTENTS_VALUE IS NULL OR T.CONTENTS_VALUE=0 THEN PPLI.CONTENTS_VALUE ELSE T.CONTENTS_VALUE END 
					,RAW_MATERIAL_VALUE			= CASE WHEN T.RAW_MATERIAL_VALUE IS NULL OR T.RAW_MATERIAL_VALUE=0 THEN PPLI.RAW_MATERIAL_VALUE ELSE T.RAW_MATERIAL_VALUE END 
					,CONTENTS_RAW_VALUES		= CASE WHEN T.CONTENTS_RAW_VALUES IS NULL OR T.CONTENTS_RAW_VALUES=0 THEN PPLI.CONTENTS_RAW_VALUES ELSE T.CONTENTS_RAW_VALUES END 
					,MRI_VALUE					= CASE WHEN T.MRI_VALUE IS NULL OR T.MRI_VALUE=0 THEN PPLI.MRI_VALUE ELSE T.MRI_VALUE END 
					,MAXIMUM_LIMIT				= CASE WHEN T.MAXIMUM_LIMIT IS NULL OR T.MAXIMUM_LIMIT=0 THEN PPLI.MAXIMUM_LIMIT ELSE T.MAXIMUM_LIMIT END 
					,POSSIBLE_MAX_LOSS			= CASE WHEN T.POSSIBLE_MAX_LOSS IS NULL OR T.POSSIBLE_MAX_LOSS=0 THEN PPLI.POSSIBLE_MAX_LOSS ELSE T.POSSIBLE_MAX_LOSS END 
					,MULTIPLE_DEDUCTIBLE		= CASE WHEN T.MULTIPLE_DEDUCTIBLE IS NULL OR T.MULTIPLE_DEDUCTIBLE=0 THEN PPLI.MULTIPLE_DEDUCTIBLE ELSE T.MULTIPLE_DEDUCTIBLE END 
					,PARKING_SPACES				= CASE WHEN T.NO_PARKING_SPACE IS NULL OR T.NO_PARKING_SPACE='' THEN PPLI.PARKING_SPACES ELSE T.NO_PARKING_SPACE END 
					,ACTIVITY_TYPE				= CASE WHEN T.ACTIVITY_TYPE IS NULL OR T.ACTIVITY_TYPE=0 THEN PPLI.ACTIVITY_TYPE ELSE T.ACTIVITY_TYPE END 
					,OCCUPIED_AS				= CASE WHEN T.OCCUPIED_AS IS NULL OR T.OCCUPIED_AS=0 THEN PPLI.OCCUPIED_AS ELSE T.OCCUPIED_AS END 
					,CONSTRUCTION				= CASE WHEN T.CONSTRUCTION IS NULL OR T.CONSTRUCTION=0 THEN PPLI.CONSTRUCTION ELSE T.CONSTRUCTION END 
					,RUBRICA					= CASE WHEN T.RUBRICA IS NULL OR T.RUBRICA='' THEN PPLI.RUBRICA ELSE T.RUBRICA END   
					,ASSIST24					= CASE WHEN T.ASSIST24 IS NULL OR T.ASSIST24=0 THEN PPLI.ASSIST24 ELSE T.ASSIST24 END 
					,REMARKS					= CASE WHEN T.REMARKS IS NULL OR T.REMARKS='' THEN PPLI.REMARKS ELSE T.REMARKS END   
					,IS_ACTIVE					= T.IS_DEACTIVATE
					,MODIFIED_BY				= T.MODIFIED_BY
					,LAST_UPDATED_DATETIME		= T.LAST_UPDATED_DATETIME
					,CLAIM_RATIO				= CASE WHEN T.CLAIM_RATIO IS NULL OR T.CLAIM_RATIO=0 THEN PPLI.CLAIM_RATIO ELSE T.CLAIM_RATIO END 
					,BONUS						= CASE WHEN T.BONUS IS NULL OR T.BONUS=0 THEN PPLI.BONUS ELSE T.BONUS END 
					,CLASS_FIELD				= CASE WHEN T.CLASS_FIELD IS NULL OR T.CLASS_FIELD=0 THEN PPLI.CLASS_FIELD ELSE T.CLASS_FIELD END 
					,LOCATION_NUMBER			= CASE WHEN T.LOCATION_NUMBER IS NULL OR T.LOCATION_NUMBER=0 THEN PPLI.LOCATION_NUMBER ELSE T.LOCATION_NUMBER END 
					,ITEM_NUMBER				= CASE WHEN T.ITEM_NUMBER IS NULL OR T.ITEM_NUMBER=0 THEN PPLI.ITEM_NUMBER ELSE T.ITEM_NUMBER END 
					,ACTUAL_INSURED_OBJECT		= CASE WHEN T.ACTUAL_INSURED_OBJECT IS NULL OR T.ACTUAL_INSURED_OBJECT='' THEN PPLI.ACTUAL_INSURED_OBJECT ELSE T.ACTUAL_INSURED_OBJECT END  
					,PORTABLE_EQUIPMENT			= CASE WHEN T.PORTABLE_EQUIPMENT IS NULL OR T.PORTABLE_EQUIPMENT=0 THEN PPLI.PORTABLE_EQUIPMENT ELSE T.PORTABLE_EQUIPMENT END 
					,CO_APPLICANT_ID			= CASE WHEN T.CO_APPLICANT_ID IS NULL OR T.CO_APPLICANT_ID=0 THEN PPLI.CO_APPLICANT_ID ELSE T.CO_APPLICANT_ID END 
					,IL_RISK_ID_LINK_WITH_CLAIM = CASE WHEN T.RISK_ID_LINK_WITH_CLAIM IS NULL OR T.RISK_ID_LINK_WITH_CLAIM=0 THEN PPLI.IL_RISK_ID_LINK_WITH_CLAIM ELSE T.RISK_ID_LINK_WITH_CLAIM END 
						
					 FROM POL_PRODUCT_LOCATION_INFO PPLI INNER JOIN
					 (
						SELECT   CUSTOMER_ID
							    ,POLICY_ID
							    ,POLICY_VERSION_ID
								,VALUE_AT_RISK 
								,BUILDING_VALUE 
								,CONTENTS_VALUE 
								,RAW_MATERIAL_VALUE 
								,CASE WHEN CONTENTS_RAW_VALUES=10963 THEN 10963 ELSE 10964 END AS CONTENTS_RAW_VALUES 
								,MRI_VALUE 
								,MAXIMUM_LIMIT 
								,POSSIBLE_MAX_LOSS 
								,CASE WHEN MULTIPLE_DEDUCTIBLE='Y' THEN 10963 WHEN MULTIPLE_DEDUCTIBLE='N' THEN 10964 ELSE null END AS MULTIPLE_DEDUCTIBLE	 
								,NO_PARKING_SPACE 
								,ACTIVITY_TYPE 
								,OCCUPIED_AS 
								,CONSTRUCTION 
								,SUBSTRING(RUBRICA,1,6) AS RUBRICA 
								,CASE WHEN [24HOUR_ASSISTANCE]=10963 THEN 10963 ELSE  10964 END AS ASSIST24	   
								,REMARKS 
								,CASE WHEN IS_DEACTIVATE ='Y' THEN 'N' ELSE 'Y' END AS IS_DEACTIVATE
								,dbo.fun_GetDefaultUserID() AS MODIFIED_BY 
								,GETDATE() AS LAST_UPDATED_DATETIME 
								,CLAIM_RATIO 
								,BONUS 
								,CLASS_FIELD 
								,LOCATION_NUMBER 
								,ITEM_NUMBER 
								,ACTUAL_INSURED_OBJECT 
								,PORTABLE_EQUIPMENT 
								,@APPLICANT_ID AS CO_APPLICANT_ID
								,RISK_ID_LINK_WITH_CLAIM
								 
							   
						FROM   MIG_IL_POLICY_RISK_DETAILS 
						WHERE  IMPORT_REQUEST_ID = @IMPORT_REQUEST_ID AND 
							   IMPORT_SERIAL_NO  = @IMPORT_SERIAL_NO
						   
					 )T ON T.CUSTOMER_ID= PPLI.CUSTOMER_ID AND T.POLICY_ID=PPLI.POLICY_ID AND T.POLICY_VERSION_ID=PPLI.POLICY_VERSION_ID
				     
					 WHERE PPLI.CUSTOMER_ID =@CUSTOMER_ID AND PPLI.POLICY_ID=@POLICY_ID AND PPLI.POLICY_VERSION_ID=@POLICY_VERSION_ID AND PPLI.PRODUCT_RISK_ID=@RISK_ID
					 
				   	 
                  -- UPDATE EXISTING DETAILS PROTECTION DEVICES RECORD
					
				   UPDATE POL_PROTECTIVE_DEVICES               
				   SET	   
						 FIRE_EXTINGUISHER 				= CASE WHEN T.FIRE_EXTINGUISHER IS NULL OR T.FIRE_EXTINGUISHER=0 THEN PPD.FIRE_EXTINGUISHER ELSE T.FIRE_EXTINGUISHER END 
						,SPL_FIRE_EXTINGUISHER_UNIT	    = CASE WHEN T.SPL_FIRE_EXTINGUISHER_UNIT IS NULL OR T.SPL_FIRE_EXTINGUISHER_UNIT=0 THEN PPD.SPL_FIRE_EXTINGUISHER_UNIT ELSE T.SPL_FIRE_EXTINGUISHER_UNIT END 
						,MANUAL_FOAM_SYSTEM				= CASE WHEN T.MANUAL_FOAM_SYSTEM IS NULL OR T.MANUAL_FOAM_SYSTEM=0 THEN PPD.MANUAL_FOAM_SYSTEM ELSE T.MANUAL_FOAM_SYSTEM END 
						,FOAM							= CASE WHEN T.FOAM IS NULL OR T.FOAM=0 THEN PPD.FOAM ELSE T.FOAM END 
						,INERT_GAS_SYSTEM				= CASE WHEN T.INERT_GAS_SYSTEM IS NULL OR T.INERT_GAS_SYSTEM=0 THEN PPD.INERT_GAS_SYSTEM ELSE T.INERT_GAS_SYSTEM END 
						,MANUAL_INERT_GAS_SYSTEM 		= CASE WHEN T.MANUAL_INERT_GAS_SYSTEM IS NULL OR T.MANUAL_INERT_GAS_SYSTEM=0 THEN PPD.MANUAL_INERT_GAS_SYSTEM ELSE T.MANUAL_INERT_GAS_SYSTEM END 
						,COMBAT_CARS 					= CASE WHEN T.COMBAT_CARS IS NULL OR T.COMBAT_CARS=0 THEN PPD.COMBAT_CARS ELSE T.COMBAT_CARS END 
						,CORRAL_SYSTEM					= CASE WHEN T.CORRAL_SYSTEM IS NULL OR T.CORRAL_SYSTEM=0 THEN PPD.CORRAL_SYSTEM ELSE T.CORRAL_SYSTEM END 
						,ALARM_SYSTEM 					= CASE WHEN T.ALARM_SYSTEM IS NULL OR T.ALARM_SYSTEM=0 THEN PPD.ALARM_SYSTEM ELSE T.ALARM_SYSTEM END 
						,FREE_HYDRANT					= CASE WHEN T.FREE_HYDRANT IS NULL OR T.FREE_HYDRANT=0 THEN PPD.FREE_HYDRANT ELSE T.FREE_HYDRANT END 
						,SPRINKLERS						= CASE WHEN T.SPRINKLERS IS NULL OR T.SPRINKLERS=0 THEN PPD.SPRINKLERS ELSE T.SPRINKLERS END 
						,SPRINKLERS_CLASSIFICATION		= CASE WHEN T.SPRINKLER_CLASSIFICATION IS NULL OR T.SPRINKLER_CLASSIFICATION =0 THEN PPD.SPRINKLERS_CLASSIFICATION ELSE T.SPRINKLER_CLASSIFICATION END 
						,FIRE_FIGHTER					= CASE WHEN T.FIRE_FIGHTERS IS NULL OR T.FIRE_FIGHTERS=0 THEN PPD.FIRE_FIGHTER ELSE T.FIRE_FIGHTERS END 
						,QUESTIION_POINTS				= CASE WHEN T.QUESTION_POINTS IS NULL OR T.QUESTION_POINTS=0 THEN PPD.QUESTIION_POINTS ELSE T.QUESTION_POINTS END 
						,IS_ACTIVE						= T.IS_ACTIVE
						,MODIFIED_BY 					= T.MODIFIED_BY
						,LAST_UPDATED_DATETIME			= T.LAST_UPDATED_DATETIME
						,LOCATION_ID					= CASE WHEN T.LOCATION_ID IS NULL OR T.LOCATION_ID=0 THEN PPD.LOCATION_ID ELSE T.LOCATION_ID END  
						
					 FROM POL_PROTECTIVE_DEVICES PPD INNER JOIN
					 (
						SELECT   CUSTOMER_ID
							    ,POLICY_ID
							    ,POLICY_VERSION_ID
								,CASE WHEN FIRE_EXTINGUISHER='Y' THEN 10963 ELSE 10964 END AS FIRE_EXTINGUISHER
								,CASE WHEN SPECIAL_FIRE_EXTINGUISHER_UNIT='Y' THEN 10963 ELSE 10964 END AS SPL_FIRE_EXTINGUISHER_UNIT
								,CASE WHEN MANUAL_FOAM_SYSTEM='Y' THEN 10963 ELSE 10964 END AS MANUAL_FOAM_SYSTEM
								,CASE WHEN FOAM='Y' THEN 10963 ELSE 10964 END  AS FOAM
								,CASE WHEN INERT_GAS_SYSTEM='Y' THEN 10963 ELSE 10964 END AS INERT_GAS_SYSTEM
								,CASE WHEN MANUAL_INERT_GAS_SYSTEM='Y' THEN 10963 ELSE 10964 END  AS MANUAL_INERT_GAS_SYSTEM
								,CASE WHEN COMBAT_CARS='Y' THEN 10963 ELSE 10964 END  AS COMBAT_CARS
								,CASE WHEN CORRAL_SYSTEM='Y' THEN 10963 ELSE 10964 END  AS CORRAL_SYSTEM
								,CASE WHEN ALARM_SYSTEM='Y' THEN 10963 ELSE 10964 END AS ALARM_SYSTEM
								,CASE WHEN FREE_HYDRANTS='Y' THEN 10963 ELSE 10964 END AS FREE_HYDRANT
								,CASE WHEN SPRINKLERS='Y' THEN 10963 ELSE 10964 END AS SPRINKLERS
								,SPRINKLER_CLASSIFICATION 
								,FIRE_FIGHTERS 
								,QUESTION_POINTS 
								,'Y' AS IS_ACTIVE
								,dbo.fun_GetDefaultUserID() AS MODIFIED_BY
								,GETDATE() AS LAST_UPDATED_DATETIME 
								,@LOCATION_ID AS LOCATION_ID
							   
						FROM   MIG_IL_POLICY_RISK_DETAILS 
						WHERE  IMPORT_REQUEST_ID = @IMPORT_REQUEST_ID AND 
							   IMPORT_SERIAL_NO  = @IMPORT_SERIAL_NO
						   
					 )T ON T.CUSTOMER_ID= PPD.CUSTOMER_ID AND T.POLICY_ID=PPD.POLICY_ID AND T.POLICY_VERSION_ID=PPD.POLICY_VERSION_ID
				     
					 WHERE PPD.CUSTOMER_ID =@CUSTOMER_ID AND PPD.POLICY_ID=@POLICY_ID AND PPD.POLICY_VERSION_ID=@POLICY_VERSION_ID AND PPD.RISK_ID=@RISK_ID
			END	
			
			END	
		END 
		
		ELSE IF(@POLICY_LOB IN( 15,21,33,34))
		BEGIN 
			
		    IF (@APPLICANT_ID IS NULL OR @APPLICANT_ID=0)		
				SET @ERROR_NO =51 --  Co-applicant does not exists.  		
			ELSE IF(@POLICY_LOB =15 AND @APPLICANT_TYPE<>11110)
			   SET @ERROR_NO  =253 --  Only personal type co-appliacnt allowed for this product.
			
			
			
			IF(@MAIN_INSURED in (SELECT CODE FROM POL_PERSONAL_ACCIDENT_INFO WITH(NOLOCK) WHERE CUSTOMER_ID=@CUSTOMER_ID AND POLICY_ID=@POLICY_ID))   
			BEGIN 
				 SELECT TOP 1 @MAIN_INSURED_ID=PERSONAL_INFO_ID FROM POL_PERSONAL_ACCIDENT_INFO WITH(NOLOCK)   
				 WHERE CUSTOMER_ID=@CUSTOMER_ID AND   POLICY_ID=@POLICY_ID and IS_ACTIVE='Y' AND CODE=@MAIN_INSURED
			END
			
			
			
			IF(@ERROR_NO=0)      
			BEGIN   
			
			IF(@RISK_ID IS NULL OR @RISK_ID =0) --INSERT NEW RECORD 
			BEGIN
				SELECT  @RISK_ID=ISNULL(MAX(PERSONAL_INFO_ID),0)+1 FROM POL_PERSONAL_ACCIDENT_INFO  WITH (NOLOCK) WHERE CUSTOMER_ID=@CUSTOMER_ID AND POLICY_ID=@POLICY_ID      
		  
		   
				 INSERT INTO POL_PERSONAL_ACCIDENT_INFO(
					PERSONAL_INFO_ID,		    
					POLICY_ID	,
					POLICY_VERSION_ID,
					CUSTOMER_ID,
					APPLICANT_ID,
					INDIVIDUAL_NAME,
					CODE,
					CPF_NUM,
					DATE_OF_BIRTH,
					GENDER,
					REG_IDEN,
					REG_ID_ISSUES,
					REG_ID_ORG,
					REMARKS,
					IS_ACTIVE,
					CREATED_BY,
					CREATED_DATETIME,		
					IS_SPOUSE_OR_CHILD,
					MAIN_INSURED,
					CITY_OF_BIRTH,
					MARITAL_STATUS,
					POSITION_ID,
					STATE_ID,
					IL_RISK_ID_LINK_WITH_CLAIM
					)
					SELECT 			
					@RISK_ID,
					@POLICY_ID,
					@POLICY_VERSION_ID,
					@CUSTOMER_ID,
					@APPLICANT_ID,
					INDIVIDUAL_NAME,
					CODE,
					CASE WHEN @APPLICANT_TYPE=11110 THEN 
						 CASE WHEN CPF_CNPJ IS NOT NULL THEN  SUBSTRING(CPF_CNPJ,1,3)+'.'+SUBSTRING(CPF_CNPJ,4,3)+'.'+SUBSTRING(CPF_CNPJ,7,3)+'-'+SUBSTRING(CPF_CNPJ,10,2) -- CPF FORMATTING
						  ELSE CPF_CNPJ END
					ELSE 
						 CASE WHEN CPF_CNPJ IS NOT NULL THEN   SUBSTRING(CPF_CNPJ,1,2)+'.'+SUBSTRING(CPF_CNPJ,3,3)+'.'+SUBSTRING(CPF_CNPJ,6,3)+'/'+SUBSTRING(CPF_CNPJ,9,4)+'-'+SUBSTRING(CPF_CNPJ,13,2)---- CNPJ FORMATTING
						  ELSE CPF_CNPJ END
					END,
		                
					CONVERT(DATE,(LEFT(DATE_OF_BIRTH,4)+'-'+SUBSTRING(DATE_OF_BIRTH,5,2)+'-'+RIGHT(DATE_OF_BIRTH,2))),
					CASE WHEN GENDER=9814 THEN 6614  -- female
						 WHEN GENDER=9813 THEN 6615  -- male
						 ELSE NULL 
						 
					END,
					REGIONAL_ID,
					CONVERT(DATE,(LEFT(REG_ID_ISSUES,4)+'-'+SUBSTRING(REG_ID_ISSUES,5,2)+'-'+RIGHT(REG_ID_ISSUES,2))),
					REGIONAL_IDENTIFICATION,
					REMARKS,
					'Y',
					dbo.fun_GetDefaultUserID(),
					GETDATE(),
					CASE WHEN IS_SPOUSE_OR_CHILD!=10963 THEN 10964 ELSE IS_SPOUSE_OR_CHILD END,
					@MAIN_INSURED_ID,
					CITY_OF_BIRTH,
					CASE WHEN MARITAL_STATUS =5932	THEN 'D'
					WHEN MARITAL_STATUS =5933	THEN 'M'  -- Married
					WHEN MARITAL_STATUS =5934	THEN 'P'  -- Separated
					WHEN MARITAL_STATUS =5935	THEN 'S'  -- Single
					WHEN MARITAL_STATUS =5936	THEN 'W'  -- Widowed
					WHEN MARITAL_STATUS =93	    THEN ''   -- None
					ELSE NULL END,		
					POSITION,
					[STATE]	,
					RISK_ID_LINK_WITH_CLAIM		
					FROM MIG_IL_POLICY_RISK_DETAILS WITH(NOLOCK)
					WHERE IMPORT_REQUEST_ID = @IMPORT_REQUEST_ID AND
						  IMPORT_SERIAL_NO  = @IMPORT_SERIAL_NO 
		
			END
			--========================================================
			-- FOR POLICY ENDORSEMENT PROCESS ADDED BY PRADEEP
			--========================================================
			ELSE IF(@PROCESS_TYPE =3 AND @RISK_ID>0)
			BEGIN
				------------------------------------         
				-- UPDATE IMPORT DETAILS      
				------------------------------------               
				UPDATE MIG_IL_POLICY_RISK_DETAILS      
				SET    CUSTOMER_ID       = @CUSTOMER_ID,      
				POLICY_ID         = @POLICY_ID,      
				POLICY_VERSION_ID = @POLICY_VERSION_ID,      
				IS_PROCESSED      = 'Y'      
				WHERE  IMPORT_REQUEST_ID = @IMPORT_REQUEST_ID AND      
				IMPORT_SERIAL_NO  = @IMPORT_SERIAL_NO        
				
				-- UPDATE EXISTING DETAILS RISK RECORD
				   UPDATE POL_PERSONAL_ACCIDENT_INFO               
				   SET	   
					 INDIVIDUAL_NAME			= CASE WHEN T.INDIVIDUAL_NAME IS NULL OR T.INDIVIDUAL_NAME='' THEN PPAI.INDIVIDUAL_NAME ELSE T.INDIVIDUAL_NAME END 
					,CODE						= CASE WHEN T.CODE IS NULL OR T.CODE='0' THEN PPAI.CODE ELSE T.CODE END 
					,CPF_NUM					= CASE WHEN T.CPF_NUM IS NULL OR T.CPF_NUM='0' THEN PPAI.CPF_NUM ELSE T.CPF_NUM END 
					,DATE_OF_BIRTH				= CASE WHEN T.DATE_OF_BIRTH IS NULL THEN PPAI.DATE_OF_BIRTH ELSE T.DATE_OF_BIRTH END 	
					,GENDER						= CASE WHEN T.GENDER IS NULL OR T.GENDER=0 THEN PPAI.GENDER ELSE T.GENDER END 
					,REG_IDEN					= CASE WHEN T.REGIONAL_ID IS NULL OR T.REGIONAL_ID='' THEN PPAI.REG_IDEN ELSE T.REGIONAL_ID END 
					,REG_ID_ISSUES				= CASE WHEN T.REG_ID_ISSUES IS NULL  THEN PPAI.REG_ID_ISSUES ELSE T.REG_ID_ISSUES END 
					,REG_ID_ORG					= CASE WHEN T.REGIONAL_IDENTIFICATION IS NULL OR T.REGIONAL_IDENTIFICATION='' THEN PPAI.REG_ID_ORG ELSE T.REGIONAL_IDENTIFICATION END 
					,REMARKS					= CASE WHEN T.REMARKS IS NULL OR T.REMARKS='' THEN PPAI.REMARKS ELSE T.REMARKS END 
					,IS_ACTIVE					= T.IS_DEACTIVATE	
					,MODIFIED_BY				= T.MODIFIED_BY
					,LAST_UPDATED_DATETIME		= T.LAST_UPDATED_DATETIME	
					,IS_SPOUSE_OR_CHILD			= CASE WHEN T.IS_SPOUSE_OR_CHILD IS NULL OR T.IS_SPOUSE_OR_CHILD=0 THEN PPAI.IS_SPOUSE_OR_CHILD ELSE T.IS_SPOUSE_OR_CHILD END 
					,MAIN_INSURED				= CASE WHEN T.MAIN_INSURED IS NULL OR T.MAIN_INSURED=0 THEN PPAI.IS_SPOUSE_OR_CHILD ELSE T.MAIN_INSURED END 
					,CITY_OF_BIRTH				= CASE WHEN T.CITY_OF_BIRTH IS NULL OR T.CITY_OF_BIRTH='' THEN PPAI.CITY_OF_BIRTH ELSE T.CITY_OF_BIRTH END 
					,MARITAL_STATUS				= CASE WHEN T.MARITAL_STATUS IS NULL OR T.MARITAL_STATUS='' THEN PPAI.MARITAL_STATUS ELSE T.MARITAL_STATUS END 
					,POSITION_ID				= CASE WHEN T.POSITION IS NULL OR T.POSITION=0 THEN PPAI.POSITION_ID ELSE T.POSITION END 
					,STATE_ID					= CASE WHEN T.[STATE] IS NULL OR T.[STATE]=0 THEN PPAI.STATE_ID ELSE T.[STATE] END 
					,IL_RISK_ID_LINK_WITH_CLAIM	= CASE WHEN T.RISK_ID_LINK_WITH_CLAIM IS NULL OR T.RISK_ID_LINK_WITH_CLAIM='' THEN PPAI.IL_RISK_ID_LINK_WITH_CLAIM ELSE T.RISK_ID_LINK_WITH_CLAIM END 
						
					 FROM POL_PERSONAL_ACCIDENT_INFO PPAI INNER JOIN
					 (
						SELECT  CUSTOMER_ID,
							    POLICY_ID,
							    POLICY_VERSION_ID,
								INDIVIDUAL_NAME,
								CODE,
								CASE WHEN @APPLICANT_TYPE=11110 THEN 
									 CASE WHEN CPF_CNPJ IS NOT NULL THEN  SUBSTRING(CPF_CNPJ,1,3)+'.'+SUBSTRING(CPF_CNPJ,4,3)+'.'+SUBSTRING(CPF_CNPJ,7,3)+'-'+SUBSTRING(CPF_CNPJ,10,2) -- CPF FORMATTING
									  ELSE CPF_CNPJ END
								ELSE 
									 CASE WHEN CPF_CNPJ IS NOT NULL THEN   SUBSTRING(CPF_CNPJ,1,2)+'.'+SUBSTRING(CPF_CNPJ,3,3)+'.'+SUBSTRING(CPF_CNPJ,6,3)+'/'+SUBSTRING(CPF_CNPJ,9,4)+'-'+SUBSTRING(CPF_CNPJ,13,2)---- CNPJ FORMATTING
									  ELSE CPF_CNPJ END
								END AS CPF_NUM,
								    
								CONVERT(DATE,(LEFT(DATE_OF_BIRTH,4)+'-'+SUBSTRING(DATE_OF_BIRTH,5,2)+'-'+RIGHT(DATE_OF_BIRTH,2))) AS DATE_OF_BIRTH,
								CASE WHEN GENDER=9814 THEN 6614  -- female
									 WHEN GENDER=9813 THEN 6615  -- male
									 ELSE NULL 
									 
								END AS GENDER,
								REGIONAL_ID,
								CONVERT(DATE,(LEFT(REG_ID_ISSUES,4)+'-'+SUBSTRING(REG_ID_ISSUES,5,2)+'-'+RIGHT(REG_ID_ISSUES,2))) AS REG_ID_ISSUES,
								REGIONAL_IDENTIFICATION,
								REMARKS,
								CASE WHEN IS_DEACTIVATE ='Y' THEN 'N' ELSE 'Y' END IS_DEACTIVATE,
								dbo.fun_GetDefaultUserID() AS MODIFIED_BY,
								GETDATE() LAST_UPDATED_DATETIME,
								CASE WHEN IS_SPOUSE_OR_CHILD!=10963 THEN 10964 ELSE IS_SPOUSE_OR_CHILD END AS IS_SPOUSE_OR_CHILD,
								@MAIN_INSURED_ID AS MAIN_INSURED,
								CITY_OF_BIRTH,
								CASE WHEN MARITAL_STATUS =5932	THEN 'D'
								WHEN MARITAL_STATUS =5933	THEN 'M'  -- Married
								WHEN MARITAL_STATUS =5934	THEN 'P'  -- Separated
								WHEN MARITAL_STATUS =5935	THEN 'S'  -- Single
								WHEN MARITAL_STATUS =5936	THEN 'W'  -- Widowed
								WHEN MARITAL_STATUS =93	    THEN ''   -- None
								ELSE NULL END AS MARITAL_STATUS,		
								POSITION,
								[STATE]	,
								RISK_ID_LINK_WITH_CLAIM	 
								
						FROM   MIG_IL_POLICY_RISK_DETAILS 
						WHERE  IMPORT_REQUEST_ID = @IMPORT_REQUEST_ID AND 
							   IMPORT_SERIAL_NO  = @IMPORT_SERIAL_NO
						   
					 )T ON T.CUSTOMER_ID= PPAI.CUSTOMER_ID AND T.POLICY_ID=PPAI.POLICY_ID AND T.POLICY_VERSION_ID=PPAI.POLICY_VERSION_ID
				     
					 WHERE PPAI.CUSTOMER_ID =@CUSTOMER_ID AND PPAI.POLICY_ID=@POLICY_ID AND PPAI.POLICY_VERSION_ID=@POLICY_VERSION_ID AND PPAI.PERSONAL_INFO_ID=@RISK_ID
					 
				
			END  
			
			END	
		END 
		--17	0553	Facultative Liability
		--18	0523	Civil Liability Transportation
		--28	0435	Aeronautic
		--29	0531	Motor
		--31	0654	Cargo Transportation Civil Liability
		
		ELSE IF(@POLICY_LOB IN(28,17,18,29,31))
		BEGIN 
		 
			 
			IF ( @APPLICANT_ID IS NULL OR @APPLICANT_ID=0)
			BEGIN    
				SET @ERROR_NO =51 --  Co-applicant does not exists.  
			END 
		 
			IF(@ERROR_NO=0)      
			BEGIN   
			
			IF(@RISK_ID IS NULL OR @RISK_ID =0) ---INSERT NEW RECORD 
			BEGIN
				SELECT  @RISK_ID=ISNULL(MAX(VEHICLE_ID),0)+1 FROM POL_CIVIL_TRANSPORT_VEHICLES  WITH (NOLOCK) WHERE CUSTOMER_ID=@CUSTOMER_ID AND POLICY_ID=@POLICY_ID      
				 
				INSERT INTO POL_CIVIL_TRANSPORT_VEHICLES(
		   		CUSTOMER_ID,				
				POLICY_ID	,
				POLICY_VERSION_ID,
				VEHICLE_ID,
				CLIENT_ORDER,
				VEHICLE_NUMBER,
				MANUFACTURED_YEAR,
				FIPE_CODE,
				CATEGORY,
				CAPACITY,
				MAKE_MODEL,
				LICENSE_PLATE,
				CHASSIS,
				RISK_EFFECTIVE_DATE,
				RISK_EXPIRE_DATE,
				COV_GROUP_CODE,
				FINANCE_ADJUSTMENT,
				REFERENCE_PROPOSASL,
				REMARKS,
				IS_ACTIVE,
				CREATED_BY,
				CREATED_DATETIME,
				MODIFIED_BY,
				LAST_UPDATED_DATETIME,
				CO_APPLICANT_ID,
				TICKET_NUMBER,
				ZIP_CODE,
				STATE_ID,
				IL_RISK_ID_LINK_WITH_CLAIM
				)
				SELECT 	
				@CUSTOMER_ID,		
				@POLICY_ID,
				@POLICY_VERSION_ID,
				@RISK_ID,
				CLIENT_ORDER,
				VEHICLE_NO,
				ISNULL([YEAR],0),
				FIPE_CODE,
				LOOKUP_UNIQUE_ID,
				CAPACITY,
				MAKE_MODEL,
				SUBSTRING(LICENSE_PLATE,0,7),
				CHASSIS,
				ISNULL(CONVERT(DATETIME,(LEFT(RISK_EFFECTIVE_DATE,4)+'-'+SUBSTRING(RISK_EFFECTIVE_DATE,5,2)+'-'+RIGHT(RISK_EFFECTIVE_DATE,2))),GETDATE()),
				ISNULL(CONVERT(DATETIME,(LEFT(RISK_EXPIRE_DATE,4)+'-'+SUBSTRING(RISK_EXPIRE_DATE,5,2)+'-'+RIGHT(RISK_EXPIRE_DATE,2))),GETDATE()),
				COV_GROUP_CODE,
				FINANCE_ADJUSTMENT,
				REFERENCE_PROPOSAL,
				REMARKS,
				'Y',
				dbo.fun_GetDefaultUserID(),
				GETDATE(),
				MODIFIED_BY,
				MIG.LAST_UPDATED_DATETIME,
				@APPLICANT_ID,
				TICKET_NO,
				ZIP_CODE,
				[STATE]	,
				RISK_ID_LINK_WITH_CLAIM
				FROM MIG_IL_POLICY_RISK_DETAILS MIG WITH(NOLOCK) 
				LEFT OUTER JOIN MNT_LOOKUP_VALUES LKP ON LKP.LOOKUP_ID=1378 AND LKP.LOOKUP_VALUE_CODE=CAST( CATEGORY AS NVARCHAR(20))
				WHERE IMPORT_REQUEST_ID = @IMPORT_REQUEST_ID AND
					  IMPORT_SERIAL_NO  = @IMPORT_SERIAL_NO 
			END	  
			ELSE IF(@PROCESS_TYPE =3 AND @RISK_ID>0)
			BEGIN
				------------------------------------         
				-- UPDATE IMPORT DETAILS      
				------------------------------------               
				UPDATE MIG_IL_POLICY_RISK_DETAILS      
				SET    CUSTOMER_ID       = @CUSTOMER_ID,      
				POLICY_ID         = @POLICY_ID,      
				POLICY_VERSION_ID = @POLICY_VERSION_ID,      
				IS_PROCESSED      = 'Y'      
				WHERE  IMPORT_REQUEST_ID = @IMPORT_REQUEST_ID AND      
				IMPORT_SERIAL_NO  = @IMPORT_SERIAL_NO        
				
				-- UPDATE EXISTING DETAILS RISK RECORD
				   UPDATE POL_CIVIL_TRANSPORT_VEHICLES               
				   SET	   
					 CLIENT_ORDER					= CASE WHEN T.CLIENT_ORDER IS NULL OR T.CLIENT_ORDER=0 THEN PCTV.CLIENT_ORDER ELSE T.CLIENT_ORDER END 
					,VEHICLE_NUMBER				    = CASE WHEN T.VEHICLE_NO IS NULL OR T.VEHICLE_NO=0 THEN PCTV.VEHICLE_NUMBER ELSE T.VEHICLE_NO END 
					,MANUFACTURED_YEAR				= CASE WHEN T.MANUFACTURED_YEAR IS NULL OR T.MANUFACTURED_YEAR=0 THEN PCTV.MANUFACTURED_YEAR ELSE T.MANUFACTURED_YEAR END 
					,FIPE_CODE						= CASE WHEN T.FIPE_CODE IS NULL OR T.FIPE_CODE='' THEN PCTV.FIPE_CODE ELSE T.FIPE_CODE END 
					,CATEGORY						= CASE WHEN T.CATEGORY IS NULL OR T.CATEGORY=0 THEN PCTV.CATEGORY ELSE T.CATEGORY END 
					,CAPACITY						= CASE WHEN T.CAPACITY IS NULL OR T.CAPACITY=0 THEN PCTV.CAPACITY ELSE T.CAPACITY END 
					,MAKE_MODEL						= CASE WHEN T.MAKE_MODEL IS NULL OR T.MAKE_MODEL='' THEN PCTV.MAKE_MODEL ELSE T.MAKE_MODEL END 
					,LICENSE_PLATE					= CASE WHEN T.LICENSE_PLATE IS NULL OR T.LICENSE_PLATE='' THEN PCTV.LICENSE_PLATE ELSE T.LICENSE_PLATE END 
					,CHASSIS						= CASE WHEN T.CHASSIS IS NULL OR T.CHASSIS='' THEN PCTV.CHASSIS ELSE T.CHASSIS END 
					,RISK_EFFECTIVE_DATE			= CASE WHEN T.RISK_EFFECTIVE_DATE IS NULL THEN PCTV.RISK_EFFECTIVE_DATE ELSE T.RISK_EFFECTIVE_DATE END 
					,RISK_EXPIRE_DATE				= CASE WHEN T.RISK_EXPIRE_DATE IS NULL THEN PCTV.RISK_EXPIRE_DATE ELSE T.RISK_EXPIRE_DATE END 
					,COV_GROUP_CODE					= CASE WHEN T.COV_GROUP_CODE IS NULL OR T.COV_GROUP_CODE='' THEN PCTV.COV_GROUP_CODE ELSE T.COV_GROUP_CODE END 
					,FINANCE_ADJUSTMENT				= CASE WHEN T.FINANCE_ADJUSTMENT IS NULL OR T.FINANCE_ADJUSTMENT='' THEN PCTV.FINANCE_ADJUSTMENT ELSE T.FINANCE_ADJUSTMENT END 
					,REFERENCE_PROPOSASL			= CASE WHEN T.REFERENCE_PROPOSAL IS NULL OR T.REFERENCE_PROPOSAL='' THEN PCTV.REFERENCE_PROPOSASL ELSE T.REFERENCE_PROPOSAL END 
					,REMARKS						= CASE WHEN T.REMARKS IS NULL OR T.REMARKS='' THEN PCTV.REMARKS ELSE T.REMARKS END  
					,IS_ACTIVE						= T.IS_DEACTIVATE
					,MODIFIED_BY					= T.MODIFIED_BY
					,LAST_UPDATED_DATETIME			= T.LAST_UPDATED_DATETIME
					,CO_APPLICANT_ID				= CASE WHEN T.APPLICANT_ID IS NULL OR T.APPLICANT_ID=0 THEN PCTV.CO_APPLICANT_ID ELSE T.APPLICANT_ID END 
					,TICKET_NUMBER					= CASE WHEN T.TICKET_NO IS NULL OR T.TICKET_NO=0 THEN PCTV.TICKET_NUMBER ELSE T.TICKET_NO END 
					,ZIP_CODE						= CASE WHEN T.ZIP_CODE IS NULL OR T.ZIP_CODE='' THEN PCTV.ZIP_CODE ELSE T.ZIP_CODE END 
					,STATE_ID						= CASE WHEN T.[STATE] IS NULL OR T.[STATE]=0 THEN STATE_ID ELSE T.[STATE] END 
					,IL_RISK_ID_LINK_WITH_CLAIM		= CASE WHEN T.RISK_ID_LINK_WITH_CLAIM IS NULL OR T.RISK_ID_LINK_WITH_CLAIM='' THEN PCTV.IL_RISK_ID_LINK_WITH_CLAIM ELSE T.RISK_ID_LINK_WITH_CLAIM END 
					  
					 FROM POL_CIVIL_TRANSPORT_VEHICLES PCTV INNER JOIN
					 (
						SELECT  CUSTOMER_ID,
							    POLICY_ID,
							    POLICY_VERSION_ID,
								CLIENT_ORDER,
								VEHICLE_NO,
								ISNULL([YEAR],0) AS MANUFACTURED_YEAR,
								FIPE_CODE,
								LOOKUP_UNIQUE_ID CATEGORY,
								CAPACITY,
								MAKE_MODEL,
								SUBSTRING(LICENSE_PLATE,0,7) AS LICENSE_PLATE,
								CHASSIS,
								ISNULL(CONVERT(DATETIME,(LEFT(RISK_EFFECTIVE_DATE,4)+'-'+SUBSTRING(RISK_EFFECTIVE_DATE,5,2)+'-'+RIGHT(RISK_EFFECTIVE_DATE,2))),GETDATE()) AS RISK_EFFECTIVE_DATE,
								ISNULL(CONVERT(DATETIME,(LEFT(RISK_EXPIRE_DATE,4)+'-'+SUBSTRING(RISK_EXPIRE_DATE,5,2)+'-'+RIGHT(RISK_EXPIRE_DATE,2))),GETDATE()) AS RISK_EXPIRE_DATE,
								COV_GROUP_CODE,
								FINANCE_ADJUSTMENT,
								REFERENCE_PROPOSAL,
								REMARKS,
								CASE WHEN IS_DEACTIVATE ='Y' THEN 'N' ELSE 'Y' END IS_DEACTIVATE,
								dbo.fun_GetDefaultUserID() MODIFIED_BY,
								GETDATE() LAST_UPDATED_DATETIME,
								@APPLICANT_ID APPLICANT_ID,
								TICKET_NO,
								ZIP_CODE,
								[STATE]	,
								RISK_ID_LINK_WITH_CLAIM
								
						FROM   MIG_IL_POLICY_RISK_DETAILS WITH(NOLOCK)
						LEFT OUTER JOIN MNT_LOOKUP_VALUES LKP ON LKP.LOOKUP_ID=1378 AND LKP.LOOKUP_VALUE_CODE=CAST( CATEGORY AS NVARCHAR(20))
						WHERE  IMPORT_REQUEST_ID = @IMPORT_REQUEST_ID AND 
							   IMPORT_SERIAL_NO  = @IMPORT_SERIAL_NO
						   
					 )T ON T.CUSTOMER_ID= PCTV.CUSTOMER_ID AND T.POLICY_ID=PCTV.POLICY_ID AND T.POLICY_VERSION_ID=PCTV.POLICY_VERSION_ID
				     
					 WHERE PCTV.CUSTOMER_ID =@CUSTOMER_ID AND PCTV.POLICY_ID=@POLICY_ID AND PCTV.POLICY_VERSION_ID=@POLICY_VERSION_ID AND PCTV.VEHICLE_ID=@RISK_ID
					 
			END
			END	
		END 
		--30	0589	Dpvat(Cat. 3 e 4)
		--36	0588	DPVAT(Cat.1,2,9 e 10)
		ELSE IF(@POLICY_LOB IN(30,36))
		BEGIN 
		 
			IF(@ERROR_NO=0)      
			BEGIN   
			
			IF(@RISK_ID IS NULL OR @RISK_ID =0) --INSERT NEW RECORD 
			BEGIN
				SELECT  @RISK_ID=ISNULL(MAX(VEHICLE_ID),0)+1 FROM POL_CIVIL_TRANSPORT_VEHICLES  WITH (NOLOCK) WHERE CUSTOMER_ID=@CUSTOMER_ID AND POLICY_ID=@POLICY_ID      
				 
				INSERT INTO POL_CIVIL_TRANSPORT_VEHICLES(
		   		CUSTOMER_ID,				
				POLICY_ID	,
				POLICY_VERSION_ID,
				VEHICLE_ID,
				MANUFACTURED_YEAR,
				CATEGORY,
				RISK_EFFECTIVE_DATE,
				RISK_EXPIRE_DATE,
				IS_ACTIVE,
				CREATED_BY,
				CREATED_DATETIME,
				TICKET_NUMBER,
				STATE_ID,
				IL_RISK_ID_LINK_WITH_CLAIM
				)
				SELECT 	
				@CUSTOMER_ID,		
				@POLICY_ID,
				@POLICY_VERSION_ID,
				@RISK_ID,
				0,
				LOOKUP_UNIQUE_ID,
				GETDATE(),
				GETDATE(),
				'Y',
				dbo.fun_GetDefaultUserID(),
				GETDATE(),
				TICKET_NO,
				[STATE]	,
				RISK_ID_LINK_WITH_CLAIM
				FROM MIG_IL_POLICY_RISK_DETAILS MIG WITH(NOLOCK) 
				LEFT OUTER JOIN MNT_LOOKUP_VALUES LKP ON LKP.LOOKUP_ID=1406 AND CAST(LKP.LOOKUP_VALUE_CODE AS INT)= CATEGORY
				WHERE IMPORT_REQUEST_ID = @IMPORT_REQUEST_ID AND
					  IMPORT_SERIAL_NO  = @IMPORT_SERIAL_NO 
			END	 
			ELSE IF(@PROCESS_TYPE=3 AND @RISK_ID >0)
			BEGIN
				------------------------------------         
				-- UPDATE IMPORT DETAILS      
				------------------------------------               
				UPDATE MIG_IL_POLICY_RISK_DETAILS      
				SET    CUSTOMER_ID       = @CUSTOMER_ID,      
				POLICY_ID         = @POLICY_ID,      
				POLICY_VERSION_ID = @POLICY_VERSION_ID,      
				IS_PROCESSED      = 'Y'      
				WHERE  IMPORT_REQUEST_ID = @IMPORT_REQUEST_ID AND      
				IMPORT_SERIAL_NO  = @IMPORT_SERIAL_NO        
				
				-- UPDATE EXISTING DETAILS RISK RECORD
				   UPDATE POL_CIVIL_TRANSPORT_VEHICLES               
				   SET	   
					  
					 MANUFACTURED_YEAR				= 0
					,CATEGORY						= CASE WHEN T.CATEGORY IS NULL OR T.CATEGORY=0 THEN PCTV.CATEGORY ELSE T.CATEGORY END 
					,RISK_EFFECTIVE_DATE			= GETDATE()	
					,RISK_EXPIRE_DATE				= GETDATE()
					,IS_ACTIVE						= T.IS_DEACTIVATE
					,MODIFIED_BY					= dbo.fun_GetDefaultUserID()
					,LAST_UPDATED_DATETIME			= GETDATE()			
					,TICKET_NUMBER					= T.TICKET_NO
					,STATE_ID						= T.[STATE]
					,IL_RISK_ID_LINK_WITH_CLAIM		= T.RISK_ID_LINK_WITH_CLAIM
					
					 FROM POL_CIVIL_TRANSPORT_VEHICLES PCTV INNER JOIN
					 (
						SELECT  CUSTOMER_ID,
							    POLICY_ID,
							    POLICY_VERSION_ID,
								LOOKUP_UNIQUE_ID CATEGORY,
								TICKET_NO,
								[STATE]	,
								CASE WHEN IS_DEACTIVATE ='Y' THEN 'N' ELSE 'Y' END IS_DEACTIVATE,
								RISK_ID_LINK_WITH_CLAIM
								
						FROM   MIG_IL_POLICY_RISK_DETAILS WITH(NOLOCK)
						LEFT OUTER JOIN MNT_LOOKUP_VALUES LKP ON LKP.LOOKUP_ID=1378 AND LKP.LOOKUP_VALUE_CODE=CAST( CATEGORY AS NVARCHAR(20))
						WHERE  IMPORT_REQUEST_ID = @IMPORT_REQUEST_ID AND 
							   IMPORT_SERIAL_NO  = @IMPORT_SERIAL_NO
						   
					 )T ON T.CUSTOMER_ID= PCTV.CUSTOMER_ID AND T.POLICY_ID=PCTV.POLICY_ID AND T.POLICY_VERSION_ID=PCTV.POLICY_VERSION_ID
				     
					 WHERE PCTV.CUSTOMER_ID =@CUSTOMER_ID AND PCTV.POLICY_ID=@POLICY_ID AND PCTV.POLICY_VERSION_ID=@POLICY_VERSION_ID AND PCTV.VEHICLE_ID=@RISK_ID
					 
			END
			END	
		END 
		ELSE IF(@POLICY_LOB IN(23,20))
		BEGIN 
			IF (@APPLICANT_ID IS NULL OR @APPLICANT_ID=0)
			BEGIN    
				SET @ERROR_NO =51 --  Co-applicant does not exists.  
			END 
			 
		 
				  
			IF(@ERROR_NO=0)      
			BEGIN 
			
			IF(@RISK_ID IS NULL OR @RISK_ID=0)--NEW RECORD	
			BEGIN		  
					SELECT  @RISK_ID=ISNULL(MAX(COMMODITY_ID),0)+1 FROM POL_COMMODITY_INFO  WITH (NOLOCK) WHERE CUSTOMER_ID=@CUSTOMER_ID AND POLICY_ID=@POLICY_ID      
					INSERT INTO POL_COMMODITY_INFO(
		   			CUSTOMER_ID,						
					POLICY_ID	,
					POLICY_VERSION_ID,
					COMMODITY_ID,
					COMMODITY_NUMBER,
					COMMODITY,
					DEPARTING_DATE,
					CONVEYANCE_TYPE,
					ORIGN_COUNTRY,
					ORIGN_STATE,
					ORIGIN_CITY,
					DEST_COUNTRY,
					DEST_STATE,
					DESTINATION_CITY,
					REMARKS,
					IS_ACTIVE,
					CREATED_BY,
					CREATED_DATETIME,
					MODIFIED_BY,
					LAST_UPDATED_DATETIME ,
					CO_APPLICANT_ID ,
					IL_RISK_ID_LINK_WITH_CLAIM
				 
					)
					SELECT 	
					@CUSTOMER_ID,		
					@POLICY_ID,
					@POLICY_VERSION_ID,
					@RISK_ID,
					ITEM,
					INSURED_OBJECT,
					CONVERT(DATETIME,(LEFT(DEPARTING_DATE,4)+'-'+SUBSTRING(DEPARTING_DATE,5,2)+'-'+RIGHT(DEPARTING_DATE,2))),
					CONVEYANCE_TYPE,
					 (SELECT COUNTRY_NAME FROM MNT_COUNTRY_LIST NOLOCK WHERE COUNTRY_ID=ORIGIN_COUNTRY AND IS_ACTIVE='Y'),
					 (SELECT STATE_NAME FROM MNT_COUNTRY_STATE_LIST NOLOCK WHERE COUNTRY_ID=5 AND STATE_ID=ORIGIN_STATE AND IS_ACTIVE='Y'),
					ORIGIN_CITY,
					(SELECT COUNTRY_NAME FROM MNT_COUNTRY_LIST NOLOCK WHERE COUNTRY_ID=DESTINATION_COUNTRY AND IS_ACTIVE='Y'),
					 (SELECT STATE_NAME FROM MNT_COUNTRY_STATE_LIST NOLOCK WHERE COUNTRY_ID=5 AND STATE_ID=DESTINATION_STATE AND IS_ACTIVE='Y'),
					DESTINATION_CITY,
					REMARKS,
					CASE WHEN IS_DEACTIVATE ='Y' THEN 'N' ELSE 'Y' END ,
					dbo.fun_GetDefaultUserID(),
					GETDATE(),
					MODIFIED_BY,
					LAST_UPDATED_DATETIME,
		 			@APPLICANT_ID,
		 			RISK_ID_LINK_WITH_CLAIM
					
					 FROM MIG_IL_POLICY_RISK_DETAILS WITH(NOLOCK)
					WHERE IMPORT_REQUEST_ID = @IMPORT_REQUEST_ID AND
						  IMPORT_SERIAL_NO  = @IMPORT_SERIAL_NO 
			END
			ELSE IF(@PROCESS_TYPE =3 AND @RISK_ID>0)
			BEGIN
				------------------------------------         
				-- UPDATE IMPORT DETAILS      
				------------------------------------               
				UPDATE MIG_IL_POLICY_RISK_DETAILS      
				SET    CUSTOMER_ID       = @CUSTOMER_ID,      
				POLICY_ID         = @POLICY_ID,      
				POLICY_VERSION_ID = @POLICY_VERSION_ID,      
				IS_PROCESSED      = 'Y'      
				WHERE  IMPORT_REQUEST_ID = @IMPORT_REQUEST_ID AND      
				IMPORT_SERIAL_NO  = @IMPORT_SERIAL_NO        
				
				-- UPDATE EXISTING DETAILS RISK RECORD
				   UPDATE POL_COMMODITY_INFO               
				   SET	   
						 COMMODITY_NUMBER					= CASE WHEN T.ITEM IS NULL OR T.ITEM=0 THEN PCI.COMMODITY_NUMBER ELSE T.ITEM END 
						,COMMODITY							= CASE WHEN T.INSURED_OBJECT IS NULL OR T.INSURED_OBJECT='' THEN PCI.COMMODITY ELSE T.INSURED_OBJECT END 	
						,DEPARTING_DATE						= CASE WHEN T.DEPARTING_DATE IS NULL THEN PCI.DEPARTING_DATE ELSE T.DEPARTING_DATE END 
						,CONVEYANCE_TYPE					= CASE WHEN T.CONVEYANCE_TYPE IS NULL OR T.CONVEYANCE_TYPE=0 THEN PCI.CONVEYANCE_TYPE ELSE T.CONVEYANCE_TYPE END 	
						,ORIGN_COUNTRY						= CASE WHEN T.ORIGN_COUNTRY IS NULL OR T.ORIGN_COUNTRY='' THEN PCI.ORIGN_COUNTRY ELSE T.ORIGN_COUNTRY END 
						,ORIGN_STATE						= CASE WHEN T.ORIGN_STATE IS NULL OR T.ORIGN_STATE='' THEN PCI.ORIGN_STATE ELSE T.ORIGN_STATE END 	
						,ORIGIN_CITY						= CASE WHEN T.ORIGIN_CITY IS NULL OR T.ORIGIN_CITY='' THEN PCI.ORIGIN_CITY ELSE T.ORIGIN_CITY END 	
						,DEST_COUNTRY						= CASE WHEN T.DEST_COUNTRY IS NULL OR T.DEST_COUNTRY='' THEN PCI.DEST_COUNTRY ELSE T.DEST_COUNTRY END 
						,DEST_STATE							= CASE WHEN T.DEST_STATE IS NULL OR T.DEST_STATE='' THEN PCI.DEST_STATE ELSE T.DEST_STATE END 
						,DESTINATION_CITY					= CASE WHEN T.DESTINATION_CITY IS NULL OR T.DESTINATION_CITY='' THEN PCI.DESTINATION_CITY ELSE T.DESTINATION_CITY END 
						,REMARKS							= CASE WHEN T.REMARKS IS NULL OR T.REMARKS='' THEN PCI.REMARKS ELSE T.REMARKS END 	
						,IS_ACTIVE							= T.IS_DEACTIVATE
						,MODIFIED_BY						= T.MODIFIED_BY	
						,LAST_UPDATED_DATETIME				= T.LAST_UPDATED_DATETIME
						,CO_APPLICANT_ID					= CASE WHEN T.APPLICANT_ID IS NULL OR T.APPLICANT_ID=0 THEN PCI.CO_APPLICANT_ID ELSE T.APPLICANT_ID END 	
						,IL_RISK_ID_LINK_WITH_CLAIM			= CASE WHEN T.RISK_ID_LINK_WITH_CLAIM IS NULL OR T.RISK_ID_LINK_WITH_CLAIM='' THEN PCI.IL_RISK_ID_LINK_WITH_CLAIM ELSE T.RISK_ID_LINK_WITH_CLAIM END 
					
					 FROM POL_COMMODITY_INFO PCI INNER JOIN
					 (
						SELECT  CUSTOMER_ID,
							    POLICY_ID,
							    POLICY_VERSION_ID,
								ITEM,
								INSURED_OBJECT,
								CONVERT(DATETIME,(LEFT(DEPARTING_DATE,4)+'-'+SUBSTRING(DEPARTING_DATE,5,2)+'-'+RIGHT(DEPARTING_DATE,2))) DEPARTING_DATE,
								CONVEYANCE_TYPE,
								(SELECT COUNTRY_NAME FROM MNT_COUNTRY_LIST NOLOCK WHERE COUNTRY_ID=ORIGIN_COUNTRY AND IS_ACTIVE='Y') AS ORIGN_COUNTRY,
								(SELECT STATE_NAME FROM MNT_COUNTRY_STATE_LIST NOLOCK WHERE COUNTRY_ID=5 AND STATE_ID=ORIGIN_STATE AND IS_ACTIVE='Y') AS ORIGN_STATE,
								ORIGIN_CITY,
								(SELECT COUNTRY_NAME FROM MNT_COUNTRY_LIST NOLOCK WHERE COUNTRY_ID=DESTINATION_COUNTRY AND IS_ACTIVE='Y') AS DEST_COUNTRY,
								 (SELECT STATE_NAME FROM MNT_COUNTRY_STATE_LIST NOLOCK WHERE COUNTRY_ID=5 AND STATE_ID=DESTINATION_STATE AND IS_ACTIVE='Y') AS DEST_STATE,
								DESTINATION_CITY,
								REMARKS,
								CASE WHEN IS_DEACTIVATE ='Y' THEN 'N' ELSE 'Y' END IS_DEACTIVATE,
								dbo.fun_GetDefaultUserID() MODIFIED_BY,
								GETDATE() LAST_UPDATED_DATETIME,
								@APPLICANT_ID APPLICANT_ID,
								RISK_ID_LINK_WITH_CLAIM
								
						FROM   MIG_IL_POLICY_RISK_DETAILS WITH(NOLOCK)
						LEFT OUTER JOIN MNT_LOOKUP_VALUES LKP ON LKP.LOOKUP_ID=1378 AND LKP.LOOKUP_VALUE_CODE=CAST( CATEGORY AS NVARCHAR(20))
						WHERE  IMPORT_REQUEST_ID = @IMPORT_REQUEST_ID AND 
							   IMPORT_SERIAL_NO  = @IMPORT_SERIAL_NO
						   
					 )T ON T.CUSTOMER_ID= PCI.CUSTOMER_ID AND T.POLICY_ID=PCI.POLICY_ID AND T.POLICY_VERSION_ID=PCI.POLICY_VERSION_ID
				     
					 WHERE PCI.CUSTOMER_ID =@CUSTOMER_ID AND PCI.POLICY_ID=@POLICY_ID AND PCI.POLICY_VERSION_ID=@POLICY_VERSION_ID AND PCI.COMMODITY_ID=@RISK_ID
					 	
			END			  
			END	
		END 
		
		ELSE IF(@POLICY_LOB IN(35))
		BEGIN 
			
		IF(@RISK_ID IS NULL OR @RISK_ID=0)
		BEGIN	
			SELECT  @RISK_ID=ISNULL(MAX(PENHOR_RURAL_ID),0)+1 FROM POL_PENHOR_RURAL_INFO  WITH (NOLOCK) WHERE CUSTOMER_ID=@CUSTOMER_ID AND POLICY_ID=@POLICY_ID      
		    INSERT INTO POL_PENHOR_RURAL_INFO(
		   	CUSTOMER_ID,				
			POLICY_ID	,
			POLICY_VERSION_ID,
			PENHOR_RURAL_ID,
			ITEM_NUMBER,
			FESR_COVERAGE,
			MODE,
			PROPERTY,
			CULTIVATION,
			CITY,
			INSURED_AREA,
			SUBSIDY_PREMIUM,
			SUBSIDY_STATE,
			IS_ACTIVE,
			CREATED_BY,
			CREATED_DATETIME,
			MODIFIED_BY,
			LAST_UPDATED_DATETIME,
			REMARKS,
			IL_RISK_ID_LINK_WITH_CLAIM,
			STATE_ID
		    )
			SELECT 	
			@CUSTOMER_ID,		
			@POLICY_ID,
			@POLICY_VERSION_ID,
			@RISK_ID,
			ITEM,
			CASE WHEN FESR_COVERAGE ='Y' THEN 10963 ELSE 10964 END,
			(SELECT LOOKUP_UNIQUE_ID FROM MNT_LOOKUP_VALUES WHERE LOOKUP_ID=1407 AND CAST(LOOKUP_VALUE_CODE AS INT)=MODE),
			(SELECT LOOKUP_UNIQUE_ID FROM MNT_LOOKUP_VALUES WHERE LOOKUP_ID=1408 AND CAST(LOOKUP_VALUE_CODE AS INT)=PROPERTY),
			(SELECT LOOKUP_UNIQUE_ID FROM MNT_LOOKUP_VALUES WHERE LOOKUP_ID=1409 AND CAST(LOOKUP_VALUE_CODE AS INT)=CULTIVATION),
			CITY,
			INSURED_AREA,
			SUBSIDY_PREMIUM,
			SUBSIDY_STATE,
			CASE WHEN IS_DEACTIVATE ='Y' THEN 'N' ELSE 'Y' END ,
			dbo.fun_GetDefaultUserID(),
			GETDATE(),
			MODIFIED_BY,
			LAST_UPDATED_DATETIME,
			REMARKS,
			RISK_ID_LINK_WITH_CLAIM,
			STATE
		    FROM MIG_IL_POLICY_RISK_DETAILS WITH(NOLOCK)
		    WHERE IMPORT_REQUEST_ID = @IMPORT_REQUEST_ID AND
				  IMPORT_SERIAL_NO  = @IMPORT_SERIAL_NO 
		END
		ELSE IF(@PROCESS_TYPE =3 AND @RISK_ID>0)
		BEGIN
				------------------------------------         
				-- UPDATE IMPORT DETAILS      
				------------------------------------               
				UPDATE MIG_IL_POLICY_RISK_DETAILS      
				SET    CUSTOMER_ID       = @CUSTOMER_ID,      
				POLICY_ID         = @POLICY_ID,      
				POLICY_VERSION_ID = @POLICY_VERSION_ID,      
				IS_PROCESSED      = 'Y'      
				WHERE  IMPORT_REQUEST_ID = @IMPORT_REQUEST_ID AND      
				IMPORT_SERIAL_NO  = @IMPORT_SERIAL_NO        
				
				-- UPDATE EXISTING DETAILS RISK RECORD
				   UPDATE POL_PENHOR_RURAL_INFO               
				   SET	   
						ITEM_NUMBER							= CASE WHEN T.ITEM_NUMBER IS NULL OR T.ITEM_NUMBER=0 THEN PCI.ITEM_NUMBER ELSE T.ITEM_NUMBER END 			
						,FESR_COVERAGE						= CASE WHEN T.FESR_COVERAGE IS NULL OR T.FESR_COVERAGE=0 THEN PCI.FESR_COVERAGE ELSE T.FESR_COVERAGE END 	
						,MODE								= CASE WHEN T.MODE IS NULL OR T.MODE=0 THEN PCI.MODE ELSE T.MODE END 	
						,PROPERTY							= CASE WHEN T.PROPERTY IS NULL OR T.PROPERTY=0 THEN PCI.PROPERTY ELSE T.PROPERTY END 
						,CULTIVATION						= CASE WHEN T.CULTIVATION IS NULL OR T.CULTIVATION=0 THEN PCI.CULTIVATION ELSE T.CULTIVATION END 		
						,CITY								= CASE WHEN T.CITY IS NULL OR T.CITY='' THEN PCI.CITY ELSE T.CITY END 	
						,INSURED_AREA						= CASE WHEN T.INSURED_AREA IS NULL OR T.INSURED_AREA=0 THEN PCI.INSURED_AREA ELSE T.INSURED_AREA END 	
						,SUBSIDY_PREMIUM					= CASE WHEN T.SUBSIDY_PREMIUM IS NULL OR T.SUBSIDY_PREMIUM=0 THEN PCI.SUBSIDY_PREMIUM ELSE T.SUBSIDY_PREMIUM END 		
						,SUBSIDY_STATE						= CASE WHEN T.SUBSIDY_STATE IS NULL OR T.SUBSIDY_STATE=0 THEN PCI.SUBSIDY_STATE ELSE T.SUBSIDY_STATE END 	
						,IS_ACTIVE							= T.IS_DEACTIVATE	
						,MODIFIED_BY						= T.MODIFIED_BY		
						,LAST_UPDATED_DATETIME				= T.LAST_UPDATED_DATETIME	
						,REMARKS							= CASE WHEN T.REMARKS IS NULL OR T.REMARKS='' THEN PCI.REMARKS ELSE T.REMARKS END 		
						,IL_RISK_ID_LINK_WITH_CLAIM			= CASE WHEN T.RISK_ID_LINK_WITH_CLAIM IS NULL OR T.RISK_ID_LINK_WITH_CLAIM='' THEN PCI.IL_RISK_ID_LINK_WITH_CLAIM ELSE T.RISK_ID_LINK_WITH_CLAIM END 	
						,STATE_ID							= CASE WHEN T.[STATE] IS NULL OR T.[STATE]=0 THEN PCI.STATE_ID ELSE T.[STATE] END 	
						
					 FROM POL_PENHOR_RURAL_INFO PCI INNER JOIN
					 (
						SELECT  CUSTOMER_ID,
							    POLICY_ID,
							    POLICY_VERSION_ID,
								ITEM AS ITEM_NUMBER,
								CASE WHEN FESR_COVERAGE ='Y' THEN 10963 ELSE 10964 END AS FESR_COVERAGE,
								(SELECT LOOKUP_UNIQUE_ID FROM MNT_LOOKUP_VALUES WHERE LOOKUP_ID=1407 AND CAST(LOOKUP_VALUE_CODE AS INT)=MODE) AS MODE,
								(SELECT LOOKUP_UNIQUE_ID FROM MNT_LOOKUP_VALUES WHERE LOOKUP_ID=1408 AND CAST(LOOKUP_VALUE_CODE AS INT)=PROPERTY) AS PROPERTY,
								(SELECT LOOKUP_UNIQUE_ID FROM MNT_LOOKUP_VALUES WHERE LOOKUP_ID=1409 AND CAST(LOOKUP_VALUE_CODE AS INT)=CULTIVATION) AS CULTIVATION,
								CITY,
								INSURED_AREA,
								SUBSIDY_PREMIUM,
								SUBSIDY_STATE,
								CASE WHEN IS_DEACTIVATE ='Y' THEN 'N' ELSE 'Y' END AS IS_DEACTIVATE,
								dbo.fun_GetDefaultUserID() MODIFIED_BY,
								GETDATE() LAST_UPDATED_DATETIME,
								REMARKS,
								RISK_ID_LINK_WITH_CLAIM,
								[STATE]
								
						FROM   MIG_IL_POLICY_RISK_DETAILS WITH(NOLOCK)
						LEFT OUTER JOIN MNT_LOOKUP_VALUES LKP ON LKP.LOOKUP_ID=1378 AND LKP.LOOKUP_VALUE_CODE=CAST( CATEGORY AS NVARCHAR(20))
						WHERE  IMPORT_REQUEST_ID = @IMPORT_REQUEST_ID AND 
							   IMPORT_SERIAL_NO  = @IMPORT_SERIAL_NO
						   
					 )T ON T.CUSTOMER_ID= PCI.CUSTOMER_ID AND T.POLICY_ID=PCI.POLICY_ID AND T.POLICY_VERSION_ID=PCI.POLICY_VERSION_ID
				     
					 WHERE PCI.CUSTOMER_ID =@CUSTOMER_ID AND PCI.POLICY_ID=@POLICY_ID AND PCI.POLICY_VERSION_ID=@POLICY_VERSION_ID AND PCI.PENHOR_RURAL_ID=@RISK_ID
		END		  
		END 
		ELSE IF(@POLICY_LOB IN(37))
		BEGIN 
		
		IF(@RISK_ID IS NULL AND @RISK_ID=0)
		BEGIN
			SELECT  @RISK_ID=ISNULL(MAX(PENHOR_RURAL_ID),0)+1 FROM POL_PENHOR_RURAL_INFO  WITH (NOLOCK) WHERE CUSTOMER_ID=@CUSTOMER_ID AND POLICY_ID=@POLICY_ID      
		    INSERT INTO POL_PENHOR_RURAL_INFO(
		   	CUSTOMER_ID,				
			POLICY_ID	,
			POLICY_VERSION_ID,
			PENHOR_RURAL_ID,
			ITEM_NUMBER,
			IS_ACTIVE,
			CREATED_BY,
			CREATED_DATETIME,
			REMARKS,
			IL_RISK_ID_LINK_WITH_CLAIM
			
		    )
			SELECT 	
			@CUSTOMER_ID,		
			@POLICY_ID,
			@POLICY_VERSION_ID,
			@RISK_ID,
			ITEM,
			'Y',
			dbo.fun_GetDefaultUserID(),
			GETDATE(),
			REMARKS,
			RISK_ID_LINK_WITH_CLAIM 
			 
		    FROM MIG_IL_POLICY_RISK_DETAILS WITH(NOLOCK)
		    WHERE IMPORT_REQUEST_ID = @IMPORT_REQUEST_ID AND
				  IMPORT_SERIAL_NO  = @IMPORT_SERIAL_NO 
		END
		ELSE IF(@PROCESS_TYPE=3 AND @RISK_ID>0)
		BEGIN
				------------------------------------         
				-- UPDATE IMPORT DETAILS      
				------------------------------------               
				UPDATE MIG_IL_POLICY_RISK_DETAILS      
				SET    CUSTOMER_ID       = @CUSTOMER_ID,      
				POLICY_ID         = @POLICY_ID,      
				POLICY_VERSION_ID = @POLICY_VERSION_ID,      
				IS_PROCESSED      = 'Y'      
				WHERE  IMPORT_REQUEST_ID = @IMPORT_REQUEST_ID AND      
				IMPORT_SERIAL_NO  = @IMPORT_SERIAL_NO        
				
				-- UPDATE EXISTING DETAILS RISK RECORD
				   UPDATE POL_PENHOR_RURAL_INFO               
				   SET	   
						ITEM_NUMBER							= CASE WHEN T.ITEM_NUMBER IS NULL OR T.ITEM_NUMBER=0 THEN PCI.ITEM_NUMBER ELSE T.ITEM_NUMBER END 			
						,IS_ACTIVE							= T.IS_DEACTIVATE	
						,MODIFIED_BY						= T.MODIFIED_BY		
						,LAST_UPDATED_DATETIME				= T.LAST_UPDATED_DATETIME	
						,REMARKS							= CASE WHEN T.REMARKS IS NULL OR T.REMARKS='' THEN PCI.REMARKS ELSE T.REMARKS END 		
						,IL_RISK_ID_LINK_WITH_CLAIM			= CASE WHEN T.RISK_ID_LINK_WITH_CLAIM IS NULL OR T.RISK_ID_LINK_WITH_CLAIM='' THEN PCI.IL_RISK_ID_LINK_WITH_CLAIM ELSE T.RISK_ID_LINK_WITH_CLAIM END 	
						
					 FROM POL_PENHOR_RURAL_INFO PCI INNER JOIN
					 (
						SELECT  CUSTOMER_ID,
							    POLICY_ID,
							    POLICY_VERSION_ID,
								ITEM AS ITEM_NUMBER,
								CASE WHEN IS_DEACTIVATE ='Y' THEN 'N' ELSE 'Y' END AS IS_DEACTIVATE,
								dbo.fun_GetDefaultUserID() MODIFIED_BY,
								GETDATE() LAST_UPDATED_DATETIME,
								REMARKS,
								RISK_ID_LINK_WITH_CLAIM 
								
						FROM   MIG_IL_POLICY_RISK_DETAILS WITH(NOLOCK)
						LEFT OUTER JOIN MNT_LOOKUP_VALUES LKP ON LKP.LOOKUP_ID=1378 AND LKP.LOOKUP_VALUE_CODE=CAST( CATEGORY AS NVARCHAR(20))
						WHERE  IMPORT_REQUEST_ID = @IMPORT_REQUEST_ID AND 
							   IMPORT_SERIAL_NO  = @IMPORT_SERIAL_NO
						   
					 )T ON T.CUSTOMER_ID= PCI.CUSTOMER_ID AND T.POLICY_ID=PCI.POLICY_ID AND T.POLICY_VERSION_ID=PCI.POLICY_VERSION_ID
				     
					 WHERE PCI.CUSTOMER_ID =@CUSTOMER_ID AND PCI.POLICY_ID=@POLICY_ID AND PCI.POLICY_VERSION_ID=@POLICY_VERSION_ID AND PCI.PENHOR_RURAL_ID=@RISK_ID
		END
		END 
		ELSE IF(@POLICY_LOB IN(13))
		BEGIN 
		
		IF(@RISK_ID IS NULL AND @RISK_ID =0)
		BEGIN
			SELECT  @RISK_ID=ISNULL(MAX(MARITIME_ID),0)+1 FROM POL_MARITIME  WITH (NOLOCK) WHERE CUSTOMER_ID=@CUSTOMER_ID AND POLICY_ID=@POLICY_ID      
		   
		    INSERT INTO POL_MARITIME(
		   	CUSTOMER_ID,					
			POLICY_ID	,
			POLICY_VERSION_ID,
			MARITIME_ID,
			VESSEL_NUMBER,
			NAME_OF_VESSEL,
			TYPE_OF_VESSEL,
			MANUFACTURE_YEAR,
			MANUFACTURER,
			BUILDER,
			CONSTRUCTION,
			PROPULSION,
			CLASSIFICATION,
			LOCAL_OPERATION,
			LIMIT_NAVIGATION,
			PORT_REGISTRATION,
			REGISTRATION_NUMBER,
			TIE_NUMBER,
			--VESSEL_ACTION_NAUTICO_CLUB,
			NAME_OF_CLUB,
			LOCAL_CLUB,
			NUMBER_OF_CREW,
			NUMBER_OF_PASSENGER,
			REMARKS,
			IS_ACTIVE,
			CREATED_BY,
			CREATED_DATETIME,
			LAST_UPDATED_DATETIME,
			MODIFIED_BY,
		 	IL_RISK_ID_LINK_WITH_CLAIM
		    )
			SELECT 	
			@CUSTOMER_ID,		
			@POLICY_ID,
			@POLICY_VERSION_ID,
			@RISK_ID,
			VESSEL,
			NAME_OF_VESSEL,
			TYPE_OF_VESSEL,
			MANUFACTURE_YEAR,
			MANUFACTURER,
			BUILDER,
			CONSTRUCTION,
			PROPULSION,
			CLASSIFICATION,
			LOCAL_OPERATION,
			LIMIT_NAVIGATION,
			PORT_REGISTRATION,
			REGISTRATION_NUMBER,
			TIE_NO,
			--VESSEL_ACTION,
			NAME_OF_CLUB,
			LOCAL_CLUB,
			NO_OF_CREW,
			NO_OF_PASSENGERS,
			REMARKS,
			'Y',
			dbo.fun_GetDefaultUserID(),
			GETDATE(),
			LAST_UPDATED_DATETIME,
			MODIFIED_BY,
		    RISK_ID_LINK_WITH_CLAIM
			FROM MIG_IL_POLICY_RISK_DETAILS WITH(NOLOCK)
		    WHERE IMPORT_REQUEST_ID = @IMPORT_REQUEST_ID AND
				  IMPORT_SERIAL_NO  = @IMPORT_SERIAL_NO 
		END
		ELSE IF(@PROCESS_TYPE=3 AND @RISK_ID>0)
		BEGIN
			    ------------------------------------         
				-- UPDATE IMPORT DETAILS      
				------------------------------------               
				UPDATE MIG_IL_POLICY_RISK_DETAILS      
				SET    CUSTOMER_ID       = @CUSTOMER_ID,      
				POLICY_ID         = @POLICY_ID,      
				POLICY_VERSION_ID = @POLICY_VERSION_ID,      
				IS_PROCESSED      = 'Y'      
				WHERE  IMPORT_REQUEST_ID = @IMPORT_REQUEST_ID AND      
				IMPORT_SERIAL_NO  = @IMPORT_SERIAL_NO        
				
				-- UPDATE EXISTING DETAILS RISK RECORD
				   UPDATE POL_MARITIME               
				   SET	   
						 VESSEL_NUMBER						= CASE WHEN T.VESSEL IS NULL OR T.VESSEL=0 THEN PCI.VESSEL_NUMBER ELSE T.VESSEL END 	
						,NAME_OF_VESSEL						= CASE WHEN T.NAME_OF_VESSEL IS NULL OR T.NAME_OF_VESSEL='' THEN PCI.NAME_OF_VESSEL ELSE T.NAME_OF_VESSEL END 	
						,TYPE_OF_VESSEL						= CASE WHEN T.TYPE_OF_VESSEL IS NULL OR T.TYPE_OF_VESSEL='' THEN PCI.TYPE_OF_VESSEL ELSE T.TYPE_OF_VESSEL END 	
						,MANUFACTURE_YEAR					= CASE WHEN T.MANUFACTURE_YEAR IS NULL OR T.MANUFACTURE_YEAR=0 THEN PCI.MANUFACTURE_YEAR ELSE T.MANUFACTURE_YEAR END  	
						,MANUFACTURER						= CASE WHEN T.MANUFACTURER IS NULL OR T.MANUFACTURER='' THEN PCI.MANUFACTURER ELSE T.MANUFACTURER END 	
						,BUILDER							= CASE WHEN T.BUILDER IS NULL OR T.BUILDER='' THEN PCI.BUILDER ELSE T.BUILDER END 		
						,CONSTRUCTION						= CASE WHEN T.CONSTRUCTION IS NULL OR T.CONSTRUCTION='' THEN PCI.CONSTRUCTION ELSE T.CONSTRUCTION END 	
						,PROPULSION							= CASE WHEN T.PROPULSION IS NULL OR T.PROPULSION='' THEN PCI.PROPULSION ELSE T.PROPULSION END 	
						,CLASSIFICATION						= CASE WHEN T.CLASSIFICATION IS NULL OR T.CLASSIFICATION='' THEN PCI.CLASSIFICATION ELSE T.CLASSIFICATION END 	
						,LOCAL_OPERATION					= CASE WHEN T.LOCAL_OPERATION IS NULL OR T.LOCAL_OPERATION='' THEN PCI.LOCAL_OPERATION ELSE T.LOCAL_OPERATION END 		
						,LIMIT_NAVIGATION					= CASE WHEN T.LIMIT_NAVIGATION IS NULL OR T.LIMIT_NAVIGATION='' THEN PCI.LIMIT_NAVIGATION ELSE T.LIMIT_NAVIGATION END 	
						,PORT_REGISTRATION					= CASE WHEN T.PORT_REGISTRATION IS NULL OR T.PORT_REGISTRATION='' THEN PCI.PORT_REGISTRATION ELSE T.PORT_REGISTRATION END 	
						,REGISTRATION_NUMBER				= CASE WHEN T.REGISTRATION_NUMBER IS NULL OR T.REGISTRATION_NUMBER='' THEN PCI.REGISTRATION_NUMBER ELSE T.REGISTRATION_NUMBER END 		
						,TIE_NUMBER							= CASE WHEN T.TIE_NO IS NULL OR T.TIE_NO='' THEN PCI.TIE_NUMBER ELSE T.TIE_NO END 	
						,NAME_OF_CLUB						= CASE WHEN T.NAME_OF_CLUB IS NULL OR T.NAME_OF_CLUB='' THEN PCI.NAME_OF_CLUB ELSE T.NAME_OF_CLUB END 	
						,LOCAL_CLUB							= CASE WHEN T.LOCAL_CLUB IS NULL OR T.LOCAL_CLUB='' THEN PCI.NUMBER_OF_CREW ELSE T.LOCAL_CLUB END 	
						,NUMBER_OF_CREW						= CASE WHEN T.NO_OF_CREW IS NULL OR T.NO_OF_CREW=0 THEN PCI.REMARKS ELSE T.NO_OF_CREW END 	
						,NUMBER_OF_PASSENGER				= CASE WHEN T.NO_OF_PASSENGERS IS NULL OR T.NO_OF_PASSENGERS=0 THEN PCI.NUMBER_OF_PASSENGER ELSE T.NO_OF_PASSENGERS END 		
						,IS_ACTIVE							= T.IS_DEACTIVATE	
						,MODIFIED_BY						= T.MODIFIED_BY		
						,LAST_UPDATED_DATETIME				= T.LAST_UPDATED_DATETIME	
						,REMARKS							= CASE WHEN T.REMARKS IS NULL OR T.REMARKS='' THEN PCI.REMARKS ELSE T.REMARKS END 		
						,IL_RISK_ID_LINK_WITH_CLAIM			= CASE WHEN T.RISK_ID_LINK_WITH_CLAIM IS NULL OR T.RISK_ID_LINK_WITH_CLAIM='' THEN PCI.IL_RISK_ID_LINK_WITH_CLAIM ELSE T.RISK_ID_LINK_WITH_CLAIM END 	
						
					 FROM POL_MARITIME PCI INNER JOIN
					 (
						SELECT  CUSTOMER_ID,
							    POLICY_ID,
							    POLICY_VERSION_ID,
								VESSEL,
								NAME_OF_VESSEL,
								TYPE_OF_VESSEL,
								MANUFACTURE_YEAR,
								MANUFACTURER,
								BUILDER,
								CONSTRUCTION,
								PROPULSION,
								CLASSIFICATION,
								LOCAL_OPERATION,
								LIMIT_NAVIGATION,
								PORT_REGISTRATION,
								REGISTRATION_NUMBER,
								TIE_NO,
								NAME_OF_CLUB,
								LOCAL_CLUB,
								NO_OF_CREW,
								NO_OF_PASSENGERS,
								CASE WHEN IS_DEACTIVATE ='Y' THEN 'N' ELSE 'Y' END AS IS_DEACTIVATE,
								dbo.fun_GetDefaultUserID() MODIFIED_BY,
								GETDATE() LAST_UPDATED_DATETIME,
								REMARKS,
								RISK_ID_LINK_WITH_CLAIM 
								
						FROM   MIG_IL_POLICY_RISK_DETAILS WITH(NOLOCK)
						LEFT OUTER JOIN MNT_LOOKUP_VALUES LKP ON LKP.LOOKUP_ID=1378 AND LKP.LOOKUP_VALUE_CODE=CAST( CATEGORY AS NVARCHAR(20))
						WHERE  IMPORT_REQUEST_ID = @IMPORT_REQUEST_ID AND 
							   IMPORT_SERIAL_NO  = @IMPORT_SERIAL_NO
						   
					 )T ON T.CUSTOMER_ID= PCI.CUSTOMER_ID AND T.POLICY_ID=PCI.POLICY_ID AND T.POLICY_VERSION_ID=PCI.POLICY_VERSION_ID
				     
					 WHERE PCI.CUSTOMER_ID =@CUSTOMER_ID AND PCI.POLICY_ID=@POLICY_ID AND PCI.POLICY_VERSION_ID=@POLICY_VERSION_ID AND PCI.MARITIME_ID=@RISK_ID
		END		  
		END 
		
		ELSE IF(@POLICY_LOB IN(22))
		BEGIN 
			IF (@APPLICANT_ID IS NULL OR @APPLICANT_ID=0)
			BEGIN    
				SET @ERROR_NO =51 --  Co-applicant does not exists.  
			END 
			
			IF(@ERROR_NO=0)      
			BEGIN   
			IF(@RISK_ID IS NULL AND @RISK_ID =0)
			BEGIN		
					SELECT  @RISK_ID=ISNULL(MAX(PERSONAL_ACCIDENT_ID),0)+1 FROM POL_PASSENGERS_PERSONAL_ACCIDENT_INFO  WITH (NOLOCK) WHERE CUSTOMER_ID=@CUSTOMER_ID AND POLICY_ID=@POLICY_ID      
					INSERT INTO POL_PASSENGERS_PERSONAL_ACCIDENT_INFO(
					CUSTOMER_ID	,			
					POLICY_ID,
					POLICY_VERSION_ID,
					PERSONAL_ACCIDENT_ID,
					[START_DATE],
					END_DATE,
					NUMBER_OF_PASSENGERS,
					IS_ACTIVE,
					CREATED_BY,
					CREATED_DATETIME,
					CO_APPLICANT_ID,
					IL_RISK_ID_LINK_WITH_CLAIM
					)
					SELECT 	
					@CUSTOMER_ID,		
					@POLICY_ID,
					@POLICY_VERSION_ID,
					@RISK_ID,
					CONVERT(DATETIME,(LEFT([START_DATE],4)+'-'+SUBSTRING([START_DATE],5,2)+'-'+RIGHT([START_DATE],2))),
					CONVERT(DATETIME,(LEFT(END_DATE,4)+'-'+SUBSTRING(END_DATE,5,2)+'-'+RIGHT(END_DATE,2))),
					NO_OF_PASSENGERS,
					'Y',
					dbo.fun_GetDefaultUserID(),
					GETDATE(),
					@APPLICANT_ID,
					RISK_ID_LINK_WITH_CLAIM
					FROM MIG_IL_POLICY_RISK_DETAILS WITH(NOLOCK)
					WHERE IMPORT_REQUEST_ID = @IMPORT_REQUEST_ID AND
						  IMPORT_SERIAL_NO  = @IMPORT_SERIAL_NO 
			END
			ELSE IF(@PROCESS_TYPE =3 AND @RISK_ID >0)
			BEGIN
				------------------------------------         
				-- UPDATE IMPORT DETAILS      
				------------------------------------               
				UPDATE MIG_IL_POLICY_RISK_DETAILS      
				SET    CUSTOMER_ID       = @CUSTOMER_ID,      
				POLICY_ID         = @POLICY_ID,      
				POLICY_VERSION_ID = @POLICY_VERSION_ID,      
				IS_PROCESSED      = 'Y'      
				WHERE  IMPORT_REQUEST_ID = @IMPORT_REQUEST_ID AND      
				IMPORT_SERIAL_NO  = @IMPORT_SERIAL_NO        
				
				-- UPDATE EXISTING DETAILS RISK RECORD
				   UPDATE POL_PASSENGERS_PERSONAL_ACCIDENT_INFO               
				   SET	   
						[START_DATE]						= CASE WHEN T.[START_DATE] IS NULL  THEN PCI.[START_DATE] ELSE T.[START_DATE] END 
						,END_DATE							= CASE WHEN T.END_DATE IS NULL  THEN PCI.[START_DATE] ELSE T.END_DATE END 
						,NUMBER_OF_PASSENGERS				= CASE WHEN T.NO_OF_PASSENGERS IS NULL OR T.NO_OF_PASSENGERS=0 THEN PCI.NUMBER_OF_PASSENGERS ELSE T.NO_OF_PASSENGERS END 
						,CO_APPLICANT_ID					= CASE WHEN T.CO_APPLICANT_ID IS NULL OR T.CO_APPLICANT_ID=0 THEN PCI.CO_APPLICANT_ID ELSE T.CO_APPLICANT_ID END  
						,IS_ACTIVE							= T.IS_DEACTIVATE	
						,MODIFIED_BY						= T.MODIFIED_BY		
						,LAST_UPDATED_DATETIME				= T.LAST_UPDATED_DATETIME	
						,IL_RISK_ID_LINK_WITH_CLAIM			= CASE WHEN T.RISK_ID_LINK_WITH_CLAIM IS NULL OR T.RISK_ID_LINK_WITH_CLAIM='' THEN PCI.IL_RISK_ID_LINK_WITH_CLAIM ELSE T.RISK_ID_LINK_WITH_CLAIM END 	
						
					 FROM POL_PASSENGERS_PERSONAL_ACCIDENT_INFO PCI INNER JOIN
					 (
						SELECT  CUSTOMER_ID,
							    POLICY_ID,
							    POLICY_VERSION_ID,
								CONVERT(DATETIME,(LEFT([START_DATE],4)+'-'+SUBSTRING([START_DATE],5,2)+'-'+RIGHT([START_DATE],2))) AS [START_DATE],
								CONVERT(DATETIME,(LEFT(END_DATE,4)+'-'+SUBSTRING(END_DATE,5,2)+'-'+RIGHT(END_DATE,2))) AS END_DATE,
								NO_OF_PASSENGERS,
								@APPLICANT_ID CO_APPLICANT_ID,
								CASE WHEN IS_DEACTIVATE ='Y' THEN 'N' ELSE 'Y' END AS IS_DEACTIVATE,
								dbo.fun_GetDefaultUserID() MODIFIED_BY,
								GETDATE() LAST_UPDATED_DATETIME,
								RISK_ID_LINK_WITH_CLAIM 
								
						FROM   MIG_IL_POLICY_RISK_DETAILS WITH(NOLOCK)
						LEFT OUTER JOIN MNT_LOOKUP_VALUES LKP ON LKP.LOOKUP_ID=1378 AND LKP.LOOKUP_VALUE_CODE=CAST( CATEGORY AS NVARCHAR(20))
						WHERE  IMPORT_REQUEST_ID = @IMPORT_REQUEST_ID AND 
							   IMPORT_SERIAL_NO  = @IMPORT_SERIAL_NO
						   
					 )T ON T.CUSTOMER_ID= PCI.CUSTOMER_ID AND T.POLICY_ID=PCI.POLICY_ID AND T.POLICY_VERSION_ID=PCI.POLICY_VERSION_ID
				     
					 WHERE PCI.CUSTOMER_ID =@CUSTOMER_ID AND PCI.POLICY_ID=@POLICY_ID AND PCI.POLICY_VERSION_ID=@POLICY_VERSION_ID AND PCI.PERSONAL_ACCIDENT_ID=@RISK_ID
			END			  
			END	
		END
	  	
		
		 END -- END OF ELSE STATEMENT OF IF(@CUSTOMER_ID IS NULL OR @CUSTOMER_ID='' OR @CUSTOMER_ID=0)
		
		
		 IF(@ERROR_NO>0)      
		 BEGIN 	
		 -----------------------------------------------------------            
		 -- INSERT ERROR DETAILS      
		 -----------------------------------------------------------       
		 UPDATE MIG_IL_POLICY_RISK_DETAILS
		 SET    HAS_ERRORS=1            
		 WHERE  IMPORT_REQUEST_ID = @IMPORT_REQUEST_ID AND       
				IMPORT_SERIAL_NO  = @IMPORT_SERIAL_NO            
	            
		 EXEC  [PROC_MIG_IL_INSERT_IMPORT_ERROR_DETAILS]                       
		 @IMPORT_REQUEST_ID     = @IMPORT_REQUEST_ID,            
		 @IMPORT_SERIAL_NO      = @IMPORT_SERIAL_NO  ,                
		 @ERROR_SOURCE_FILE     = ''     ,            
		 @ERROR_SOURCE_COLUMN   = ''     ,            
		 @ERROR_SOURCE_COLUMN_VALUE= '' ,            
		 @ERROR_ROW_NUMBER      = @IMPORT_SERIAL_NO   ,              
		 @ERROR_TYPES           = @ERROR_NO,         
		 @ACTUAL_RECORD_DATA    = '' ,            
		 @ERROR_MODE            = 'VE',  -- VALIDATION ERROR            
		 @ERROR_SOURCE_TYPE     = 'PRSK'         
	           
		 END    
       ELSE
       BEGIN
		------------------------------------         
		-- UPDATE IMPORT DETAILS      
		------------------------------------               
		UPDATE MIG_IL_POLICY_RISK_DETAILS      
		SET    CUSTOMER_ID       = @CUSTOMER_ID,      
		POLICY_ID         = @POLICY_ID,      
		POLICY_VERSION_ID = @POLICY_VERSION_ID,      
		IS_PROCESSED      = 'Y'      
		WHERE  IMPORT_REQUEST_ID = @IMPORT_REQUEST_ID AND      
		IMPORT_SERIAL_NO  = @IMPORT_SERIAL_NO     


		EXEC [PROC_MIG_IL_INSERT_IMPORT_SUMMARY]       
		@IMPORT_REQUEST_ID   = @IMPORT_REQUEST_ID,  
		@IMPORT_SERIAL_NO    = @IMPORT_SERIAL_NO,   
		@CUSTOMER_ID      = @CUSTOMER_ID ,  
		@POLICY_ID       = @POLICY_ID,  
		@POLICY_VERSION_ID   = @POLICY_VERSION_ID,  
		@IS_ACTIVE       = 'Y',  
		@IS_PROCESSED      = 'Y',  
		@FILE_TYPE       = @IMPORT_RISK_FILE_TYPE,  
		@FILE_NAME              = @IMPORT_FILE_NAME,  
		@CUSTOMER_SEQUENTIAL    = NULL,  
		@POLICY_SEQUENTIAL      = @LOOP_POLICY_SEQUANCE_NO,   
		@ENDORSEMENT_SEQUENTIAL = @LOOP_END_SEQUANCE_NO,  
		@IMPORT_SEQUENTIAL      = @LOOP_RISK_SEQUENCE,
		@IMPORT_SEQUENTIAL2     = NULL,  
		@LOB_ID       = @POLICY_LOB,   
		@IMPORTED_RECORD_ID     = @RISK_ID,
		@PROCESS_TYPE			= @PROCESS_TYPE    --- Change        
	   END
		
		SET @COUNTER += 1
		
	END	--end while 
		
  END  TRY    
	BEGIN CATCH          
		           
		 SELECT           
			@ERROR_NUMBER    = ERROR_NUMBER(),          
			@ERROR_SEVERITY  = ERROR_SEVERITY(),          
			@ERROR_STATE     = ERROR_STATE(),          
			@ERROR_PROCEDURE = ERROR_PROCEDURE(),          
			@ERROR_LINE   = ERROR_LINE(),          
			@ERROR_MESSAGE   = ERROR_MESSAGE()          
		               
		  -- CREATING LOG OF EXCEPTION     
		  EXEC [PROC_MIG_INSERT_ERROR_LOG]            
		  @IMPORT_REQUEST_ID    = @IMPORT_REQUEST_ID          
		 ,@IMPORT_SERIAL_NO  = 0          
		 ,@ERROR_NUMBER      = @ERROR_NUMBER          
		 ,@ERROR_SEVERITY    = @ERROR_SEVERITY          
		 ,@ERROR_STATE          = @ERROR_STATE          
		 ,@ERROR_PROCEDURE   = @ERROR_PROCEDURE    
		 ,@ERROR_LINE        = @ERROR_LINE          
		 ,@ERROR_MESSAGE        = @ERROR_MESSAGE          
		 ,@INITIAL_LOAD_FLAG    = 'Y'          
		            
	           
	 END CATCH          

 
END 

 
GO