
/****** Object:  StoredProcedure [dbo].[PROC_MIG_IL_VERIFY_POLICY_RULES]    Script Date: 12/02/2011 17:54:04 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROC_MIG_IL_VERIFY_POLICY_RULES]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROC_MIG_IL_VERIFY_POLICY_RULES]
GO

/****** Object:  StoredProcedure [dbo].[PROC_MIG_IL_VERIFY_POLICY_RULES]    Script Date: 12/02/2011 17:54:05 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- DROP PROC [PROC_MIG_IL_VERIFY_POLICY_RULES] 4742,7,1,36, null,null
CREATE PROC [dbo].[PROC_MIG_IL_VERIFY_POLICY_RULES]
(
@CUSTOMER_ID INT,
@POLICY_ID INT,
@POLICY_VERSION_ID INT,
@LOB_ID INT,
@IS_VALID     CHAR(1) OUT,
@ERROR_TYPES    NVARCHAR(MAX) OUT


)
AS 
BEGIN

--DECLARE @CUSTOMER_ID  INT= 2612
--DECLARE @POLICY_ID INT = 253
--DECLARE @POLICY_VERSION_ID INT= 1
DECLARE @COMMIT_DATE DATETIME= GETDATE()
--DECLARE @LOB_ID INT = 22
 DECLARE @VALID INT  = 1
--DECLARE @VALIDATION_MSG VARCHAR(MAX)                                                         
DECLARE @TRANSACTION_TYPE VARCHAR(MAX)
DECLARE @MAX_LAYER_AMOUNT DECIMAL(28,2)
DECLARE @SUM_INSURED DECIMAL(28,2)

--select ' begin rule verify'
SET @IS_VALID ='Y'
SET @ERROR_TYPES =''

DECLARE @CO_INSURANCE INT
DECLARE @RISK_COUNT INT= 0
DECLARE @POLICY_LEVEL_COMMISSION NCHAR(2)

SELECT @CO_INSURANCE = CO_INSURANCE,@TRANSACTION_TYPE = TRANSACTION_TYPE,
		@POLICY_LEVEL_COMMISSION = ISNULL(POLICY_LEVEL_COMM_APPLIES,'N') FROM POL_CUSTOMER_POLICY_LIST (NOLOCK) WHERE CUSTOMER_ID = @CUSTOMER_ID AND POLICY_ID = @POLICY_ID 
AND POLICY_VERSION_ID = @POLICY_VERSION_ID


--select @CO_INSURANCE as '@CO_INSURANCE',  @TRANSACTION_TYPE '@TRANSACTION_TYPE'
/*========================================
--IS_Valid ==1 --> All Rules are verified and policy is eligible to committ
--IS_Valid ==0 --> All Rules are not verified policy not able to commit
=========================================*/

---validate policy tab data 
/*
if policy co-insurance type is not direct then co-insurance tab data is mendatory.
*/
IF (@CO_INSURANCE <> 14547) 
	BEGIN 
	IF NOT EXISTS(SELECT * FROM POL_CO_INSURANCE (NOLOCK) WHERE CUSTOMER_ID = @CUSTOMER_ID AND POLICY_ID = @POLICY_ID AND POLICY_VERSION_ID = @POLICY_VERSION_ID) 
		BEGIN 
		SET  @VALID	 = 0 ---Not valid				
		SET  @ERROR_TYPES	 = '259' 
		--RETURN
		END
	END	
ELSE 
	SET @VALID	 =  1

--<<<<<		validate Aplicant tab		>>>>>>>>>

/*
if policy type is master policy/open policy 
applicant information shoul available
application commission information should available
promary applicant should inform
*/
IF(@TRANSACTION_TYPE = 14560)
BEGIN 
	IF NOT EXISTS(SELECT * FROM POL_APPLICANT_LIST (NOLOCK) WHERE CUSTOMER_ID = @CUSTOMER_ID AND POLICY_ID = @POLICY_ID AND POLICY_VERSION_ID = @POLICY_VERSION_ID)
	BEGIN 
		SET @VALID	 =  0
		SET @ERROR_TYPES=	 @ERROR_TYPES+','+ '260' 
		--RETURN
	END
	ELSE 
	BEGIN 
		IF NOT EXISTS(SELECT * FROM POL_APPLICANT_LIST (NOLOCK) WHERE CUSTOMER_ID =@CUSTOMER_ID AND POLICY_ID = @POLICY_ID AND POLICY_VERSION_ID = @POLICY_VERSION_ID AND IS_PRIMARY_APPLICANT = 1)
		BEGIN 
			SET @VALID	 =  0
			SET @ERROR_TYPES=	 @ERROR_TYPES+','+ '261' 
			
			--RETURN
		END	
	END
END


---<<<<<<<<<<<		Validate Remuneration	>>>>>>>>>
/*
For master commission percentage should be eqal to 100 for each co-applicant commission type wise
*/
--SELECT * FROM POL_REMUNERATION (NOLOCK) WHERE CUSTOMER_ID = @CUSTOMER_ID AND POLICY_ID  = @POLICY_ID and POLICY_VERSION_ID = @POLICY_VERSION_ID
--IF(@TRANSACTION_TYPE = 14560)
--BEGIN 
--SELECT ISNULL(SUM(ISNULL(COMMISSION_PERCENT,0)),0) FROM POL_REMUNERATION (NOLOCK) WHERE CUSTOMER_ID = @CUSTOMER_ID AND POLICY_ID  = @POLICY_ID and POLICY_VERSION_ID = @POLICY_VERSION_ID
	IF ((SELECT ISNULL(SUM(COMMISSION_PERCENT),0) FROM POL_REMUNERATION (NOLOCK) WHERE CUSTOMER_ID = @CUSTOMER_ID AND POLICY_ID  = @POLICY_ID and POLICY_VERSION_ID = @POLICY_VERSION_ID) <=0 )
			BEGIN 
			SET @VALID	 =  0
			SET @ERROR_TYPES=	 @ERROR_TYPES+','+ '262' 
			--SET @VALIDATION_MSG	 = 'Please inform broker commssion percentage at remuneration tab'
			---RETURN
			END
	ELSE 
	BEGIN 
		--SELECT * INTO  #MyTemp FROM (
		--SELECT @TRANSACTION_TYPE AS TRANSACTION_TYPE,@POLICY_LEVEL_COMMISSION AS POLICY_LEVEL_COMMISSION,SUM(PR.COMMISSION_PERCENT) AS REMUN_PERCENT,SUM(CASE WHEN LEADER =10963 THEN  1  ELSE 0 END ) AS LEADER,COMMISSION_TYPE,CO_APPLICANT_ID
		--,PAL.COMMISSION_PERCENT AS APPLICANT_COMMISSION from POL_APPLICANT_LIST PAL  (NOLOCK)
		--JOIN POL_REMUNERATION  PR (NOLOCK) ON PAL.CUSTOMER_ID =PR.CUSTOMER_ID and PAL.POLICY_ID = PR.POLICY_ID and PAL.POLICY_VERSION_ID = PR.POLICY_VERSION_ID		
		--WHERE PAL.CUSTOMER_ID =@CUSTOMER_ID AND PAL.POLICY_ID = @POLICY_ID AND PAL.POLICY_VERSION_ID = @POLICY_VERSION_ID				
		--group by COMMISSION_TYPE,CO_APPLICANT_ID,PAL.COMMISSION_PERCENT
		--)MyTemp
		
		
		-- ================================================
		-- MODIFIED BY SANTOSH KR GAUTAM ON 22 NOV 2011
		-- ================================================
		SELECT * INTO  #MyTemp FROM (
		SELECT @TRANSACTION_TYPE AS TRANSACTION_TYPE,@POLICY_LEVEL_COMMISSION AS POLICY_LEVEL_COMMISSION,SUM(PAL.COMMISSION_PERCENT) AS REMUN_PERCENT,COMMISSION_TYPE,CO_APPLICANT_ID,SUM(CASE WHEN LEADER =10963 THEN  1  ELSE 0 END ) AS LEADER
		 from POL_REMUNERATION  PAL (NOLOCK) --ON PAL.CUSTOMER_ID =PR.CUSTOMER_ID and PAL.POLICY_ID = PR.POLICY_ID and PAL.POLICY_VERSION_ID = PR.POLICY_VERSION_ID		
		WHERE PAL.CUSTOMER_ID =@CUSTOMER_ID AND PAL.POLICY_ID = @POLICY_ID AND PAL.POLICY_VERSION_ID = @POLICY_VERSION_ID				
		group by COMMISSION_TYPE,CO_APPLICANT_ID
		)MyTemp
		
		--select * from #MyTemp
		
	 --SELECT * FROM #MyTemp
		--		IF EXISTS(SELECT * FROM #MyTemp WHERE  REMUN_PERCENT > 100 )
		IF EXISTS(SELECT 1 FROM #MyTemp GROUP BY CO_APPLICANT_ID,COMMISSION_TYPE HAVING SUM(REMUN_PERCENT) >100)
		BEGIN
			SET @VALID	 =  0
			SET @ERROR_TYPES=	 @ERROR_TYPES+','+ '263' 
			--SET @VALIDATION_MSG	 = 'commission percentage should not be greater than 100%'
			--RETURN
		END
		--IF EXISTS(SELECT * FROM #MyTemp WHERE  @TRANSACTION_TYPE <> 14560 AND REMUN_PERCENT <> 100 AND POLICY_LEVEL_COMMISSION = 'Y' )
		ELSE IF EXISTS(SELECT 1 FROM #MyTemp WHERE  @TRANSACTION_TYPE <> 14560 AND POLICY_LEVEL_COMMISSION = 'Y'  GROUP BY CO_APPLICANT_ID HAVING SUM(REMUN_PERCENT)<>100)
		BEGIN
			SET @VALID	 =  0
			SET @ERROR_TYPES=	 @ERROR_TYPES+','+ '264' 
			--SET @VALIDATION_MSG	 = 'commission percentage should be 100%'
			--RETURN
		END
		--ELSE IF EXISTS(SELECT * FROM #MyTemp WHERE  REMUN_PERCENT > 0 and APPLICANT_COMMISSION <=0 AND TRANSACTION_TYPE = 14560 )
		ELSE IF @TRANSACTION_TYPE = 14560  AND EXISTS(SELECT 1 FROM #MyTemp TMP INNER JOIN POL_APPLICANT_LIST PAL  ON PAL.APPLICANT_ID =TMP.CO_APPLICANT_ID
					 WHERE   PAL.CUSTOMER_ID =@CUSTOMER_ID AND PAL.POLICY_ID = @POLICY_ID AND PAL.POLICY_VERSION_ID =@POLICY_VERSION_ID 	AND
					 REMUN_PERCENT > 0 and PAL.COMMISSION_PERCENT <=0
				 )	
		BEGIN
			SET @VALID	 =  0
			SET @ERROR_TYPES=	 @ERROR_TYPES+','+ '265' 
			--SET @VALIDATION_MSG	 = 'commission percentage not define at applicant tab'
			--RETURN
		END
		--ELSE IF EXISTS(SELECT * FROM #MyTemp WHERE  REMUN_PERCENT < 100 and APPLICANT_COMMISSION >0  AND TRANSACTION_TYPE = 14560 )
		ELSE IF  @TRANSACTION_TYPE = 14560  AND EXISTS(SELECT 1 FROM #MyTemp TMP INNER JOIN POL_APPLICANT_LIST PAL  ON PAL.APPLICANT_ID =TMP.CO_APPLICANT_ID
					 WHERE   PAL.CUSTOMER_ID =@CUSTOMER_ID AND PAL.POLICY_ID = @POLICY_ID AND PAL.POLICY_VERSION_ID =@POLICY_VERSION_ID 	AND
					 REMUN_PERCENT < 100 and PAL.COMMISSION_PERCENT >0
					 )
		BEGIN
			SET @VALID	 =  0
			SET @ERROR_TYPES=	 @ERROR_TYPES+','+ '266' 
			--SET @VALIDATION_MSG	 = 'Applicant commssion percent should be 100% at remuneration tab'
			--RETURN
		END		
		--ELSE IF EXISTS(SELECT * FROM #MyTemp WHERE  LEADER <> 1  )
		ELSE IF EXISTS(	SELECT 1 FROM  #MYTEMP WHERE  COMMISSION_TYPE=43  GROUP BY CO_APPLICANT_ID HAVING SUM(LEADER)<1 )
		BEGIN
			SET @VALID	 =  0
			SET @ERROR_TYPES=	 @ERROR_TYPES+','+ '267' 
			--SET @VALIDATION_MSG	 = 'Please select one leader broker for co-applicant at remuneration'
			--RETURN
		END
		ELSE 
		BEGIN 
			SET @VALID	 =  1
			--SET @ERROR_TYPES=	 @ERROR_TYPES+','+ '268' 
			--SET @VALIDATION_MSG	 = 'ALL rules are verified'
			
		END
		
		select @ERROR_TYPES
		
		DROP  TABLE #MyTemp
	END
	


---<<<<<<<<<< verify policy Risk >>>>>>>>>>>>>>>>>.
IF  @TRANSACTION_TYPE <> 14560 AND NOT EXISTS ( select * from VW_POL_PRODUCT_RISK_DETAILS (NOLOCK) wHERE CUSTOMER_ID = @CUSTOMER_ID AND POLICY_ID = @POLICY_ID AND POLICY_VERSION_ID = @POLICY_VERSION_ID)
BEGIN 
		
		SET @RISK_COUNT = 0
		SET @VALID	 =  0
		SET @ERROR_TYPES=	 @ERROR_TYPES+','+ '269' 
		--SET @VALIDATION_MSG	 = 'Pleset fill risk information'
		--IF (@TRANSACTION_TYPE <> 14560)
		--	RETURN
		
END 
ELSE 
	BEGIN 
	SET @RISK_COUNT = 1
    END 



----<<<<<<<<< Verify Product Coverages premium must equal to billing info premium >>>>>>>>>.

IF(@TRANSACTION_TYPE <> 14560 AND @RISK_COUNT > 0 AND (SELECT COUNT(*) FROM POL_PRODUCT_COVERAGES (NOLOCK) WHERE CUSTOMER_ID = @CUSTOMER_ID AND POLICY_ID  = @POLICY_ID AND POLICY_VERSION_ID = @POLICY_VERSION_ID) = 0)	
BEGIN 		
        SET @VALID	 =  0
        SET @ERROR_TYPES=	 @ERROR_TYPES+','+ '272' 
		--SET @VALIDATION_MSG	 = 'Please inform risk coverages'
END

IF @TRANSACTION_TYPE <> 14560 AND EXISTS(SELECT * FROM POL_PRODUCT_COVERAGES (NOLOCK) WHERE CUSTOMER_ID = @CUSTOMER_ID AND POLICY_ID  = @POLICY_ID AND POLICY_VERSION_ID = @POLICY_VERSION_ID)
BEGIN
	DECLARE @WRITTEN_PREMIUM DECIMAL(25,2)
	SELECT @WRITTEN_PREMIUM =  SUM(WRITTEN_PREMIUM) FROM POL_PRODUCT_COVERAGES (NOLOCK) WHERE CUSTOMER_ID = @CUSTOMER_ID AND POLICY_ID  = @POLICY_ID AND POLICY_VERSION_ID = @POLICY_VERSION_ID
END 
IF(@TRANSACTION_TYPE <> 14560 AND (SELECT ISNULL(SUM(INSTALLMENT_AMOUNT),0) FROM ACT_POLICY_INSTALLMENT_DETAILS (NOLOCK) WHERE CUSTOMER_ID = @CUSTOMER_ID AND POLICY_ID = @POLICY_ID AND POLICY_VERSION_ID = @POLICY_VERSION_ID ) <> ISNULL(@WRITTEN_PREMIUM,0)



)
	BEGIN 
		SET @VALID	 =  0
		SET @ERROR_TYPES=	 @ERROR_TYPES+','+ '270' 
		--SET @VALIDATION_MSG	 = 'Policy coverages premium is not equal to total policy premium'
    END
    ELSE 
    SET @VALID	 =  1
    

/*
For Master Policy SELECT 
Risk information is not mandatory at NBS level
*/
	
IF (@POLICY_VERSION_ID = 1 AND @TRANSACTION_TYPE = 14560 AND @RISK_COUNT = 0)
BEGIN 
        SET @VALID	 =  1
       -- SET @ERROR_TYPES=	 @ERROR_TYPES+','+ '271' 
		--SET @VALIDATION_MSG	 = 'All Rules are verified for master policy'		
		--RETURN 
	
END 



--=======================================================
-- GET SUM INSURED OF POLICY
--=======================================================

 SELECT @SUM_INSURED= ISNULL(SUM(ISNULL(LIMIT_1,0)),0)
 FROM   POL_PRODUCT_COVERAGES
 WHERE CUSTOMER_ID = @CUSTOMER_ID AND POLICY_ID = @POLICY_ID AND POLICY_VERSION_ID = @POLICY_VERSION_ID 


--=======================================================
-- GET MAXIMUM LAYEER AMOUNT TO BE APPLIED ON POLICY
--=======================================================

SELECT @MAX_LAYER_AMOUNT = MAX(CAST(ISNULL(A.LAYER_AMOUNT,0) AS INT)) 
FROM MNT_REIN_LOSSLAYER A WITH(NOLOCK) JOIN
MNT_REIN_CONTRACT_LOB B WITH(NOLOCK) ON A.CONTRACT_ID = B.CONTRACT_ID JOIN 
POL_CUSTOMER_POLICY_LIST C WITH(NOLOCK) ON B.CONTRACT_LOB = C.POLICY_LOB JOIN 
MNT_REINSURANCE_CONTRACT D WITH(NOLOCK) ON D.CONTRACT_ID = B.CONTRACT_ID 
WHERE C.CUSTOMER_ID = @CUSTOMER_ID AND C.POLICY_ID = @POLICY_ID AND C.POLICY_VERSION_ID = @POLICY_VERSION_ID 

IF(@MAX_LAYER_AMOUNT IS NOT NULL AND @MAX_LAYER_AMOUNT >0 AND @SUM_INSURED>@MAX_LAYER_AMOUNT)
	SET @ERROR_TYPES=	 @ERROR_TYPES+','+ '296'  -- Sum insured amount cannot be greater than layer amount.

SET @ERROR_TYPES =RTRIM(LTRIM(@ERROR_TYPES))

--select @ERROR_TYPES
  -----------------------------------------------------------        
  -- ADDED BY SANTOSH KR GAUTAM ON 10 OCT 2011
  ----------------------------------------------------------- 



 IF(LEN(@ERROR_TYPES)>0 )  
    BEGIN      
    SET @IS_VALID ='N'
  END   
       

--END




/*

<<<<<<<<<<<<	Test Purpose		>>>>>>>>>>>>>>>>>>>>.
SELECT * INTO  #MyTemp	FROM (
		SELECT SUM(PR.COMMISSION_PERCENT) AS REMUN_PERCENT, SUM(CASE WHEN LEADER =10963 THEN  1  ELSE 0 END ) AS LEADER,COMMISSION_TYPE,CO_APPLICANT_ID,PAL.COMMISSION_PERCENT AS APPLICANT_COMMISSION from POL_APPLICANT_LIST PAL  (NOLOCK)
		JOIN POL_REMUNERATION  PR   (NOLOCK) ON PAL.CUSTOMER_ID =PR.CUSTOMER_ID and PAL.POLICY_ID = PR.POLICY_ID and PAL.POLICY_VERSION_ID = PR.POLICY_VERSION_ID		
		WHERE PAL.CUSTOMER_ID =@CUSTOMER_ID AND PAL.POLICY_ID = @POLICY_ID AND PAL.POLICY_VERSION_ID = @POLICTY_VERSION_ID				
		group by COMMISSION_TYPE,CO_APPLICANT_ID,PAL.COMMISSION_PERCENT
		)MyTemp
		SELECT * FROM #MyTemp
		
		DROP TABLE #MyTemp
		
		SELECT * FROM POL_REMUNERATION WHERE CUSTOMER_ID = @CUSTOMER_ID AND POLICY_ID = @POLICY_ID AND POLICY_VERSION_ID = @POLICTY_VERSION_ID 
		
		update POL_REMUNERATION set LEADER =  10964 WHERE CUSTOMER_ID = @CUSTOMER_ID AND POLICY_ID = @POLICY_ID AND POLICY_VERSION_ID = @POLICTY_VERSION_ID 
		
*/
END










GO


