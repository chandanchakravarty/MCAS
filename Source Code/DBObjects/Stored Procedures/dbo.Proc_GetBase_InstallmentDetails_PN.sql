/****** Object:  StoredProcedure [dbo].[Proc_GetBase_InstallmentDetails_PN]    Script Date: 09/16/2011 16:10:03 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Proc_GetBase_InstallmentDetails_PN]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[Proc_GetBase_InstallmentDetails_PN]
GO


/****** Object:  StoredProcedure [dbo].[Proc_GetBase_InstallmentDetails_PN]    Script Date: 09/16/2011 16:10:03 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

---------------------------------------------------------------
--Proc Name          : dbo.Proc_GetBase_InstallmentDetails_PN   
--Created by         :          
--Date               :  5 August 2011       
--------------------------------------------------------
--Date     Review By          Comments        
------   ------------       -------------------------*/       
-- drop proc dbo.[Proc_GetBase_InstallmentDetails_PN]      
CREATE  PROCEDURE [dbo].[Proc_GetBase_InstallmentDetails_PN]      
(        
 	@CUSTOMER_ID INT,
 	@POLICY_ID INT,
	@NOTICE_DUE_DATE DATE,
	@LANG_ID INT, 
	@CARRIER_CODE NVARCHAR(20)
)        
AS       
BEGIN      

DECLARE @CURRENT_TERM SmallInt
DECLARE @CURRENT_VERSION_ID SmallInt
DECLARE @DUE_DATE DateTime
DECLARE @TOTAL_FEE DECIMAL(18,2)		 
DECLARE @FIRST_INS_FEE  DECIMAL(18,2)

IF(@NOTICE_DUE_DATE IS NULL)      
BEGIN        
		SET  @NOTICE_DUE_DATE = GETDATE()      
		SELECT  @DUE_DATE = GETDATE()   
		END      
ELSE      
BEGIN            
		SET @DUE_DATE  = @NOTICE_DUE_DATE      
END     

SELECT @CURRENT_VERSION_ID =ISNULL(MAX(NEW_POLICY_VERSION_ID),0) FROM POL_POLICY_PROCESS                                               
WHERE CUSTOMER_ID=@CUSTOMER_ID                                         
	 AND POLICY_ID=@POLICY_ID                     
	 AND PROCESS_ID IN(18,25,32)                                              
	 AND ISNULL(REVERT_BACK,'N')  <> 'Y'
	 
SELECT @CURRENT_TERM           = CPL.CURRENT_TERM 
FROM POL_CUSTOMER_POLICY_LIST CPL
WHERE CPL.CUSTOMER_ID =@CUSTOMER_ID                                  
AND   CPL.POLICY_ID = @POLICY_ID                                         
AND   CPL.POLICY_VERSION_ID = @CURRENT_VERSION_ID   

DECLARE  @ARREPORT_INS TABLE             
(     
		[IDEN_ID]	Int IDENTITY(1,1) not null,                
		[AMOUNT]	Decimal(18,2) ,              
		[DUE_DATE]	Datetime,        
		[INS_NO]    Int , 
		[CURRENT_TERM]	Int
)       

INSERT INTO @ARREPORT_INS                                     
SELECT 
	--SUM( ISNULL(OI.TOTAL_DUE,0)-ISNULL(OI.TOTAL_PAID,0)),
	ISNULL(B.INSTALLMENT_AMOUNT,0),
	--CONVERT(VARCHAR,OI.DUE_DATE,101),
	CONVERT(VARCHAR,B.INSTALLMENT_EFFECTIVE_DATE,101),
	B.INSTALLMENT_NO    , B.CURRENT_TERM                                  
FROM-- ACT_CUSTOMER_OPEN_ITEMS OI WITH(NOLOCK)    
--INNER JOIN 
ACT_POLICY_INSTALLMENT_DETAILS B  WITH(NOLOCK) 
	--ON OI.INSTALLMENT_ROW_ID  = B.ROW_ID                                        
WHERE  B.CUSTOMER_ID = @CUSTOMER_ID                                         
AND B.POLICY_ID = @POLICY_ID   
--AND OI.ITEM_TRAN_CODE_TYPE <> 'FEES'  
--AND OI.ITEM_TRAN_CODE	 <>'INSF' 
GROUP BY B.INSTALLMENT_NO, B.INSTALLMENT_EFFECTIVE_DATE  , B.CURRENT_TERM  ,B.INSTALLMENT_AMOUNT
HAVING  --SUM((ISNULL(OI.TOTAL_DUE,0))-(ISNULL(OI.TOTAL_PAID,0))) <> 0                                              
B.INSTALLMENT_AMOUNT<>0
ORDER BY  B.CURRENT_TERM  , B.INSTALLMENT_NO 

DECLARE @AMOUNT DECIMAL(18,2),
		@IDENT_COL INT
SET @IDENT_COL = 1    
WHILE (1= 1) 
BEGIN 
	IF NOT EXISTS (SELECT IDEN_ID FROM @ARREPORT_INS  WHERE IDEN_ID = @IDENT_COL ) 
	BEGIN 
		BREAK
	END
	SELECT  @AMOUNT = AMOUNT FROM @ARREPORT_INS  WHERE IDEN_ID = @IDENT_COL 

	IF (@AMOUNT < 0 ) 
	BEGIN 
		IF EXISTS (SELECT IDEN_ID FROM @ARREPORT_INS  WHERE IDEN_ID = @IDENT_COL + 1 ) 
		BEGIN 
			UPDATE @ARREPORT_INS  SET AMOUNT = AMOUNT + @AMOUNT WHERE IDEN_ID = @IDENT_COL + 1 
			UPDATE @ARREPORT_INS  SET AMOUNT = 0 WHERE IDEN_ID = @IDENT_COL 	
		END
		ELSE 
		BEGIN
			DECLARE @AMOUNT_CURRENT_INS DECIMAL(18,2)
			SELECT @AMOUNT_CURRENT_INS  = AMOUNT FROM @ARREPORT_INS WHERE IDEN_ID = @IDENT_COL 
			IF(@AMOUNT_CURRENT_INS < 0)
			BEGIN
				DECLARE @PREV_NON_ZERO_INS	Int
				SELECT TOP 1 @PREV_NON_ZERO_INS	 = IDEN_ID  FROM @ARREPORT_INS WHERE IDEN_ID < @IDENT_COL
				AND AMOUNT > 0 ORDER BY IDEN_ID DESC
				
				UPDATE @ARREPORT_INS  SET AMOUNT = AMOUNT + @AMOUNT_CURRENT_INS WHERE IDEN_ID = @PREV_NON_ZERO_INS
				UPDATE @ARREPORT_INS  SET AMOUNT = 0 WHERE IDEN_ID = @IDENT_COL
				
			END	
		END
	END 
	SET @IDENT_COL = @IDENT_COL + 1
   
END    

DELETE  FROM @ARREPORT_INS WHERE AMOUNT = 0 

--------------


-- FETCH FEE ONLY
DECLARE @ARREPORT_INS_FEE   TABLE
(  
		[IDEN_ID] int IDENTITY(1,1) not null,                       
		[AMOUNT]  Decimal(18,2),
		[DUE_DATE] datetime,            
		[INS_NO]   int       
)

INSERT INTO @ARREPORT_INS_FEE                                                   
SELECT 
SUM( ISNULL(OI.TOTAL_DUE,0)-ISNULL(OI.TOTAL_PAID,0)) ,                                              
CONVERT(VARCHAR,OI.DUE_DATE,101) AS DUE_DATE 
,B.INSTALLMENT_NO AS INS_NO                                   
FROM ACT_CUSTOMER_OPEN_ITEMS OI WITH(NOLOCK)                                           
INNER JOIN ACT_POLICY_INSTALLMENT_DETAILS B WITH(NOLOCK)                             
	ON OI.INSTALLMENT_ROW_ID  = B.ROW_ID                    
WHERE  B.CUSTOMER_ID = @CUSTOMER_ID                               
AND B.POLICY_ID = @POLICY_ID  
AND B.CURRENT_TERM = @CURRENT_TERM  
AND OI.ITEM_TRAN_CODE_TYPE = 'FEES'  
AND OI.ITEM_TRAN_CODE = 'INSF' 
GROUP BY B.INSTALLMENT_NO, OI.DUE_DATE  , ISNULL(B.CURRENT_TERM,50)
HAVING  SUM((ISNULL(OI.TOTAL_DUE,0))-(ISNULL(OI.TOTAL_PAID,0))) <> 0                                              
ORDER BY B.INSTALLMENT_NO



-- UPDATE INSTALLMENT AMOUNT WITH FEE AMOUNT

UPDATE @ARREPORT_INS 
SET AMOUNT = A.AMOUNT + FEES.AMOUNT
FROM @ARREPORT_INS A INNER JOIN @ARREPORT_INS_FEE FEES
	ON A.INS_NO = FEES.INS_NO
WHERE A.DUE_DATE > @DUE_DATE
	AND A.DUE_DATE = FEES.DUE_DATE

 
DECLARE @SUM_AMOUNT NVARCHAR(100)

UPDATE @ARREPORT_INS
SET DUE_DATE = @DUE_DATE WHERE
CAST(CONVERT(VARCHAR,DUE_DATE, 101) AS DATETIME) <=  
CAST(CONVERT(VARCHAR,@DUE_DATE, 101) AS DATETIME) 

--IF @IS_EOD = 1
BEGIN  
	UPDATE ACT_CUSTOMER_OPEN_ITEMS SET DUE_DATE = @DUE_DATE ,
			SWEEP_DATE = @DUE_DATE 
	WHERE CUSTOMER_ID	= @CUSTOMER_ID 
	AND POLICY_ID		= @POLICY_ID 
	AND INSTALLMENT_ROW_ID 
	IN (
		SELECT INSD.ROW_ID FROM ACT_POLICY_INSTALLMENT_DETAILS INSD
		INNER JOIN @ARREPORT_INS INS_SCH
		ON INSD.INSTALLMENT_NO  = INS_SCH.INS_NO
		AND INSD.CURRENT_TERM	= INS_SCH.CURRENT_TERM 
		WHERE INSD.CUSTOMER_ID  = @CUSTOMER_ID 
		AND   INSD.POLICY_ID	= @POLICY_ID 
		AND CAST(CONVERT(VARCHAR,INS_SCH.DUE_DATE, 101) AS DATETIME) <=  
		CAST(CONVERT(VARCHAR,@DUE_DATE, 101) AS DATETIME) 
		)
END

DECLARE @ARREPORT_JUNRAL TABLE
(   
 [IDEN_COL] int IDENTITY(1,1) not null,
 [AMOUNT_J] decimal(18,2),
 [CREATED_DATETIME] datetime            
)
INSERT INTO @ARREPORT_JUNRAL         
SELECT ISNULL(TOTAL_DUE ,0) - ISNULL(TOTAL_PAID, 0)  , DUE_DATE 
FROM ACT_CUSTOMER_OPEN_ITEMS  WITH(NOLOCK)
WHERE CUSTOMER_ID =@CUSTOMER_ID AND  POLICY_ID=@POLICY_ID
AND 
(	
	UPDATED_FROM ='F'
	OR 
	( UPDATED_FROM =  'J' AND ITEM_TRAN_CODE_TYPE  = 'JE' )
	OR
	(UPDATED_FROM =  'P' AND ITEM_TRAN_CODE = 'CANCP') 
)

-- Run While loop for updation of amount
declare @TRAN_DATE DATETIME

SET @IDENT_COL = 1    
WHILE (1= 1) 
BEGIN 
	IF NOT EXISTS (SELECT IDEN_COL FROM @ARREPORT_JUNRAL    WHERE IDEN_COL = @IDENT_COL ) 
	BEGIN 
		BREAK
	END
	SELECT  @AMOUNT = AMOUNT_J ,
			@TRAN_DATE  = CREATED_DATETIME
	FROM @ARREPORT_JUNRAL  
	WHERE IDEN_COL = @IDENT_COL 

	UPDATE @ARREPORT_INS
 	SET AMOUNT = AMOUNT + @AMOUNT
	WHERE CAST(CONVERT(VARCHAR,DUE_DATE,101) AS DATETIME)
			> =  CAST(CONVERT(VARCHAR, @TRAN_DATE ,101) AS DATETIME)
	AND IDEN_ID = (SELECT TOP 1 TMP_IN.IDEN_ID FROM @ARREPORT_INS TMP_IN  --WITH(NOLOCK) 
			WHERE 	CAST(CONVERT(VARCHAR, TMP_IN.DUE_DATE,101) AS DATETIME)
			> =  CAST(CONVERT(VARCHAR, @TRAN_DATE ,101) AS DATETIME)
			ORDER BY TMP_IN.DUE_DATE , TMP_IN.IDEN_ID ) 


	SET @IDENT_COL = @IDENT_COL + 1
   
END    

SELECT 
@SUM_AMOUNT = ((CONVERT(NVARCHAR(100),SUM(CONVERT(MONEY,AMOUNT,1))) +  @TOTAL_FEE)) + @FIRST_INS_FEE
FROM @ARREPORT_INS  --WITH(NOLOCK) WHERE DUE_DATE = @DUE_DATE


DECLARE @MIN_INS_ROW_ID Int

SELECT @MIN_INS_ROW_ID = MIN ( IDEN_ID ) 
FROM @ARREPORT_INS WHERE DATEDIFF(DD,	DUE_DATE ,@DUE_DATE ) = 0 

UPDATE @ARREPORT_INS 
SET AMOUNT = @SUM_AMOUNT,
INS_NO = 1
WHERE IDEN_ID = @MIN_INS_ROW_ID 


UPDATE @ARREPORT_INS 
SET AMOUNT = 0 
WHERE IDEN_ID <> @MIN_INS_ROW_ID 
AND DATEDIFF(DD,	DUE_DATE ,@DUE_DATE ) = 0 

DELETE  FROM @ARREPORT_INS WHERE AMOUNT = 0 


DECLARE  @INSEPORT TABLE             
(     
		[IDEN_ID]	Int IDENTITY(1,1) not null,                
		[AMOUNT]	NVARCHAR(30),              
		[DUE_DATE]	Datetime 
)  

INSERT INTO @INSEPORT
		
SELECT                                       
'$ ' + convert(varchar(30), convert(money,SUM(AMOUNT)),1) AS AMOUNT,
CONVERT(VARCHAR, DUE_DATE,101) AS DUE_DATE--,
--CAST (DUE_DATE AS DATETIME) AS DUE_DATE_ACTUAL 
FROM @ARREPORT_INS
--WITH(NOLOCK)
 GROUP BY DUE_DATE 
ORDER BY DUE_DATE  
ASC 



DECLARE @IDENT_COLN INT
		DECLARE @TEMPINST VARCHAR(MAX)
		DECLARE @TEMPINST1 VARCHAR(MAX)
		SET @IDENT_COLN=1
		SET @TEMPINST=''
		SET @TEMPINST1=''
		
		WHILE(1=1)
			BEGIN
					IF NOT EXISTS (SELECT IDEN_ID FROM @INSEPORT WHERE IDEN_ID = @IDENT_COLN)     
						BEGIN     
							BREAK    
						END 
						SET @TEMPINST=''
					SELECT @TEMPINST = '<INSROW ID='''+CONVERT(NVARCHAR(20),@IDENT_COLN)+'''><DUE_DATE>'+CONVERT(VARCHAR, DUE_DATE,101)+'</DUE_DATE><AMOUNT>'+'$ ' + convert(varchar(30), convert(money,ISNULL(AMOUNT,0)),1)+'</AMOUNT></INSROW>'	
					FROM @INSEPORT where IDEN_ID = @IDENT_COLN 
					
					SET @TEMPINST1 = @TEMPINST1 + @TEMPINST
				SET @IDENT_COLN=@IDENT_COLN + 1
			END
		SELECT @TEMPINST1 AS InstalmentDetails	


--DROP TABLE @ARREPORT_INS 
End

GO

