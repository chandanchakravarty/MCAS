/****** Object:  StoredProcedure [dbo].[PROC_MIG_IL_INSERT_POLICY_BILLING_INFO]    Script Date: 12/02/2011 15:59:43 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROC_MIG_IL_INSERT_POLICY_BILLING_INFO]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROC_MIG_IL_INSERT_POLICY_BILLING_INFO]
GO
/****** Object:  StoredProcedure [dbo].[PROC_MIG_IL_INSERT_POLICY_BILLING_INFO]    Script Date: 12/02/2011 15:59:43 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
-- =============================================            
-- Modified by:  <Pradeep Kr. Kushwaha>            
-- Create date: <15-11-2011>            
-- Description: <Insert data in MIG IL boleto POLICY TABLE >            
-- DROP proc [PROC_MIG_IL_INSERT_POLICY_BILLING_INFO]  1602
-- ============================================= 
CREATE PROCEDURE [dbo].[PROC_MIG_IL_INSERT_POLICY_BILLING_INFO]         
            
 @IMPORT_REQUEST_ID INT            
         
AS                                      
BEGIN                               
          
 SET NOCOUNT ON;     
     
 DECLARE @ERROR_NUMBER    INT      
 DECLARE @ERROR_SEVERITY  INT      
 DECLARE @ERROR_STATE     INT      
 DECLARE @ERROR_PROCEDURE VARCHAR(512)      
 DECLARE @ERROR_LINE    INT      
 DECLARE @ERROR_MESSAGE   NVARCHAR(MAX)      
     
 BEGIN TRY      
      
   DECLARE @CUSTOMER_ID INT      
   DECLARE @POLICY_ID INT      
   DECLARE @POLICY_VERSION_ID INT      
   DECLARE @POLICY_LOB INT      
   DECLARE @APPLICANT_ID INT      
   DECLARE @LOCATION_ID INT      
   DECLARE @IMPORT_SERIAL_NO INT         
   DECLARE @MAX_RECORD_COUNT INT           
   DECLARE @LOOP_CUST_CODE NVARCHAR(50)       
   DECLARE @LOOP_CUST_STATUS NVARCHAR(2)       
   DECLARE @COUNTER INT  =1      
   DECLARE @ERROR_NO   INT =0      
   DECLARE @COUNT INT  =0    
   DECLARE @RISK_ID INT      
   DECLARE @APPLICANT_CODE NVARCHAR(50)    
   DECLARE @MAIN_INSURED NVARCHAR(50)    
   DECLARE @IS_SPOUSE_OR_CHILD INT     
   DECLARE @LOCATION_CODE NVARCHAR(50)    
          
   DECLARE @IMPORT_FILE_NAME NVARCHAR(50)             
   DECLARE @IMPORT_POLICY_FILE_TYPE INT = 14939 -- FOR POLICY FILE TYPE          
   DECLARE @IMPORT_BILLING_FILE_TYPE INT = 14969 -- FOR Billing Info  
   DECLARE @LOOP_POLICY_SEQUANCE_NO INT                
   DECLARE @LOOP_END_SEQUANCE_NO INT          
   DECLARE @LOOP_RISK_SEQUENCE INT    
   DECLARE @PROTECTIVE_DEVICE_ID INT      
   DECLARE @LOCATION_NUMBER INT     
   DECLARE @ITEM_NUMBER INT     
   DECLARE @PAYMENT_MODE INT  
   DECLARE @CURRENT_TERM INT    
   DECLARE @TOTAL_PREMIUM DECIMAL(25,2)  
   DECLARE @TOTAL_FEES DECIMAL(25,2)  
   DECLARE @TOTAL_TAX DECIMAL(25,2)  
   DECLARE @TOTAL_INTEREST DECIMAL(25,2)  
   DECLARE @TOTAL_AMOUNT DECIMAL(25,2)  
   DECLARE @INSTALLMENT_SEQUENTIAL INT    
   DECLARE @LOB_ID INT    
   DECLARE @OUR_NUMBER NVARCHAR(20)=NULL
   DECLARE @TRANSACTION_TYPE INT 
   DECLARE @PROCESS_TYPE INT    --- Change   
   DECLARE @INSTALLMENT_NO INT
  CREATE TABLE #TempBilling(    
	  ID INT IDENTITY(1,1),  
	  IMPORT_REQUEST_ID INT,  
	  IMPORT_SERIAL_NO INT,  
	  POLICY_SEQUANCE_NO INT NULL,  
	  END_SEQUANCE_NO INT NULL,  
	  INSTALLMENT_SEQUENCE INT NULL, 
	  OUR_NUMBER NVARCHAR(20) NULL,
	  INSTALLMENT_NO INT
  )    
    
    
    
  INSERT INTO #TempBilling     
  (    
    IMPORT_REQUEST_ID,    
    IMPORT_SERIAL_NO,    
    POLICY_SEQUANCE_NO,    
    END_SEQUANCE_NO,    
    INSTALLMENT_SEQUENCE,   
    OUR_NUMBER,
    INSTALLMENT_NO
  )     
  (     
  SELECT  IMPORT_REQUEST_ID,    
    IMPORT_SERIAL_NO,    
    POLICY_SEQUENTIAL,    
    ENDORSEMENT_SEQUENTIAL,    
    INSTALLMENT_SEQUENTIAL,
    OUR_NUMBER,
    INSTALLMENT
  FROM MIG_IL_POLICY_BILLING_DETAILS (NOLOCK)     
  WHERE IMPORT_REQUEST_ID =@IMPORT_REQUEST_ID AND HAS_ERRORS = 0    
  )    
      
  SELECT @MAX_RECORD_COUNT = COUNT(ID) FROM #TempBilling    
    
  --SELECT * INTO #tempINSTALLMENT_DETAIL FROM  ACT_POLICY_INSTALLMENT_DETAILS WHERE  1=2  
   
  CREATE TABLE #tempINSTALLMENT_DETAIL (  
				CUSTOMER_ID INT,  
				POLICY_ID INT,  
				POLICY_VERSION_ID INT,  
				APP_ID INT,  
				APP_VERSION_ID INT,  
				INSTALLMENT_NO INT NULL,  
				CO_APPLICANT_ID INT NULL,  
				INSTALLMENT_EFFECTIVE_DATE DATETIME NULL,  
				INSTALLMENT_AMOUNT DECIMAL(25,2) NULL,  
				INTEREST_AMOUNT DECIMAL(25,2) NULL,  
				FEE DECIMAL(25,2) NULL,  
				TAXES DECIMAL(25,2),  
				TOTAL DECIMAL(25,2),  
				INSTALLMENT_EXPIRE_DATE DATETIME NULL,  
				RELEASED_STATUS CHAR(1) NULL,  
				RECEIVED_DATE DATETIME NULL,  
				CREATED_DATETIME DATETIME NULL,  
				PAYMENT_MODE INT NULL ,  
				CURRENT_TERM SMALLINT NULL,  
				TRAN_PREMIUM_AMOUNT DECIMAL(25,2) NULL,  
				TRAN_INTEREST_AMOUNT DECIMAL(25,2) NULL,  
				TRAN_FEE DECIMAL(25,2) NULL,  
				TRAN_TAXES DECIMAL(25,2) NULL,  
				TRAN_TOTAL DECIMAL(25,2) NULL,  
				CREATED_BY INT NULL,  
				PAID_AMOUNT DECIMAL(25,2) NULL,
				OUR_NUMBER NVARCHAR(20) NULL,
				-----MG IL BOLETO--- 
				IS_BOLETO_GENERATED BIT NULL,
				BOLETO_GENERATED_DATE DATETIME NULL,
				ALBA_BANK_NUMBER NVARCHAR(20) NULL,
				CURRENCY NVARCHAR(20) NULL,
				AGREEMENT_BETWEEN_ALBA_AND_BANK NVARCHAR(20) NULL,
				FIRST_DIGIT_OF_SEQUENCE_NUMBER NVARCHAR(20) NULL,
				VERIFIER_DIGIT_FIRST_BLOCK NVARCHAR(20) NULL,
				SECOND_TO_SEVENTH_DIGIT_SEQUENCE NVARCHAR(20) NULL,
				ALBA_BANK_BRANCH_NUMBER NVARCHAR(20) NULL,
				VERIFIER_DIGIT_SECOND_BLOCK NVARCHAR(20) NULL,
				ALBA_BANK_ACCOUNT_NUMBER NVARCHAR(20) NULL,
				ALBA_VERIFIER_DIGIT_BANK_ACCOUNT NVARCHAR(20) NULL,
				FIXED_VALUE NVARCHAR(20) NULL,
				VERIFIER_DIGIT_THIRD_BLOCK NVARCHAR(20) NULL,
				VERIFIER_DIGIT_BAR_CODE NVARCHAR(20) NULL,
				DUE_DATE_FACTOR NVARCHAR(20) NULL,
				BOLETO_AMOUNT NVARCHAR(20) NULL
        )  
  --select * from #tempINSTALLMENT_DETAIL  
  CREATE TABLE #tempINSTALLMENT_DATA (  
			  CUSTOMER_ID INT,  
			  POLICY_ID INT,  
			  POLICY_VERSION_ID INT,  
			  TOTAL_PREMIUM DECIMAL(25,2),  
			  TOTAL_INTEREST DECIMAL(25,2),  
			  TOTAL_FEES DECIMAL(25,2),  
			  TOTAL_TAX DECIMAL(25,2),  
			  TOTAL_AMOUNT DECIMAL(25,2),  
			  TOTAL_TRAN_PREMIUM DECIMAL(25,2),  
			  TOTAL_TRAN_INTEREST DECIMAL(25,2),  
			  TOTAL_TRAN_FEES DECIMAL(25,2),  
			  TOTAL_TRAN_TAX DECIMAL(25,2),  
			  TOTAL_TRAN_AMOUNT DECIMAL(25,2),  
			  TRAN_TYPE NVARCHAR(10),  
			  TOTAL_INFO_PREMIUM DECIMAL(25,2),  
			  TOTAL_CHANGE_PREMIUM DECIMAL(25,2),  
			  CO_APPLICANT_ID INT  
  )  
  
  ------------------------------------                
     -- GET FILE NAME          
     ------------------------------------             
    IF(@MAX_RECORD_COUNT>0)          
    BEGIN          
              
  SELECT @IMPORT_FILE_NAME = SUBSTRING(ISNULL(DISPLAY_FILE_NAME,''),1,9)           
  FROM  MIG_IL_IMPORT_REQUEST_FILES        
  WHERE IMPORT_REQUEST_ID  = @IMPORT_REQUEST_ID AND          
     IMPORT_FILE_TYPE   = @IMPORT_BILLING_FILE_TYPE            
              
    END          
      
 
  WHILE (@COUNTER<=@MAX_RECORD_COUNT)    
  BEGIN     
    
      
       
   SET @ERROR_NO=0              
   SET @APPLICANT_ID=0        
   SET @CUSTOMER_ID=0          
   SET @POLICY_ID=0          
   SET @POLICY_VERSION_ID=0          
   SET @RISK_ID=0    
   SET @LOCATION_ID=0    
   SET @APPLICANT_CODE=NULL    
   SET @LOCATION_CODE=NULL    
   SET @PROTECTIVE_DEVICE_ID=0    
   SET @LOCATION_NUMBER=0    
   SET @ITEM_NUMBER=0    
   SET @IS_SPOUSE_OR_CHILD=0  
   SET @OUR_NUMBER=NULL
   SET @TRANSACTION_TYPE=0
   SET @PROCESS_TYPE =0
   SET @INSTALLMENT_NO=0
   
   SELECT           
   @IMPORT_SERIAL_NO            = IMPORT_SERIAL_NO ,              
   @LOOP_POLICY_SEQUANCE_NO     = POLICY_SEQUANCE_NO  ,            
   @LOOP_END_SEQUANCE_NO        = END_SEQUANCE_NO,              
   @INSTALLMENT_SEQUENTIAL      = INSTALLMENT_SEQUENCE, 
   @OUR_NUMBER					= OUR_NUMBER,
   @INSTALLMENT_NO				= INSTALLMENT_NO
   FROM   #TempBilling (NOLOCK) WHERE ID   = @COUNTER     
       
     -------------------------------------------------------                
     -- GET CUSTOMER ID, POLICY ID , POLICY VERSION ID   AND LOB ID       
     -------------------------------------------------------           
      SELECT  @CUSTOMER_ID			= CUSTOMER_ID ,          
			  @POLICY_ID			= POLICY_ID,          
			  @POLICY_VERSION_ID    = POLICY_VERSION_ID ,      
			  @POLICY_LOB           = LOB_ID ,   
			  @PROCESS_TYPE			= PROCESS_TYPE				
     FROM   MIG_IL_IMPORT_SUMMARY          
     WHERE  POLICY_SEQUENTIAL       = @LOOP_POLICY_SEQUANCE_NO AND          
      ENDORSEMENT_SEQUENTIAL		= @LOOP_END_SEQUANCE_NO    AND     
      FILE_TYPE						= @IMPORT_POLICY_FILE_TYPE AND          
      [FILE_NAME]					= @IMPORT_FILE_NAME        AND          
      IS_ACTIVE						= 'Y'        
      
	 SELECT	 @CURRENT_TERM			= CURRENT_TERM,
			 @PAYMENT_MODE			= DOWN_PAY_MODE ,  
			 @LOB_ID				= POLICY_LOB  ,
			 @TRANSACTION_TYPE		= TRANSACTION_TYPE  
	  FROM POL_CUSTOMER_POLICY_LIST (NOLOCK) 
	  WHERE CUSTOMER_ID				= @CUSTOMER_ID  
	  AND POLICY_ID				    = @POLICY_ID 
	  AND POLICY_VERSION_ID			= @POLICY_VERSION_ID  
 
              
       IF(@CUSTOMER_ID IS NULL OR @CUSTOMER_ID='' OR @CUSTOMER_ID=0)    
         SET @ERROR_NO =53 -- Application/Policy does not exists    
       ELSE    
		   BEGIN     
			IF(@TRANSACTION_TYPE=14560)--Master Policy
				BEGIN
				 SELECT  @APPLICANT_CODE	= COAPPLICANT_CODE       
				 FROM MIG_IL_POLICY_BILLING_DETAILS WITH(NOLOCK)     
				 WHERE 
					IMPORT_REQUEST_ID		= @IMPORT_REQUEST_ID AND     
					IMPORT_SERIAL_NO		= @IMPORT_SERIAL_NO     
			            
				 SELECT @APPLICANT_ID=PAL.APPLICANT_ID     
				 FROM POL_APPLICANT_LIST PAL WITH(NOLOCK)  INNER JOIN    
				 CLT_APPLICANT_LIST CAL WITH(NOLOCK) ON    
				 PAL.CUSTOMER_ID			=	CAL.CUSTOMER_ID   
				 AND PAL.APPLICANT_ID		=	CAL.APPLICANT_ID    
				 WHERE PAL.CUSTOMER_ID		=	@CUSTOMER_ID   
				 AND PAL.POLICY_ID			=	@POLICY_ID    
				 AND PAL.POLICY_VERSION_ID	=	@POLICY_VERSION_ID   
				 AND CAL.CONTACT_CODE		=	@APPLICANT_CODE    
			  END
			ELSE
			  BEGIN --Normal Policy Get the Primary Applicant of the Policy
				SELECT TOP 1 @APPLICANT_ID=APPLICANT_ID 
				FROM POL_APPLICANT_LIST NOLOCK 
				WHERE CUSTOMER_ID		   =	@CUSTOMER_ID 
				AND POLICY_ID			   =	@POLICY_ID 
				AND POLICY_VERSION_ID	   =	@POLICY_VERSION_ID 
				AND IS_PRIMARY_APPLICANT   =	1				     
			  END 
		   END  
       
      IF (@APPLICANT_ID IS NULL OR @APPLICANT_ID=0)  
			SET @ERROR_NO =51 --  Co-applicant does not exists.     
      ELSE IF EXISTS(SELECT 1 FROM POL_INSTALLMENT_BOLETO NOLOCK WHERE OUR_NUMBER=@OUR_NUMBER)
			SET @ERROR_NO =140 --  Our Number already exists.     
  ----get policy Information  
 
   IF(@ERROR_NO> 0)        
    BEGIN        
                
    UPDATE MIG_IL_POLICY_BILLING_DETAILS        
    SET    HAS_ERRORS=1              
    WHERE  IMPORT_REQUEST_ID = @IMPORT_REQUEST_ID AND         
     IMPORT_SERIAL_NO  = @IMPORT_SERIAL_NO         
       
       
    EXEC  [PROC_MIG_IL_INSERT_IMPORT_ERROR_DETAILS]                         
   @IMPORT_REQUEST_ID     = @IMPORT_REQUEST_ID,              
   @IMPORT_SERIAL_NO      = @IMPORT_SERIAL_NO  ,                  
   @ERROR_SOURCE_FILE     = ''     ,              
   @ERROR_SOURCE_COLUMN   = ''     ,              
   @ERROR_SOURCE_COLUMN_VALUE= '' ,              
   @ERROR_ROW_NUMBER      = @IMPORT_SERIAL_NO   ,                
   @ERROR_TYPES           = @ERROR_NO,           
   @ACTUAL_RECORD_DATA    = '' ,              
   @ERROR_MODE            = 'VE',  -- VALIDATION ERROR              
   @ERROR_SOURCE_TYPE     = 'BILL'           
  END      
  ELSE  
  BEGIN  
    
  IF(@PROCESS_TYPE IN(1,3)) -- NBS AND ENDORESMENT ADDED BY PRADEEP
  BEGIN
    
  --SELECT * FROM ACT_POLICY_INSTALLMENT_DETAILS  
    INSERT INTO #tempINSTALLMENT_DETAIL   
    (  
		CUSTOMER_ID,					
		POLICY_ID,  
		POLICY_VERSION_ID,  
		APP_ID,  
		APP_VERSION_ID,  
		INSTALLMENT_NO,  
		CO_APPLICANT_ID,  
		INSTALLMENT_EFFECTIVE_DATE,  
		INSTALLMENT_AMOUNT,  
		INTEREST_AMOUNT,  
		FEE,  
		TAXES,  
		TOTAL,  
		INSTALLMENT_EXPIRE_DATE,  
		RELEASED_STATUS,  
		RECEIVED_DATE,  
		CREATED_DATETIME,  
		PAYMENT_MODE,  
		CURRENT_TERM,  
		TRAN_PREMIUM_AMOUNT,  
		TRAN_INTEREST_AMOUNT,  
		TRAN_FEE,  
		TRAN_TAXES,  
		TRAN_TOTAL,  
		CREATED_BY,  
		PAID_AMOUNT,
		OUR_NUMBER,
		--MG IL BOLETO
		IS_BOLETO_GENERATED,
		BOLETO_GENERATED_DATE,
		ALBA_BANK_NUMBER,
		CURRENCY,
		AGREEMENT_BETWEEN_ALBA_AND_BANK,
		FIRST_DIGIT_OF_SEQUENCE_NUMBER,
		VERIFIER_DIGIT_FIRST_BLOCK,
		SECOND_TO_SEVENTH_DIGIT_SEQUENCE,
		ALBA_BANK_BRANCH_NUMBER,
		VERIFIER_DIGIT_SECOND_BLOCK,
		ALBA_BANK_ACCOUNT_NUMBER,
		ALBA_VERIFIER_DIGIT_BANK_ACCOUNT,
		FIXED_VALUE,
		VERIFIER_DIGIT_THIRD_BLOCK,
		VERIFIER_DIGIT_BAR_CODE,
		DUE_DATE_FACTOR,
		BOLETO_AMOUNT  
	)   
     
     SELECT   
		@CUSTOMER_ID,  
		@POLICY_ID,  
		@POLICY_VERSION_ID,  
		@POLICY_ID,  
		@POLICY_VERSION_ID,  
		INSTALLMENT,  
		@APPLICANT_ID,  
		INSTALL_DATE,  
		PREMIUM,  
		INTEREST_AMOUNT,      
		FEES,  
		TAXES,  
		TOTAL,  
		EXPIRE_DATE,  
		STATUS,  
		RECEIVED_DATE,  
		INSTALLMENT_ISSUE_DATE,  
		@PAYMENT_MODE,  
		@CURRENT_TERM,  
		PREMIUM,  
		INTEREST_AMOUNT,      
		FEES,  
		TAXES,  
		TOTAL,  
		dbo.fun_GetDefaultUserID(),  
		RECEIPT_AMOUNT ,
		OUR_NUMBER,
		--MG IL BOLETO
		0,
		NULL,
		ALBA_BANK_NUMBER,
		CURRENCY,
		AGREEMENT_NUMBER,
		FIRST_DIGIT_OF_SEQUENCE_NUMBER,
		VERIFIER_DIGIT_FIRST_BLOCK,
		SECOND_TO_SEVENTH_DIGIT_OF_SEQUENCE_NUMBER,
		ALBA_BANK_BRANCH_NUMBER,
		VERIFIER_DIGIT_SECOND_BLOCK,
		ALBA_BANK_ACCOUNT_NUMBER,
		ALBA_VERIFIER_DIGIT,
		FIXED_VALUE,
		VERIFIER_DIGIT_THIRD_BLOCK,
		VERIFIER_DIGIT_BAR_CODE,
		DUE_DATE_FACTOR,
		BOLETO_AMOUNT
       
       
     FROM     
     MIG_IL_POLICY_BILLING_DETAILS MIPBD WITH(NOLOCK)    
     WHERE IMPORT_REQUEST_ID = @IMPORT_REQUEST_ID AND    
     IMPORT_SERIAL_NO  = @IMPORT_SERIAL_NO      
      
  END 
  ELSE IF(@PROCESS_TYPE =2)--FOR CANCELLATION PROCESS    ADDED BY PRADEEP 
  BEGIN
  
   
		-- UPDATE EXISTING DETAILS
       UPDATE ACT_POLICY_INSTALLMENT_DETAILS               
       SET	  
		  RELEASED_STATUS			= CASE WHEN T.[STATUS] IS NULL OR T.[STATUS]='' OR T.[STATUS]<>'C' THEN RELEASED_STATUS ELSE 
											CASE  WHEN T.[STATUS]='C' THEN T.[STATUS] ELSE RELEASED_STATUS END  END
         ,MODIFIED_BY				= dbo.fun_GetDefaultUserID()  
		 ,LAST_UPDATED_DATETIME		= getdate()  
	     FROM ACT_POLICY_INSTALLMENT_DETAILS APID  INNER JOIN
	     (
	        SELECT  CUSTOMER_ID
	               ,POLICY_ID
	               ,POLICY_VERSION_ID
	               ,INSTALLMENT 
				   ,[STATUS]
		    FROM   MIG_IL_POLICY_BILLING_DETAILS  
		    WHERE  IMPORT_REQUEST_ID = @IMPORT_REQUEST_ID AND 
		           IMPORT_SERIAL_NO  = @IMPORT_SERIAL_NO
			   
	     )T ON T.CUSTOMER_ID= APID.CUSTOMER_ID AND T.POLICY_ID=APID.POLICY_ID AND T.POLICY_VERSION_ID=APID.POLICY_VERSION_ID AND T.INSTALLMENT=APID.INSTALLMENT_NO
	     
	     WHERE APID.CUSTOMER_ID =@CUSTOMER_ID AND APID.POLICY_ID=@POLICY_ID AND APID.POLICY_VERSION_ID=@POLICY_VERSION_ID AND APID.INSTALLMENT_NO=@INSTALLMENT_NO AND APID.CO_APPLICANT_ID=@APPLICANT_ID
  END
      
  
       
       
    ------------------------------------          
   -- UPDATE IMPORT DETAILS    
   ------------------------------------             
    UPDATE MIG_IL_POLICY_BILLING_DETAILS  
    SET    CUSTOMER_ID    = @CUSTOMER_ID,    
     POLICY_ID         = @POLICY_ID,    
     POLICY_VERSION_ID = @POLICY_VERSION_ID,    
     IS_PROCESSED      = 'Y'    
    WHERE  IMPORT_REQUEST_ID = @IMPORT_REQUEST_ID AND    
     IMPORT_SERIAL_NO  = @IMPORT_SERIAL_NO    
        
    
  ------------------------------------              
  -- INSERT IMPORT SUMMARY      
  ------------------------------------             
       EXEC [PROC_MIG_IL_INSERT_IMPORT_SUMMARY]           
    @IMPORT_REQUEST_ID   = @IMPORT_REQUEST_ID,      
    @IMPORT_SERIAL_NO    = @IMPORT_SERIAL_NO,       
    @CUSTOMER_ID         = @CUSTOMER_ID ,      
    @POLICY_ID           = @POLICY_ID,      
    @POLICY_VERSION_ID   = @POLICY_VERSION_ID,      
    @IS_ACTIVE           = 'Y',      
    @IS_PROCESSED        = 'Y',      
    @FILE_TYPE           = @IMPORT_BILLING_FILE_TYPE,      
    @FILE_NAME              = @IMPORT_FILE_NAME,      
    @CUSTOMER_SEQUENTIAL    = NULL,      
    @POLICY_SEQUENTIAL      = @LOOP_POLICY_SEQUANCE_NO,       
    @ENDORSEMENT_SEQUENTIAL = @LOOP_END_SEQUANCE_NO,      
    @IMPORT_SEQUENTIAL      = @INSTALLMENT_SEQUENTIAL,      
    @IMPORT_SEQUENTIAL2     = NULL,      
    @LOB_ID           = @LOB_ID ,       
    @IMPORTED_RECORD_ID     = @LOCATION_ID  ,
    @PROCESS_TYPE			= @PROCESS_TYPE    --- Change            
   END  
       
       
       SET @COUNTER += 1  
  END       
  
 IF(@PROCESS_TYPE <>2)
 BEGIN 
   
 INSERT INTO #tempINSTALLMENT_DATA  
 ( CUSTOMER_ID,  
   POLICY_ID,  
   POLICY_VERSION_ID,  
   TOTAL_PREMIUM,  
   TOTAL_INTEREST,  
   TOTAL_FEES,  
   TOTAL_TAX,  
   TOTAL_AMOUNT,  
   TOTAL_TRAN_PREMIUM,  
   TOTAL_TRAN_INTEREST,  
   TOTAL_TRAN_FEES,  
   TOTAL_TRAN_TAX,  
   TOTAL_TRAN_AMOUNT,  
   TRAN_TYPE,  
   TOTAL_CHANGE_PREMIUM,  
   TOTAL_INFO_PREMIUM,  
   CO_APPLICANT_ID  
   )  
    
 SELECT 
 @CUSTOMER_ID,  
 @POLICY_ID,  
 @POLICY_VERSION_ID,  
SUM(INSTALLMENT_AMOUNT),   
 SUM(INTEREST_AMOUNT),  
 SUM(FEE),   
 SUM(TAXES),  
 SUM(TOTAL),  
 SUM(INSTALLMENT_AMOUNT),   
 SUM(INTEREST_AMOUNT),  
 SUM(FEE),   
 SUM(TAXES),  
 SUM(TOTAL),  
    'NBS',  
    12000,  
    10000,  
    CO_APPLICANT_ID  
    FROM  #tempINSTALLMENT_DETAIL (NOLOCK)  
 GROUP BY CUSTOMER_ID,POLICY_ID,POLICY_VERSION_ID,CO_APPLICANT_ID  
 
 
   
   
 /*=================================================  
 insert installment detail into policy Transaction table  
 =================================================*/  
 INSERT INTO ACT_POLICY_INSTALL_PLAN_DATA   
 (   
 CUSTOMER_ID ,  
 POLICY_ID ,  
 POLICY_VERSION_ID ,  
 PLAN_ID ,  
 APP_ID ,  
 APP_VERSION_ID ,  
 PLAN_DESCRIPTION ,  
 PLAN_TYPE ,  
 NO_OF_PAYMENTS ,  
 MONTHS_BETWEEN ,  
 PERCENT_BREAKDOWN1 ,  
 PERCENT_BREAKDOWN2 ,  
 PERCENT_BREAKDOWN3 ,  
 PERCENT_BREAKDOWN4 ,  
 PERCENT_BREAKDOWN5 ,  
 PERCENT_BREAKDOWN6 ,  
 PERCENT_BREAKDOWN7 ,  
 PERCENT_BREAKDOWN8 ,  
 PERCENT_BREAKDOWN9 ,  
 PERCENT_BREAKDOWN10 ,  
 PERCENT_BREAKDOWN11 ,  
 PERCENT_BREAKDOWN12 ,  
 MODE_OF_DOWN_PAYMENT ,  
 INSTALLMENTS_IN_DOWN_PAYMENT ,  
 MODE_OF_PAYMENT ,  
 CURRENT_TERM ,  
 IS_ACTIVE_PLAN ,  
 TOTAL_PREMIUM ,  
 TOTAL_INTEREST_AMOUNT ,  
 TOTAL_FEES ,  
 TOTAL_TAXES ,  
 TOTAL_AMOUNT ,  
 TRAN_TYPE ,  
 TOTAL_TRAN_PREMIUM ,  
 TOTAL_TRAN_INTEREST_AMOUNT ,  
 TOTAL_TRAN_FEES ,  
 TOTAL_TRAN_TAXES ,  
 TOTAL_TRAN_AMOUNT ,  
 CREATED_BY ,  
 CREATED_DATETIME ,  
 TOTAL_CHANGE_INFORCE_PRM ,  
 PRM_DIST_TYPE ,  
 TOTAL_INFO_PRM ,  
 CO_APPLICANT_ID   
 )  
 SELECT    
 TEMP_A.CUSTOMER_ID,   
 TEMP_A.POLICY_ID,   
 TEMP_A.POLICY_VERSION_ID,   
 PCPL.INSTALL_PLAN_ID,   
 TEMP_A.POLICY_ID,   
 TEMP_A.POLICY_VERSION_ID,   
 '' ,  
 AIPD.PLAN_TYPE,   
 AIPD.NO_OF_PAYMENTS,   
 AIPD.MONTHS_BETWEEN,  
 AIPD.PERCENT_BREAKDOWN1 ,  
 AIPD.PERCENT_BREAKDOWN2 ,  
 AIPD.PERCENT_BREAKDOWN3 ,  
 AIPD.PERCENT_BREAKDOWN4 ,  
 AIPD.PERCENT_BREAKDOWN5 ,  
 AIPD.PERCENT_BREAKDOWN6 ,  
 AIPD.PERCENT_BREAKDOWN7 ,  
 AIPD.PERCENT_BREAKDOWN8 ,  
 AIPD.PERCENT_BREAKDOWN9 ,  
 AIPD.PERCENT_BREAKDOWN10 ,  
 AIPD.PERCENT_BREAKDOWN11 ,  
 AIPD.PERCENT_BREAKDOWN12 ,  
 AIPD.MODE_OF_DOWNPAY,   
 AIPD.NO_INS_DOWNPAY,   
 AIPD.PLAN_PAYMENT_MODE,   
 PCPL.CURRENT_TERM,   
 AIPD.IS_ACTIVE,   
 TEMP_A.TOTAL_TRAN_PREMIUM,   
 TEMP_A.TOTAL_TRAN_INTEREST,   
 TEMP_A.TOTAL_TRAN_FEES,   
 TEMP_A.TOTAL_TRAN_TAX,   
 TEMP_A.TOTAL_TRAN_AMOUNT,   
 TEMP_A.TRAN_TYPE,   
 TEMP_A.TOTAL_TRAN_PREMIUM,   
 TEMP_A.TOTAL_TRAN_INTEREST,   
 TEMP_A.TOTAL_TRAN_FEES,   
 TEMP_A.TOTAL_TRAN_TAX,   
 TEMP_A.TOTAL_TRAN_AMOUNT,   
 dbo.fun_GetDefaultUserID(),   
 GETDATE(),   
 TEMP_A.TOTAL_CHANGE_PREMIUM,   
 14855,---for installment distribution type   
 TEMP_A.TOTAL_INFO_PREMIUM,   
 TEMP_A.CO_APPLICANT_ID   
   
    
 FROM  #tempINSTALLMENT_DATA TEMP_A   
 JOIN POL_CUSTOMER_POLICY_LIST PCPL (NOLOCK) ON  
   TEMP_A.CUSTOMER_ID = PCPL.CUSTOMER_ID AND   
   TEMP_A.POLICY_ID = PCPL.POLICY_ID AND   
   TEMP_A.POLICY_VERSION_ID = PCPL.POLICY_VERSION_ID  
 JOIN ACT_INSTALL_PLAN_DETAIL AIPD (NOLOCK) ON  
   AIPD.IDEN_PLAN_ID = PCPL.INSTALL_PLAN_ID  
   
 
 
   
 INSERT INTO ACT_POLICY_INSTALLMENT_DETAILS  
 (  
  CUSTOMER_ID ,					
  POLICY_ID ,  
  POLICY_VERSION_ID ,  
  APP_ID ,  
  APP_VERSION_ID ,  
  INSTALLMENT_AMOUNT ,  
  INSTALLMENT_EFFECTIVE_DATE ,  
  RELEASED_STATUS ,  
  INSTALLMENT_NO ,   
  PAYMENT_MODE ,  
  CURRENT_TERM ,  
  PERCENTAG_OF_PREMIUM ,  
  INTEREST_AMOUNT ,  
  FEE ,  
  TAXES ,  
  TOTAL ,  
  TRAN_INTEREST_AMOUNT ,  
  TRAN_FEE ,  
  TRAN_TAXES ,  
  TRAN_TOTAL ,  
  BOLETO_NO ,  
  IS_BOLETO_GENRATED ,  
  CREATED_BY ,  
  CREATED_DATETIME ,     
  TRAN_PREMIUM_AMOUNT ,  
  CO_APPLICANT_ID ,  
  PAID_AMOUNT ,  
  RECEIVED_AMOUNT ,  
  RECEIVED_DATE ,  
  INSTALLMENT_EXPIRE_DATE   
 )  
 SELECT   
   TEMP_B.CUSTOMER_ID,  
   TEMP_B.POLICY_ID,  
   TEMP_B.POLICY_VERSION_ID,  
   TEMP_B.APP_ID,  
   TEMP_B.APP_VERSION_ID,  
   INSTALLMENT_AMOUNT,  
   INSTALLMENT_EFFECTIVE_DATE,  
   RELEASED_STATUS,  
   INSTALLMENT_NO,  
   PAYMENT_MODE,  
   TEMP_B.CURRENT_TERM,  
   100,  
   INTEREST_AMOUNT,  
   FEE,  
   TAXES,  
   TOTAL,  
   TRAN_INTEREST_AMOUNT,  
   TRAN_FEE,  
   TRAN_TAXES,  
   TRAN_TOTAL,  
   OUR_NUMBER,  
   NULL,  
   dbo.fun_GetDefaultUserID(),  
   getdate(),  
   TRAN_PREMIUM_AMOUNT,  
   TEMP_B.CO_APPLICANT_ID,  
   INSTALLMENT_AMOUNT,  
   INSTALLMENT_AMOUNT,  
   RECEIVED_DATE,  
   INSTALLMENT_EXPIRE_DATE  
  
   
   
  FROM #tempINSTALLMENT_DETAIL TEMP_B   
  JOIN ACT_POLICY_INSTALL_PLAN_DATA APIPD (NOLOCK) ON   
  APIPD.CUSTOMER_ID = TEMP_B.CUSTOMER_ID  
  AND APIPD.POLICY_ID = TEMP_B.POLICY_ID  
  AND APIPD.POLICY_VERSION_ID = TEMP_B.POLICY_VERSION_ID  
      
 ORDER BY CUSTOMER_ID , POLICY_ID , POLICY_VERSION_ID   
 
  
 --=============================================  
 ---INSERT DATA IN MIG IL POLICY BOLETO INFO DATA
 --=============================================  
 
 
 INSERT INTO POL_IL_POLICY_BOLETO_DETAILS
 (
		CUSTOMER_ID,							
		POLICY_ID,
		POLICY_VERSION_ID,
		INSTALLMENT_ID,
		IS_BOLETO_GENERATED,
		BOLETO_GENERATED_DATE,
		ALBA_BANK_NUMBER,
		CURRENCY,
		AGREEMENT_BETWEEN_ALBA_AND_BANK,
		FIRST_DIGIT_OF_SEQUENCE_NUMBER,
		VERIFIER_DIGIT_FIRST_BLOCK,
		SECOND_TO_SEVENTH_DIGIT_SEQUENCE,
		ALBA_BANK_BRANCH_NUMBER,
		VERIFIER_DIGIT_SECOND_BLOCK,
		ALBA_BANK_ACCOUNT_NUMBER,
		ALBA_VERIFIER_DIGIT_BANK_ACCOUNT,
		FIXED_VALUE,
		VERIFIER_DIGIT_THIRD_BLOCK,
		VERIFIER_DIGIT_BAR_CODE,
		DUE_DATE_FACTOR,
		BOLETO_AMOUNT
 )
 SELECT 
		TMP_ID.CUSTOMER_ID,
		TMP_ID.POLICY_ID,
		TMP_ID.POLICY_VERSION_ID,
		APID.ROW_ID,
		0,
		NULL,
		TMP_ID.ALBA_BANK_NUMBER,
		TMP_ID.CURRENCY,
		TMP_ID.AGREEMENT_BETWEEN_ALBA_AND_BANK,
		TMP_ID.FIRST_DIGIT_OF_SEQUENCE_NUMBER,
		TMP_ID.VERIFIER_DIGIT_FIRST_BLOCK,
		TMP_ID.SECOND_TO_SEVENTH_DIGIT_SEQUENCE,
		TMP_ID.ALBA_BANK_BRANCH_NUMBER,
		TMP_ID.VERIFIER_DIGIT_SECOND_BLOCK,
		TMP_ID.ALBA_BANK_ACCOUNT_NUMBER,
		TMP_ID.ALBA_VERIFIER_DIGIT_BANK_ACCOUNT,
		TMP_ID.FIXED_VALUE,
		TMP_ID.VERIFIER_DIGIT_THIRD_BLOCK,
		TMP_ID.VERIFIER_DIGIT_BAR_CODE,
		TMP_ID.DUE_DATE_FACTOR,
		TMP_ID.BOLETO_AMOUNT
  FROM #tempINSTALLMENT_DETAIL TMP_ID 
   INNER JOIN ACT_POLICY_INSTALLMENT_DETAILS APID WITH(NOLOCK)  ON
   APID.CUSTOMER_ID			=	TMP_ID.CUSTOMER_ID			AND 
   APID.POLICY_ID			=	TMP_ID.POLICY_ID			AND 
   APID.POLICY_VERSION_ID	=	TMP_ID.POLICY_VERSION_ID	AND 
   APID.INSTALLMENT_NO		=	TMP_ID.INSTALLMENT_NO
   
 --============================================= 
 --END INSERTING 
 --=============================================    
 
  --=============================================  
 ---INSERT DATA IN POL_INSTALLMENT_BOLETO
 --=============================================  
 INSERT INTO POL_INSTALLMENT_BOLETO
 (
		CUSTOMER_ID,			
		POLICY_ID,
		POLICY_VERSION_ID,
		INSTALLEMT_ID,
		INSTALLMENT_NO,
		BANK_ID,
		BOLETO_HTML,
		CREATED_BY,
		CREATED_DATETIME,
		IS_ACTIVE,
		OUR_NUMBER,
		BOLETO_BARCODE_NUMBER
  )
SELECT
		TMP_ID.CUSTOMER_ID,
		TMP_ID.POLICY_ID,
		TMP_ID.POLICY_VERSION_ID,
		APID.ROW_ID,
		TMP_ID.INSTALLMENT_NO,
		1,
		NULL,
		dbo.fun_GetDefaultUserID(),  
		getdate(),  
		'Y',
		OUR_NUMBER,
		NULL
 FROM #tempINSTALLMENT_DETAIL TMP_ID 
   INNER JOIN ACT_POLICY_INSTALLMENT_DETAILS APID WITH(NOLOCK)  ON
   APID.CUSTOMER_ID			=	TMP_ID.CUSTOMER_ID		 AND 
   APID.POLICY_ID			=	TMP_ID.POLICY_ID		 AND 
   APID.POLICY_VERSION_ID	=	TMP_ID.POLICY_VERSION_ID AND  	
   APID.INSTALLMENT_NO		=	TMP_ID.INSTALLMENT_NO
 --============================================= 
 --END INSERTING 
 --=============================================    
 END
   
 --DROP  TABLE #tempINSTALLMENT_DETAIL
              
--select * from ACT_POLICY_INSTALL_PLAN_DATA where CUSTOMER_ID = 4508 and POLICY_ID =  20  and  POLICY_VERSION_ID =  1  
--select * from ACT_POLICY_INSTALLMENT_DETAILS where CUSTOMER_ID = 4508 and POLICY_ID =  20  and  POLICY_VERSION_ID =  1  
 
   
 END TRY  
 BEGIN CATCH  
  SELECT         
  @ERROR_NUMBER    = ERROR_NUMBER(),        
  @ERROR_SEVERITY  = ERROR_SEVERITY(),        
  @ERROR_STATE     = ERROR_STATE(),        
  @ERROR_PROCEDURE = ERROR_PROCEDURE(),        
  @ERROR_LINE   = ERROR_LINE(),      
  @ERROR_MESSAGE   = ERROR_MESSAGE()        
             
   -- CREATING LOG OF EXCEPTION         
   EXEC [PROC_MIG_INSERT_ERROR_LOG]          
   @IMPORT_REQUEST_ID    = @IMPORT_REQUEST_ID        
  ,@IMPORT_SERIAL_NO  = 0        
  ,@ERROR_NUMBER      = @ERROR_NUMBER        
  ,@ERROR_SEVERITY    = @ERROR_SEVERITY        
  ,@ERROR_STATE          = @ERROR_STATE        
  ,@ERROR_PROCEDURE   = @ERROR_PROCEDURE        
  ,@ERROR_LINE        = @ERROR_LINE        
  ,@ERROR_MESSAGE        = @ERROR_MESSAGE        
  ,@INITIAL_LOAD_FLAG    = 'Y'        
           
    
 END CATCH  
   
   
 --DROP  TABLE #TempBilling
 --DROP  TABLE #tempINSTALLMENT_DATA  
END   
   
--GO  
--EXEC [PROC_MIG_IL_INSERT_POLICY_BILLING_INFO]   734  
  
  
  
--ROLLBACK TRAN  




GO
