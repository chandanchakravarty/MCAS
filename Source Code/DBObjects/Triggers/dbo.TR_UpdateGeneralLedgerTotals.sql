
IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[TR_UpdateGeneralLedgerTotals]'))
DROP TRIGGER [dbo].[TR_UpdateGeneralLedgerTotals]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
-------------- -- Trigger  
/************************************************************************  
Trigger Name : TR_UpdateGeneralLedgerTotals  
Created On : 09-11-2006  
Created By : Ravindra   
Purpose  : To Update Totals(MTDs & YTDs in ACT_GENERAL_TOTALS for each account   
  
  
-- drop trigger TR_UpdateGeneralLedgerTotals  
************************************************************************/  
CREATE TRIGGER [dbo].[TR_UpdateGeneralLedgerTotals]  
ON   
ACT_ACCOUNTS_POSTING_DETAILS   
AFTER INSERT  
AS   
  
DECLARE @FISCAL_ID   Int  
DECLARE @TOTAL_STR   VARCHAR(2000)  
DECLARE @FIELD    VARCHAR(20)  
DECLARE @TMP_MONTH   Int   
DECLARE @TRANSACTION_DATE   DateTime  
DECLARE @TRANSACTION_MONTH  Int  
DECLARE @FISCAL_START_DATE  DateTime  
DECLARE @FISCAL_START_MONTH  Int  
DECLARE @FISCAL_START_YEAR  Int  
DECLARE @FISCAL_END_DATE  DateTime  
DECLARE @FISCAL_END_MONTH  Int  
DECLARE @FISCAL_END_YEAR  Int  
DECLARE @SUM_TRANSACTION_AMOUNT  Decimal(25,2)  
DECLARE @TRANSACTION_AMOUNT  Decimal(25,2)  
DECLARE @ACCOUNT_ID    Int,   
  @UPDATED_FROM   Char(1)   
  
  
CREATE TABLE #TEMP_TRANSACTIONS  
(                                            
 [IDENT_COL] [int]  IDENTITY(1,1) NOT NULL ,     
 [POSTING_DATE]   DateTime,  
 [TRANSACTION_AMOUNT] Decimal(25,2),  
 [ACCOUNT_ID]   Int,   
 [UPDATED_FROM]   Char(1)  
)  
INSERT INTO #TEMP_TRANSACTIONS  
SELECT POSTING_DATE ,TRANSACTION_AMOUNT,ACCOUNT_ID , UPDATED_FROM FROM INSERTED  
  
-- Iterate through each record in the newly inserted records   
  
DECLARE @IDENT_COL INT                
SET  @IDENT_COL = 1     
WHILE 1 = 1                
BEGIN                
 IF NOT EXISTS                
   (                
    SELECT IDENT_COL FROM #TEMP_TRANSACTIONS               
    WHERE IDENT_COL = @IDENT_COL                
        )                
   BEGIN                
     BREAK                
   END             
  
 SELECT    
  @TRANSACTION_MONTH = MONTH(POSTING_DATE),  
  @TRANSACTION_DATE = POSTING_DATE ,  
  @TRANSACTION_AMOUNT = TRANSACTION_AMOUNT,  
  @ACCOUNT_ID = ACCOUNT_ID ,  
  @UPDATED_FROM = UPDATED_FROM   
 FROM #TEMP_TRANSACTIONS   
 WHERE IDENT_COL = @IDENT_COL  
  
  
 -- Fetch Fiscal related data from ACT_GENERAL_LADGER  
 SELECT    
  @FISCAL_START_DATE = FISCAL_BEGIN_DATE,  
  @FISCAL_END_DATE = FISCAL_END_DATE,  
  @FISCAL_ID = FISCAL_ID,  
  @FISCAL_START_MONTH = MONTH(FISCAL_BEGIN_DATE),  
  @FISCAL_END_MONTH  = MONTH(FISCAL_END_DATE)  
 FROM  ACT_GENERAL_LEDGER    
 WHERE FISCAL_BEGIN_DATE <= CAST(CONVERT(VARCHAR,@TRANSACTION_DATE,101) AS DATETIME)   
 AND FISCAL_END_DATE >= CAST(CONVERT(VARCHAR,@TRANSACTION_DATE,101) AS DATETIME)  
  
  
 -- If there is no record for this Account/Fiscal Year in Totals table   
 -- Insert A record   
 IF  NOT EXISTS (  
  SELECT ACCOUNT_ID FROM ACT_GENERAL_LEDGER_TOTALS   
  WHERE ACCOUNT_ID= @ACCOUNT_ID   
        AND FISCAL_START_DATE = @FISCAL_START_DATE  
        AND FISCAL_END_DATE = @FISCAL_END_DATE  
  )  
 BEGIN   
  INSERT INTO ACT_GENERAL_LEDGER_TOTALS (  
   GL_ID,ACCOUNT_ID,CURRENT_MTD_BALANCE,CURRENT_YTD_BALANCE,  
   FISCAL_START_MONTH,FISCAL_START_YEAR,  
   FISCAL_END_MONTH,FISCAL_END_YEAR,  
   FISCAL_START_DATE,FISCAL_END_DATE  
   )  
  SELECT GL_ID,@ACCOUNT_ID,0,0,  
   MONTH(FISCAL_BEGIN_DATE),YEAR(FISCAL_BEGIN_DATE),  
   MONTH(FISCAL_END_DATE),YEAR(FISCAL_END_DATE),  
   FISCAL_BEGIN_DATE,FISCAL_END_DATE  
  FROM ACT_GENERAL_LEDGER   
  WHERE FISCAL_ID = @FISCAL_ID  
 END   
   
 IF(@UPDATED_FROM = 'E')  
 BEGIN   
  UPDATE ACT_GENERAL_LEDGER_TOTALS   
  SET CARRY_FWDED_AMOUNT = ISNULL(CARRY_FWDED_AMOUNT,0) + @TRANSACTION_AMOUNT  
  WHERE ACCOUNT_ID= @ACCOUNT_ID   
      AND FISCAL_START_DATE = @FISCAL_START_DATE  
      AND FISCAL_END_DATE = @FISCAL_END_DATE  
 END  
 ELSE  
 BEGIN   
  
  --- Update Cuttent MTD & YTD Balance for this Account/Fiscal   
  UPDATE ACT_GENERAL_LEDGER_TOTALS SET   
  CURRENT_MTD_BALANCE = ISNULL(CURRENT_MTD_BALANCE,0) + @TRANSACTION_AMOUNT,  
  CURRENT_YTD_BALANCE =ISNULL(CURRENT_YTD_BALANCE,0) + @TRANSACTION_AMOUNT  
  WHERE ACCOUNT_ID= @ACCOUNT_ID   
      AND FISCAL_START_DATE = @FISCAL_START_DATE  
      AND FISCAL_END_DATE = @FISCAL_END_DATE  
  
  
  -- Update Current's Month MTD and Succesive Months  YTD   
  SET @TMP_MONTH = @TRANSACTION_MONTH  
  
  SET @FIELD = 'YEAR_'+ CAST(UPPER(LEFT(DATENAME(MM,CAST(@TMP_MONTH  AS VARCHAR)+ '/1/30'),3)) AS VARCHAR) +'_MTD'  
  SET @TOTAL_STR = 'UPDATE ACT_GENERAL_LEDGER_TOTALS  SET '   +  @FIELD + ' = ISNULL('+ @FIELD  + ',0) +'   
   +  CONVERT(Varchar,@TRANSACTION_AMOUNT )   
  
  WHILE (@TMP_MONTH <= @FISCAL_END_MONTH)  
  BEGIN   
   SELECT  @FIELD = 'YEAR_'+ CAST(UPPER(LEFT(DATENAME(MM,CAST(@TMP_MONTH  AS VARCHAR)+ '/1/30'),3)) AS VARCHAR) +'_YTD'  
  
   SELECT @TOTAL_STR = @TOTAL_STR + ',  ' + @FIELD + ' = ISNULL('+ @FIELD  + ',0) +'   
    +  CONVERT(Varchar,@TRANSACTION_AMOUNT )   
     
   SELECT @TMP_MONTH = @TMP_MONTH + 1  
  
  END   
  
  SELECT @TOTAL_STR = @TOTAL_STR + '   WHERE ACCOUNT_ID= ' + CONVERT(VARCHAR,@ACCOUNT_ID) +    
   '   AND FISCAL_START_DATE = ''' + CONVERT(VARCHAR,@FISCAL_START_DATE,101) + '''' +  
   '   AND FISCAL_END_DATE = ''' + CONVERT(VARCHAR,@FISCAL_END_DATE,101) + ''''  
  EXECUTE(@TOTAL_STR)  
 END  
 SET @IDENT_COL = @IDENT_COL + 1       
END   
  
DROP TABLE #TEMP_TRANSACTIONS  
  